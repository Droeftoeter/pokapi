<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Map.proto
 */


namespace POGOProtos\Map;

/**
 * Protobuf message : POGOProtos.Map.MapCell
 */
class MapCell extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * s2_cell_id optional uint64 = 1
     *
     * @var int
     */
    protected $s2_cell_id = null;

    /**
     * current_timestamp_ms optional int64 = 2
     *
     * @var int
     */
    protected $current_timestamp_ms = null;

    /**
     * forts repeated message = 3
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\Fort\FortData>
     */
    protected $forts = null;

    /**
     * spawn_points repeated message = 4
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\SpawnPoint>
     */
    protected $spawn_points = null;

    /**
     * deleted_objects repeated string = 6
     *
     * @var \Protobuf\Collection
     */
    protected $deleted_objects = null;

    /**
     * is_truncated_list optional bool = 7
     *
     * @var bool
     */
    protected $is_truncated_list = null;

    /**
     * fort_summaries repeated message = 8
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\Fort\FortSummary>
     */
    protected $fort_summaries = null;

    /**
     * decimated_spawn_points repeated message = 9
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\SpawnPoint>
     */
    protected $decimated_spawn_points = null;

    /**
     * wild_pokemons repeated message = 5
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\Pokemon\WildPokemon>
     */
    protected $wild_pokemons = null;

    /**
     * catchable_pokemons repeated message = 10
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\Pokemon\MapPokemon>
     */
    protected $catchable_pokemons = null;

    /**
     * nearby_pokemons repeated message = 11
     *
     * @var \Protobuf\Collection<\POGOProtos\Map\Pokemon\NearbyPokemon>
     */
    protected $nearby_pokemons = null;

    /**
     * Check if 's2_cell_id' has a value
     *
     * @return bool
     */
    public function hasS2CellId()
    {
        return $this->s2_cell_id !== null;
    }

    /**
     * Get 's2_cell_id' value
     *
     * @return int
     */
    public function getS2CellId()
    {
        return $this->s2_cell_id;
    }

    /**
     * Set 's2_cell_id' value
     *
     * @param int $value
     */
    public function setS2CellId($value = null)
    {
        $this->s2_cell_id = $value;
    }

    /**
     * Check if 'current_timestamp_ms' has a value
     *
     * @return bool
     */
    public function hasCurrentTimestampMs()
    {
        return $this->current_timestamp_ms !== null;
    }

    /**
     * Get 'current_timestamp_ms' value
     *
     * @return int
     */
    public function getCurrentTimestampMs()
    {
        return $this->current_timestamp_ms;
    }

    /**
     * Set 'current_timestamp_ms' value
     *
     * @param int $value
     */
    public function setCurrentTimestampMs($value = null)
    {
        $this->current_timestamp_ms = $value;
    }

    /**
     * Check if 'forts' has a value
     *
     * @return bool
     */
    public function hasFortsList()
    {
        return $this->forts !== null;
    }

    /**
     * Get 'forts' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\Fort\FortData>
     */
    public function getFortsList()
    {
        return $this->forts;
    }

    /**
     * Set 'forts' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\Fort\FortData> $value
     */
    public function setFortsList(\Protobuf\Collection $value = null)
    {
        $this->forts = $value;
    }

    /**
     * Add a new element to 'forts'
     *
     * @param \POGOProtos\Map\Fort\FortData $value
     */
    public function addForts(\POGOProtos\Map\Fort\FortData $value)
    {
        if ($this->forts === null) {
            $this->forts = new \Protobuf\MessageCollection();
        }

        $this->forts->add($value);
    }

    /**
     * Check if 'spawn_points' has a value
     *
     * @return bool
     */
    public function hasSpawnPointsList()
    {
        return $this->spawn_points !== null;
    }

    /**
     * Get 'spawn_points' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\SpawnPoint>
     */
    public function getSpawnPointsList()
    {
        return $this->spawn_points;
    }

    /**
     * Set 'spawn_points' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\SpawnPoint> $value
     */
    public function setSpawnPointsList(\Protobuf\Collection $value = null)
    {
        $this->spawn_points = $value;
    }

    /**
     * Add a new element to 'spawn_points'
     *
     * @param \POGOProtos\Map\SpawnPoint $value
     */
    public function addSpawnPoints(\POGOProtos\Map\SpawnPoint $value)
    {
        if ($this->spawn_points === null) {
            $this->spawn_points = new \Protobuf\MessageCollection();
        }

        $this->spawn_points->add($value);
    }

    /**
     * Check if 'deleted_objects' has a value
     *
     * @return bool
     */
    public function hasDeletedObjectsList()
    {
        return $this->deleted_objects !== null;
    }

    /**
     * Get 'deleted_objects' value
     *
     * @return \Protobuf\Collection
     */
    public function getDeletedObjectsList()
    {
        return $this->deleted_objects;
    }

    /**
     * Set 'deleted_objects' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setDeletedObjectsList(\Protobuf\Collection $value = null)
    {
        $this->deleted_objects = $value;
    }

    /**
     * Add a new element to 'deleted_objects'
     *
     * @param string $value
     */
    public function addDeletedObjects($value)
    {
        if ($this->deleted_objects === null) {
            $this->deleted_objects = new \Protobuf\ScalarCollection();
        }

        $this->deleted_objects->add($value);
    }

    /**
     * Check if 'is_truncated_list' has a value
     *
     * @return bool
     */
    public function hasIsTruncatedList()
    {
        return $this->is_truncated_list !== null;
    }

    /**
     * Get 'is_truncated_list' value
     *
     * @return bool
     */
    public function getIsTruncatedList()
    {
        return $this->is_truncated_list;
    }

    /**
     * Set 'is_truncated_list' value
     *
     * @param bool $value
     */
    public function setIsTruncatedList($value = null)
    {
        $this->is_truncated_list = $value;
    }

    /**
     * Check if 'fort_summaries' has a value
     *
     * @return bool
     */
    public function hasFortSummariesList()
    {
        return $this->fort_summaries !== null;
    }

    /**
     * Get 'fort_summaries' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\Fort\FortSummary>
     */
    public function getFortSummariesList()
    {
        return $this->fort_summaries;
    }

    /**
     * Set 'fort_summaries' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\Fort\FortSummary> $value
     */
    public function setFortSummariesList(\Protobuf\Collection $value = null)
    {
        $this->fort_summaries = $value;
    }

    /**
     * Add a new element to 'fort_summaries'
     *
     * @param \POGOProtos\Map\Fort\FortSummary $value
     */
    public function addFortSummaries(\POGOProtos\Map\Fort\FortSummary $value)
    {
        if ($this->fort_summaries === null) {
            $this->fort_summaries = new \Protobuf\MessageCollection();
        }

        $this->fort_summaries->add($value);
    }

    /**
     * Check if 'decimated_spawn_points' has a value
     *
     * @return bool
     */
    public function hasDecimatedSpawnPointsList()
    {
        return $this->decimated_spawn_points !== null;
    }

    /**
     * Get 'decimated_spawn_points' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\SpawnPoint>
     */
    public function getDecimatedSpawnPointsList()
    {
        return $this->decimated_spawn_points;
    }

    /**
     * Set 'decimated_spawn_points' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\SpawnPoint> $value
     */
    public function setDecimatedSpawnPointsList(\Protobuf\Collection $value = null)
    {
        $this->decimated_spawn_points = $value;
    }

    /**
     * Add a new element to 'decimated_spawn_points'
     *
     * @param \POGOProtos\Map\SpawnPoint $value
     */
    public function addDecimatedSpawnPoints(\POGOProtos\Map\SpawnPoint $value)
    {
        if ($this->decimated_spawn_points === null) {
            $this->decimated_spawn_points = new \Protobuf\MessageCollection();
        }

        $this->decimated_spawn_points->add($value);
    }

    /**
     * Check if 'wild_pokemons' has a value
     *
     * @return bool
     */
    public function hasWildPokemonsList()
    {
        return $this->wild_pokemons !== null;
    }

    /**
     * Get 'wild_pokemons' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\Pokemon\WildPokemon>
     */
    public function getWildPokemonsList()
    {
        return $this->wild_pokemons;
    }

    /**
     * Set 'wild_pokemons' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\Pokemon\WildPokemon> $value
     */
    public function setWildPokemonsList(\Protobuf\Collection $value = null)
    {
        $this->wild_pokemons = $value;
    }

    /**
     * Add a new element to 'wild_pokemons'
     *
     * @param \POGOProtos\Map\Pokemon\WildPokemon $value
     */
    public function addWildPokemons(\POGOProtos\Map\Pokemon\WildPokemon $value)
    {
        if ($this->wild_pokemons === null) {
            $this->wild_pokemons = new \Protobuf\MessageCollection();
        }

        $this->wild_pokemons->add($value);
    }

    /**
     * Check if 'catchable_pokemons' has a value
     *
     * @return bool
     */
    public function hasCatchablePokemonsList()
    {
        return $this->catchable_pokemons !== null;
    }

    /**
     * Get 'catchable_pokemons' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\Pokemon\MapPokemon>
     */
    public function getCatchablePokemonsList()
    {
        return $this->catchable_pokemons;
    }

    /**
     * Set 'catchable_pokemons' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\Pokemon\MapPokemon> $value
     */
    public function setCatchablePokemonsList(\Protobuf\Collection $value = null)
    {
        $this->catchable_pokemons = $value;
    }

    /**
     * Add a new element to 'catchable_pokemons'
     *
     * @param \POGOProtos\Map\Pokemon\MapPokemon $value
     */
    public function addCatchablePokemons(\POGOProtos\Map\Pokemon\MapPokemon $value)
    {
        if ($this->catchable_pokemons === null) {
            $this->catchable_pokemons = new \Protobuf\MessageCollection();
        }

        $this->catchable_pokemons->add($value);
    }

    /**
     * Check if 'nearby_pokemons' has a value
     *
     * @return bool
     */
    public function hasNearbyPokemonsList()
    {
        return $this->nearby_pokemons !== null;
    }

    /**
     * Get 'nearby_pokemons' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Map\Pokemon\NearbyPokemon>
     */
    public function getNearbyPokemonsList()
    {
        return $this->nearby_pokemons;
    }

    /**
     * Set 'nearby_pokemons' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Map\Pokemon\NearbyPokemon> $value
     */
    public function setNearbyPokemonsList(\Protobuf\Collection $value = null)
    {
        $this->nearby_pokemons = $value;
    }

    /**
     * Add a new element to 'nearby_pokemons'
     *
     * @param \POGOProtos\Map\Pokemon\NearbyPokemon $value
     */
    public function addNearbyPokemons(\POGOProtos\Map\Pokemon\NearbyPokemon $value)
    {
        if ($this->nearby_pokemons === null) {
            $this->nearby_pokemons = new \Protobuf\MessageCollection();
        }

        $this->nearby_pokemons->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            's2_cell_id' => null,
            'current_timestamp_ms' => null,
            'forts' => [],
            'spawn_points' => [],
            'deleted_objects' => [],
            'is_truncated_list' => null,
            'fort_summaries' => [],
            'decimated_spawn_points' => [],
            'wild_pokemons' => [],
            'catchable_pokemons' => [],
            'nearby_pokemons' => []
        ], $values);

        $message->setS2CellId($values['s2_cell_id']);
        $message->setCurrentTimestampMs($values['current_timestamp_ms']);
        $message->setIsTruncatedList($values['is_truncated_list']);

        foreach ($values['forts'] as $item) {
            $message->addForts($item);
        }

        foreach ($values['spawn_points'] as $item) {
            $message->addSpawnPoints($item);
        }

        foreach ($values['deleted_objects'] as $item) {
            $message->addDeletedObjects($item);
        }

        foreach ($values['fort_summaries'] as $item) {
            $message->addFortSummaries($item);
        }

        foreach ($values['decimated_spawn_points'] as $item) {
            $message->addDecimatedSpawnPoints($item);
        }

        foreach ($values['wild_pokemons'] as $item) {
            $message->addWildPokemons($item);
        }

        foreach ($values['catchable_pokemons'] as $item) {
            $message->addCatchablePokemons($item);
        }

        foreach ($values['nearby_pokemons'] as $item) {
            $message->addNearbyPokemons($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MapCell',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 's2_cell_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'current_timestamp_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'forts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.Fort.FortData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'spawn_points',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.SpawnPoint'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'deleted_objects',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'is_truncated_list',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'fort_summaries',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.Fort.FortSummary'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'decimated_spawn_points',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.SpawnPoint'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'wild_pokemons',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.Pokemon.WildPokemon'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'catchable_pokemons',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.Pokemon.MapPokemon'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'nearby_pokemons',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Map.Pokemon.NearbyPokemon'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->s2_cell_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->s2_cell_id);
        }

        if ($this->current_timestamp_ms !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->current_timestamp_ms);
        }

        if ($this->forts !== null) {
            foreach ($this->forts as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->spawn_points !== null) {
            foreach ($this->spawn_points as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->deleted_objects !== null) {
            foreach ($this->deleted_objects as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->is_truncated_list !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->is_truncated_list);
        }

        if ($this->fort_summaries !== null) {
            foreach ($this->fort_summaries as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->decimated_spawn_points !== null) {
            foreach ($this->decimated_spawn_points as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->wild_pokemons !== null) {
            foreach ($this->wild_pokemons as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->catchable_pokemons !== null) {
            foreach ($this->catchable_pokemons as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->nearby_pokemons !== null) {
            foreach ($this->nearby_pokemons as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->s2_cell_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->current_timestamp_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\Fort\FortData();

                if ($this->forts === null) {
                    $this->forts = new \Protobuf\MessageCollection();
                }

                $this->forts->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\SpawnPoint();

                if ($this->spawn_points === null) {
                    $this->spawn_points = new \Protobuf\MessageCollection();
                }

                $this->spawn_points->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->deleted_objects === null) {
                    $this->deleted_objects = new \Protobuf\ScalarCollection();
                }

                $this->deleted_objects->add($reader->readString($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_truncated_list = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\Fort\FortSummary();

                if ($this->fort_summaries === null) {
                    $this->fort_summaries = new \Protobuf\MessageCollection();
                }

                $this->fort_summaries->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\SpawnPoint();

                if ($this->decimated_spawn_points === null) {
                    $this->decimated_spawn_points = new \Protobuf\MessageCollection();
                }

                $this->decimated_spawn_points->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\Pokemon\WildPokemon();

                if ($this->wild_pokemons === null) {
                    $this->wild_pokemons = new \Protobuf\MessageCollection();
                }

                $this->wild_pokemons->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\Pokemon\MapPokemon();

                if ($this->catchable_pokemons === null) {
                    $this->catchable_pokemons = new \Protobuf\MessageCollection();
                }

                $this->catchable_pokemons->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Map\Pokemon\NearbyPokemon();

                if ($this->nearby_pokemons === null) {
                    $this->nearby_pokemons = new \Protobuf\MessageCollection();
                }

                $this->nearby_pokemons->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->s2_cell_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->s2_cell_id);
        }

        if ($this->current_timestamp_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->current_timestamp_ms);
        }

        if ($this->forts !== null) {
            foreach ($this->forts as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->spawn_points !== null) {
            foreach ($this->spawn_points as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->deleted_objects !== null) {
            foreach ($this->deleted_objects as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->is_truncated_list !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->fort_summaries !== null) {
            foreach ($this->fort_summaries as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->decimated_spawn_points !== null) {
            foreach ($this->decimated_spawn_points as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->wild_pokemons !== null) {
            foreach ($this->wild_pokemons as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->catchable_pokemons !== null) {
            foreach ($this->catchable_pokemons as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->nearby_pokemons !== null) {
            foreach ($this->nearby_pokemons as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->s2_cell_id = null;
        $this->current_timestamp_ms = null;
        $this->forts = null;
        $this->spawn_points = null;
        $this->deleted_objects = null;
        $this->is_truncated_list = null;
        $this->fort_summaries = null;
        $this->decimated_spawn_points = null;
        $this->wild_pokemons = null;
        $this->catchable_pokemons = null;
        $this->nearby_pokemons = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Map\MapCell) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->s2_cell_id = ($message->s2_cell_id !== null) ? $message->s2_cell_id : $this->s2_cell_id;
        $this->current_timestamp_ms = ($message->current_timestamp_ms !== null) ? $message->current_timestamp_ms : $this->current_timestamp_ms;
        $this->forts = ($message->forts !== null) ? $message->forts : $this->forts;
        $this->spawn_points = ($message->spawn_points !== null) ? $message->spawn_points : $this->spawn_points;
        $this->deleted_objects = ($message->deleted_objects !== null) ? $message->deleted_objects : $this->deleted_objects;
        $this->is_truncated_list = ($message->is_truncated_list !== null) ? $message->is_truncated_list : $this->is_truncated_list;
        $this->fort_summaries = ($message->fort_summaries !== null) ? $message->fort_summaries : $this->fort_summaries;
        $this->decimated_spawn_points = ($message->decimated_spawn_points !== null) ? $message->decimated_spawn_points : $this->decimated_spawn_points;
        $this->wild_pokemons = ($message->wild_pokemons !== null) ? $message->wild_pokemons : $this->wild_pokemons;
        $this->catchable_pokemons = ($message->catchable_pokemons !== null) ? $message->catchable_pokemons : $this->catchable_pokemons;
        $this->nearby_pokemons = ($message->nearby_pokemons !== null) ? $message->nearby_pokemons : $this->nearby_pokemons;
    }


}

