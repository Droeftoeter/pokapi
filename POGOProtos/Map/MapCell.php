<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Map/MapCell.php');

namespace POGOProtos\Map {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Map.MapCell
  final class MapCell extends ProtobufMessage {

    private $_unknown;
    private $s2CellId = 0; // optional uint64 s2_cell_id = 1
    private $currentTimestampMs = 0; // optional int64 current_timestamp_ms = 2
    private $forts = array(); // repeated .POGOProtos.Map.Fort.FortData forts = 3
    private $spawnPoints = array(); // repeated .POGOProtos.Map.SpawnPoint spawn_points = 4
    private $deletedObjects = array(); // repeated string deleted_objects = 6
    private $isTruncatedList = false; // optional bool is_truncated_list = 7
    private $fortSummaries = array(); // repeated .POGOProtos.Map.Fort.FortSummary fort_summaries = 8
    private $decimatedSpawnPoints = array(); // repeated .POGOProtos.Map.SpawnPoint decimated_spawn_points = 9
    private $wildPokemons = array(); // repeated .POGOProtos.Map.Pokemon.WildPokemon wild_pokemons = 5
    private $catchablePokemons = array(); // repeated .POGOProtos.Map.Pokemon.MapPokemon catchable_pokemons = 10
    private $nearbyPokemons = array(); // repeated .POGOProtos.Map.Pokemon.NearbyPokemon nearby_pokemons = 11

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional uint64 s2_cell_id = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->s2CellId = $tmp;

            break;
          case 2: // optional int64 current_timestamp_ms = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->currentTimestampMs = $tmp;

            break;
          case 3: // repeated .POGOProtos.Map.Fort.FortData forts = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->forts[] = new \POGOProtos\Map\Fort\FortData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Fort\FortData did not read the full length');

            break;
          case 4: // repeated .POGOProtos.Map.SpawnPoint spawn_points = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->spawnPoints[] = new \POGOProtos\Map\SpawnPoint($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\SpawnPoint did not read the full length');

            break;
          case 6: // repeated string deleted_objects = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deletedObjects[] = $tmp;

            break;
          case 7: // optional bool is_truncated_list = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->isTruncatedList = ($tmp > 0) ? true : false;

            break;
          case 8: // repeated .POGOProtos.Map.Fort.FortSummary fort_summaries = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->fortSummaries[] = new \POGOProtos\Map\Fort\FortSummary($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Fort\FortSummary did not read the full length');

            break;
          case 9: // repeated .POGOProtos.Map.SpawnPoint decimated_spawn_points = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->decimatedSpawnPoints[] = new \POGOProtos\Map\SpawnPoint($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\SpawnPoint did not read the full length');

            break;
          case 5: // repeated .POGOProtos.Map.Pokemon.WildPokemon wild_pokemons = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->wildPokemons[] = new \POGOProtos\Map\Pokemon\WildPokemon($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Pokemon\WildPokemon did not read the full length');

            break;
          case 10: // repeated .POGOProtos.Map.Pokemon.MapPokemon catchable_pokemons = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->catchablePokemons[] = new \POGOProtos\Map\Pokemon\MapPokemon($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Pokemon\MapPokemon did not read the full length');

            break;
          case 11: // repeated .POGOProtos.Map.Pokemon.NearbyPokemon nearby_pokemons = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->nearbyPokemons[] = new \POGOProtos\Map\Pokemon\NearbyPokemon($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Pokemon\NearbyPokemon did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->s2CellId !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->s2CellId);
      }
      if ($this->currentTimestampMs !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->currentTimestampMs);
      }
      foreach($this->forts as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->spawnPoints as $v) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->deletedObjects as $v) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if ($this->isTruncatedList !== false) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->isTruncatedList ? 1 : 0);
      }
      foreach($this->fortSummaries as $v) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->decimatedSpawnPoints as $v) {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->wildPokemons as $v) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->catchablePokemons as $v) {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->nearbyPokemons as $v) {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->s2CellId !== 0) {
        $size += 1 + Protobuf::size_varint($this->s2CellId);
      }
      if ($this->currentTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->currentTimestampMs);
      }
      foreach($this->forts as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->spawnPoints as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->deletedObjects as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->isTruncatedList !== false) {
        $size += 2;
      }
      foreach($this->fortSummaries as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->decimatedSpawnPoints as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->wildPokemons as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->catchablePokemons as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->nearbyPokemons as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearS2CellId() { $this->s2CellId = 0; }
    public function getS2CellId() { return $this->s2CellId;}
    public function setS2CellId($value) { $this->s2CellId = $value; }

    public function clearCurrentTimestampMs() { $this->currentTimestampMs = 0; }
    public function getCurrentTimestampMs() { return $this->currentTimestampMs;}
    public function setCurrentTimestampMs($value) { $this->currentTimestampMs = $value; }

    public function clearForts() { $this->forts = array(); }
    public function getFortsCount() { return count($this->forts); }
    public function getForts($index) { return $this->forts[$index]; }
    public function getFortsArray() { return $this->forts; }
    public function setForts($index, array $value) {$this->forts[$index] = $value; }
    public function addForts(array $value) { $this->forts[] = $value; }
    public function addAllForts(array $values) { foreach($values as $value) {$this->forts[] = $value; }}

    public function clearSpawnPoints() { $this->spawnPoints = array(); }
    public function getSpawnPointsCount() { return count($this->spawnPoints); }
    public function getSpawnPoints($index) { return $this->spawnPoints[$index]; }
    public function getSpawnPointsArray() { return $this->spawnPoints; }
    public function setSpawnPoints($index, array $value) {$this->spawnPoints[$index] = $value; }
    public function addSpawnPoints(array $value) { $this->spawnPoints[] = $value; }
    public function addAllSpawnPoints(array $values) { foreach($values as $value) {$this->spawnPoints[] = $value; }}

    public function clearDeletedObjects() { $this->deletedObjects = array(); }
    public function getDeletedObjectsCount() { return count($this->deletedObjects); }
    public function getDeletedObjects($index) { return $this->deletedObjects[$index]; }
    public function getDeletedObjectsArray() { return $this->deletedObjects; }
    public function setDeletedObjects($index, array $value) {$this->deletedObjects[$index] = $value; }
    public function addDeletedObjects(array $value) { $this->deletedObjects[] = $value; }
    public function addAllDeletedObjects(array $values) { foreach($values as $value) {$this->deletedObjects[] = $value; }}

    public function clearIsTruncatedList() { $this->isTruncatedList = false; }
    public function getIsTruncatedList() { return $this->isTruncatedList;}
    public function setIsTruncatedList($value) { $this->isTruncatedList = $value; }

    public function clearFortSummaries() { $this->fortSummaries = array(); }
    public function getFortSummariesCount() { return count($this->fortSummaries); }
    public function getFortSummaries($index) { return $this->fortSummaries[$index]; }
    public function getFortSummariesArray() { return $this->fortSummaries; }
    public function setFortSummaries($index, array $value) {$this->fortSummaries[$index] = $value; }
    public function addFortSummaries(array $value) { $this->fortSummaries[] = $value; }
    public function addAllFortSummaries(array $values) { foreach($values as $value) {$this->fortSummaries[] = $value; }}

    public function clearDecimatedSpawnPoints() { $this->decimatedSpawnPoints = array(); }
    public function getDecimatedSpawnPointsCount() { return count($this->decimatedSpawnPoints); }
    public function getDecimatedSpawnPoints($index) { return $this->decimatedSpawnPoints[$index]; }
    public function getDecimatedSpawnPointsArray() { return $this->decimatedSpawnPoints; }
    public function setDecimatedSpawnPoints($index, array $value) {$this->decimatedSpawnPoints[$index] = $value; }
    public function addDecimatedSpawnPoints(array $value) { $this->decimatedSpawnPoints[] = $value; }
    public function addAllDecimatedSpawnPoints(array $values) { foreach($values as $value) {$this->decimatedSpawnPoints[] = $value; }}

    public function clearWildPokemons() { $this->wildPokemons = array(); }
    public function getWildPokemonsCount() { return count($this->wildPokemons); }
    public function getWildPokemons($index) { return $this->wildPokemons[$index]; }
    public function getWildPokemonsArray() { return $this->wildPokemons; }
    public function setWildPokemons($index, array $value) {$this->wildPokemons[$index] = $value; }
    public function addWildPokemons(array $value) { $this->wildPokemons[] = $value; }
    public function addAllWildPokemons(array $values) { foreach($values as $value) {$this->wildPokemons[] = $value; }}

    public function clearCatchablePokemons() { $this->catchablePokemons = array(); }
    public function getCatchablePokemonsCount() { return count($this->catchablePokemons); }
    public function getCatchablePokemons($index) { return $this->catchablePokemons[$index]; }
    public function getCatchablePokemonsArray() { return $this->catchablePokemons; }
    public function setCatchablePokemons($index, array $value) {$this->catchablePokemons[$index] = $value; }
    public function addCatchablePokemons(array $value) { $this->catchablePokemons[] = $value; }
    public function addAllCatchablePokemons(array $values) { foreach($values as $value) {$this->catchablePokemons[] = $value; }}

    public function clearNearbyPokemons() { $this->nearbyPokemons = array(); }
    public function getNearbyPokemonsCount() { return count($this->nearbyPokemons); }
    public function getNearbyPokemons($index) { return $this->nearbyPokemons[$index]; }
    public function getNearbyPokemonsArray() { return $this->nearbyPokemons; }
    public function setNearbyPokemons($index, array $value) {$this->nearbyPokemons[$index] = $value; }
    public function addNearbyPokemons(array $value) { $this->nearbyPokemons[] = $value; }
    public function addAllNearbyPokemons(array $values) { foreach($values as $value) {$this->nearbyPokemons[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('s2_cell_id', $this->s2CellId, 0)
           . Protobuf::toString('current_timestamp_ms', $this->currentTimestampMs, 0)
           . Protobuf::toString('forts', $this->forts, null)
           . Protobuf::toString('spawn_points', $this->spawnPoints, null)
           . Protobuf::toString('deleted_objects', $this->deletedObjects, "")
           . Protobuf::toString('is_truncated_list', $this->isTruncatedList, false)
           . Protobuf::toString('fort_summaries', $this->fortSummaries, null)
           . Protobuf::toString('decimated_spawn_points', $this->decimatedSpawnPoints, null)
           . Protobuf::toString('wild_pokemons', $this->wildPokemons, null)
           . Protobuf::toString('catchable_pokemons', $this->catchablePokemons, null)
           . Protobuf::toString('nearby_pokemons', $this->nearbyPokemons, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Map.MapCell)
  }

}