<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Map/Pokemon/MapPokemon.php');

namespace POGOProtos\Map\Pokemon {

  use POGOProtos\Enums\PokemonId;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Map.Pokemon.MapPokemon
  final class MapPokemon extends ProtobufMessage {

    private $_unknown;
    private $spawnPointId = ""; // optional string spawn_point_id = 1
    private $encounterId = 0; // optional fixed64 encounter_id = 2
    private $pokemonId = PokemonId::MISSINGNO; // optional .POGOProtos.Enums.PokemonId pokemon_id = 3
    private $expirationTimestampMs = 0; // optional int64 expiration_timestamp_ms = 4
    private $latitude = 0; // optional double latitude = 5
    private $longitude = 0; // optional double longitude = 6

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string spawn_point_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->spawnPointId = $tmp;

            break;
          case 2: // optional fixed64 encounter_id = 2
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_uint64($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
            $this->encounterId = $tmp;

            break;
          case 3: // optional .POGOProtos.Enums.PokemonId pokemon_id = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->pokemonId = $tmp;

            break;
          case 4: // optional int64 expiration_timestamp_ms = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->expirationTimestampMs = $tmp;

            break;
          case 5: // optional double latitude = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 6: // optional double longitude = 6
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->spawnPointId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->spawnPointId));
        fwrite($fp, $this->spawnPointId);
      }
      if ($this->encounterId !== 0) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_uint64($fp, $this->encounterId);
      }
      if ($this->pokemonId !== PokemonId::MISSINGNO) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->pokemonId);
      }
      if ($this->expirationTimestampMs !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->expirationTimestampMs);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "1", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
    }

    public function size() {
      $size = 0;
      if ($this->spawnPointId !== "") {
        $l = strlen($this->spawnPointId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->encounterId !== 0) {
        $size += 9;
      }
      if ($this->pokemonId !== PokemonId::MISSINGNO) {
        $size += 1 + Protobuf::size_varint($this->pokemonId);
      }
      if ($this->expirationTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->expirationTimestampMs);
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearSpawnPointId() { $this->spawnPointId = ""; }
    public function getSpawnPointId() { return $this->spawnPointId;}
    public function setSpawnPointId($value) { $this->spawnPointId = $value; }

    public function clearEncounterId() { $this->encounterId = 0; }
    public function getEncounterId() { return $this->encounterId;}
    public function setEncounterId($value) { $this->encounterId = $value; }

    public function clearPokemonId() { $this->pokemonId = PokemonId::MISSINGNO; }
    public function getPokemonId() { return $this->pokemonId;}
    public function setPokemonId($value) { $this->pokemonId = $value; }

    public function clearExpirationTimestampMs() { $this->expirationTimestampMs = 0; }
    public function getExpirationTimestampMs() { return $this->expirationTimestampMs;}
    public function setExpirationTimestampMs($value) { $this->expirationTimestampMs = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('spawn_point_id', $this->spawnPointId, "")
           . Protobuf::toString('encounter_id', $this->encounterId, 0)
           . Protobuf::toString('pokemon_id', $this->pokemonId, PokemonId::MISSINGNO)
           . Protobuf::toString('expiration_timestamp_ms', $this->expirationTimestampMs, 0)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Map.Pokemon.MapPokemon)
  }

}