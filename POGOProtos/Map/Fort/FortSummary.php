<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Map/Fort/FortSummary.php');

namespace POGOProtos\Map\Fort {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Map.Fort.FortSummary
  final class FortSummary extends ProtobufMessage {

    private $_unknown;
    private $fortSummaryId = ""; // optional string fort_summary_id = 1
    private $lastModifiedTimestampMs = 0; // optional int64 last_modified_timestamp_ms = 2
    private $latitude = 0; // optional double latitude = 3
    private $longitude = 0; // optional double longitude = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string fort_summary_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->fortSummaryId = $tmp;

            break;
          case 2: // optional int64 last_modified_timestamp_ms = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->lastModifiedTimestampMs = $tmp;

            break;
          case 3: // optional double latitude = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 4: // optional double longitude = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->fortSummaryId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->fortSummaryId));
        fwrite($fp, $this->fortSummaryId);
      }
      if ($this->lastModifiedTimestampMs !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->lastModifiedTimestampMs);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
    }

    public function size() {
      $size = 0;
      if ($this->fortSummaryId !== "") {
        $l = strlen($this->fortSummaryId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->lastModifiedTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->lastModifiedTimestampMs);
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearFortSummaryId() { $this->fortSummaryId = ""; }
    public function getFortSummaryId() { return $this->fortSummaryId;}
    public function setFortSummaryId($value) { $this->fortSummaryId = $value; }

    public function clearLastModifiedTimestampMs() { $this->lastModifiedTimestampMs = 0; }
    public function getLastModifiedTimestampMs() { return $this->lastModifiedTimestampMs;}
    public function setLastModifiedTimestampMs($value) { $this->lastModifiedTimestampMs = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('fort_summary_id', $this->fortSummaryId, "")
           . Protobuf::toString('last_modified_timestamp_ms', $this->lastModifiedTimestampMs, 0)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Map.Fort.FortSummary)
  }

}