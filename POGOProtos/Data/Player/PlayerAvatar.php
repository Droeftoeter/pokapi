<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Player/PlayerAvatar.php');

namespace POGOProtos\Data\Player {

  use POGOProtos\Enums\Gender;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.Player.PlayerAvatar
  final class PlayerAvatar extends ProtobufMessage {

    private $_unknown;
    private $skin = 0; // optional int32 skin = 2
    private $hair = 0; // optional int32 hair = 3
    private $shirt = 0; // optional int32 shirt = 4
    private $pants = 0; // optional int32 pants = 5
    private $hat = 0; // optional int32 hat = 6
    private $shoes = 0; // optional int32 shoes = 7
    private $gender = Gender::MALE; // optional .POGOProtos.Enums.Gender gender = 8
    private $eyes = 0; // optional int32 eyes = 9
    private $backpack = 0; // optional int32 backpack = 10

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 2: // optional int32 skin = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->skin = $tmp;

            break;
          case 3: // optional int32 hair = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->hair = $tmp;

            break;
          case 4: // optional int32 shirt = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->shirt = $tmp;

            break;
          case 5: // optional int32 pants = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->pants = $tmp;

            break;
          case 6: // optional int32 hat = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->hat = $tmp;

            break;
          case 7: // optional int32 shoes = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->shoes = $tmp;

            break;
          case 8: // optional .POGOProtos.Enums.Gender gender = 8
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->gender = $tmp;

            break;
          case 9: // optional int32 eyes = 9
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->eyes = $tmp;

            break;
          case 10: // optional int32 backpack = 10
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->backpack = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->skin !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->skin);
      }
      if ($this->hair !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->hair);
      }
      if ($this->shirt !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->shirt);
      }
      if ($this->pants !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->pants);
      }
      if ($this->hat !== 0) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->hat);
      }
      if ($this->shoes !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->shoes);
      }
      if ($this->gender !== Gender::MALE) {
        fwrite($fp, "@", 1);
        Protobuf::write_varint($fp, $this->gender);
      }
      if ($this->eyes !== 0) {
        fwrite($fp, "H", 1);
        Protobuf::write_varint($fp, $this->eyes);
      }
      if ($this->backpack !== 0) {
        fwrite($fp, "P", 1);
        Protobuf::write_varint($fp, $this->backpack);
      }
    }

    public function size() {
      $size = 0;
      if ($this->skin !== 0) {
        $size += 1 + Protobuf::size_varint($this->skin);
      }
      if ($this->hair !== 0) {
        $size += 1 + Protobuf::size_varint($this->hair);
      }
      if ($this->shirt !== 0) {
        $size += 1 + Protobuf::size_varint($this->shirt);
      }
      if ($this->pants !== 0) {
        $size += 1 + Protobuf::size_varint($this->pants);
      }
      if ($this->hat !== 0) {
        $size += 1 + Protobuf::size_varint($this->hat);
      }
      if ($this->shoes !== 0) {
        $size += 1 + Protobuf::size_varint($this->shoes);
      }
      if ($this->gender !== Gender::MALE) {
        $size += 1 + Protobuf::size_varint($this->gender);
      }
      if ($this->eyes !== 0) {
        $size += 1 + Protobuf::size_varint($this->eyes);
      }
      if ($this->backpack !== 0) {
        $size += 1 + Protobuf::size_varint($this->backpack);
      }
      return $size;
    }

    public function clearSkin() { $this->skin = 0; }
    public function getSkin() { return $this->skin;}
    public function setSkin($value) { $this->skin = $value; }

    public function clearHair() { $this->hair = 0; }
    public function getHair() { return $this->hair;}
    public function setHair($value) { $this->hair = $value; }

    public function clearShirt() { $this->shirt = 0; }
    public function getShirt() { return $this->shirt;}
    public function setShirt($value) { $this->shirt = $value; }

    public function clearPants() { $this->pants = 0; }
    public function getPants() { return $this->pants;}
    public function setPants($value) { $this->pants = $value; }

    public function clearHat() { $this->hat = 0; }
    public function getHat() { return $this->hat;}
    public function setHat($value) { $this->hat = $value; }

    public function clearShoes() { $this->shoes = 0; }
    public function getShoes() { return $this->shoes;}
    public function setShoes($value) { $this->shoes = $value; }

    public function clearGender() { $this->gender = Gender::MALE; }
    public function getGender() { return $this->gender;}
    public function setGender($value) { $this->gender = $value; }

    public function clearEyes() { $this->eyes = 0; }
    public function getEyes() { return $this->eyes;}
    public function setEyes($value) { $this->eyes = $value; }

    public function clearBackpack() { $this->backpack = 0; }
    public function getBackpack() { return $this->backpack;}
    public function setBackpack($value) { $this->backpack = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('skin', $this->skin, 0)
           . Protobuf::toString('hair', $this->hair, 0)
           . Protobuf::toString('shirt', $this->shirt, 0)
           . Protobuf::toString('pants', $this->pants, 0)
           . Protobuf::toString('hat', $this->hat, 0)
           . Protobuf::toString('shoes', $this->shoes, 0)
           . Protobuf::toString('gender', $this->gender, Gender::MALE)
           . Protobuf::toString('eyes', $this->eyes, 0)
           . Protobuf::toString('backpack', $this->backpack, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Player.PlayerAvatar)
  }

}