<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Data.Player.proto
 */


namespace POGOProtos\Data\Player;

/**
 * Protobuf message : POGOProtos.Data.Player.PlayerStats
 */
class PlayerStats extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * level optional int32 = 1
     *
     * @var int
     */
    protected $level = null;

    /**
     * experience optional int64 = 2
     *
     * @var int
     */
    protected $experience = null;

    /**
     * prev_level_xp optional int64 = 3
     *
     * @var int
     */
    protected $prev_level_xp = null;

    /**
     * next_level_xp optional int64 = 4
     *
     * @var int
     */
    protected $next_level_xp = null;

    /**
     * km_walked optional float = 5
     *
     * @var float
     */
    protected $km_walked = null;

    /**
     * pokemons_encountered optional int32 = 6
     *
     * @var int
     */
    protected $pokemons_encountered = null;

    /**
     * unique_pokedex_entries optional int32 = 7
     *
     * @var int
     */
    protected $unique_pokedex_entries = null;

    /**
     * pokemons_captured optional int32 = 8
     *
     * @var int
     */
    protected $pokemons_captured = null;

    /**
     * evolutions optional int32 = 9
     *
     * @var int
     */
    protected $evolutions = null;

    /**
     * poke_stop_visits optional int32 = 10
     *
     * @var int
     */
    protected $poke_stop_visits = null;

    /**
     * pokeballs_thrown optional int32 = 11
     *
     * @var int
     */
    protected $pokeballs_thrown = null;

    /**
     * eggs_hatched optional int32 = 12
     *
     * @var int
     */
    protected $eggs_hatched = null;

    /**
     * big_magikarp_caught optional int32 = 13
     *
     * @var int
     */
    protected $big_magikarp_caught = null;

    /**
     * battle_attack_won optional int32 = 14
     *
     * @var int
     */
    protected $battle_attack_won = null;

    /**
     * battle_attack_total optional int32 = 15
     *
     * @var int
     */
    protected $battle_attack_total = null;

    /**
     * battle_defended_won optional int32 = 16
     *
     * @var int
     */
    protected $battle_defended_won = null;

    /**
     * battle_training_won optional int32 = 17
     *
     * @var int
     */
    protected $battle_training_won = null;

    /**
     * battle_training_total optional int32 = 18
     *
     * @var int
     */
    protected $battle_training_total = null;

    /**
     * prestige_raised_total optional int32 = 19
     *
     * @var int
     */
    protected $prestige_raised_total = null;

    /**
     * prestige_dropped_total optional int32 = 20
     *
     * @var int
     */
    protected $prestige_dropped_total = null;

    /**
     * pokemon_deployed optional int32 = 21
     *
     * @var int
     */
    protected $pokemon_deployed = null;

    /**
     * pokemon_caught_by_type optional bytes = 22
     *
     * @var \Protobuf\Stream
     */
    protected $pokemon_caught_by_type = null;

    /**
     * small_rattata_caught optional int32 = 23
     *
     * @var int
     */
    protected $small_rattata_caught = null;

    /**
     * Check if 'level' has a value
     *
     * @return bool
     */
    public function hasLevel()
    {
        return $this->level !== null;
    }

    /**
     * Get 'level' value
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->level;
    }

    /**
     * Set 'level' value
     *
     * @param int $value
     */
    public function setLevel($value = null)
    {
        $this->level = $value;
    }

    /**
     * Check if 'experience' has a value
     *
     * @return bool
     */
    public function hasExperience()
    {
        return $this->experience !== null;
    }

    /**
     * Get 'experience' value
     *
     * @return int
     */
    public function getExperience()
    {
        return $this->experience;
    }

    /**
     * Set 'experience' value
     *
     * @param int $value
     */
    public function setExperience($value = null)
    {
        $this->experience = $value;
    }

    /**
     * Check if 'prev_level_xp' has a value
     *
     * @return bool
     */
    public function hasPrevLevelXp()
    {
        return $this->prev_level_xp !== null;
    }

    /**
     * Get 'prev_level_xp' value
     *
     * @return int
     */
    public function getPrevLevelXp()
    {
        return $this->prev_level_xp;
    }

    /**
     * Set 'prev_level_xp' value
     *
     * @param int $value
     */
    public function setPrevLevelXp($value = null)
    {
        $this->prev_level_xp = $value;
    }

    /**
     * Check if 'next_level_xp' has a value
     *
     * @return bool
     */
    public function hasNextLevelXp()
    {
        return $this->next_level_xp !== null;
    }

    /**
     * Get 'next_level_xp' value
     *
     * @return int
     */
    public function getNextLevelXp()
    {
        return $this->next_level_xp;
    }

    /**
     * Set 'next_level_xp' value
     *
     * @param int $value
     */
    public function setNextLevelXp($value = null)
    {
        $this->next_level_xp = $value;
    }

    /**
     * Check if 'km_walked' has a value
     *
     * @return bool
     */
    public function hasKmWalked()
    {
        return $this->km_walked !== null;
    }

    /**
     * Get 'km_walked' value
     *
     * @return float
     */
    public function getKmWalked()
    {
        return $this->km_walked;
    }

    /**
     * Set 'km_walked' value
     *
     * @param float $value
     */
    public function setKmWalked($value = null)
    {
        $this->km_walked = $value;
    }

    /**
     * Check if 'pokemons_encountered' has a value
     *
     * @return bool
     */
    public function hasPokemonsEncountered()
    {
        return $this->pokemons_encountered !== null;
    }

    /**
     * Get 'pokemons_encountered' value
     *
     * @return int
     */
    public function getPokemonsEncountered()
    {
        return $this->pokemons_encountered;
    }

    /**
     * Set 'pokemons_encountered' value
     *
     * @param int $value
     */
    public function setPokemonsEncountered($value = null)
    {
        $this->pokemons_encountered = $value;
    }

    /**
     * Check if 'unique_pokedex_entries' has a value
     *
     * @return bool
     */
    public function hasUniquePokedexEntries()
    {
        return $this->unique_pokedex_entries !== null;
    }

    /**
     * Get 'unique_pokedex_entries' value
     *
     * @return int
     */
    public function getUniquePokedexEntries()
    {
        return $this->unique_pokedex_entries;
    }

    /**
     * Set 'unique_pokedex_entries' value
     *
     * @param int $value
     */
    public function setUniquePokedexEntries($value = null)
    {
        $this->unique_pokedex_entries = $value;
    }

    /**
     * Check if 'pokemons_captured' has a value
     *
     * @return bool
     */
    public function hasPokemonsCaptured()
    {
        return $this->pokemons_captured !== null;
    }

    /**
     * Get 'pokemons_captured' value
     *
     * @return int
     */
    public function getPokemonsCaptured()
    {
        return $this->pokemons_captured;
    }

    /**
     * Set 'pokemons_captured' value
     *
     * @param int $value
     */
    public function setPokemonsCaptured($value = null)
    {
        $this->pokemons_captured = $value;
    }

    /**
     * Check if 'evolutions' has a value
     *
     * @return bool
     */
    public function hasEvolutions()
    {
        return $this->evolutions !== null;
    }

    /**
     * Get 'evolutions' value
     *
     * @return int
     */
    public function getEvolutions()
    {
        return $this->evolutions;
    }

    /**
     * Set 'evolutions' value
     *
     * @param int $value
     */
    public function setEvolutions($value = null)
    {
        $this->evolutions = $value;
    }

    /**
     * Check if 'poke_stop_visits' has a value
     *
     * @return bool
     */
    public function hasPokeStopVisits()
    {
        return $this->poke_stop_visits !== null;
    }

    /**
     * Get 'poke_stop_visits' value
     *
     * @return int
     */
    public function getPokeStopVisits()
    {
        return $this->poke_stop_visits;
    }

    /**
     * Set 'poke_stop_visits' value
     *
     * @param int $value
     */
    public function setPokeStopVisits($value = null)
    {
        $this->poke_stop_visits = $value;
    }

    /**
     * Check if 'pokeballs_thrown' has a value
     *
     * @return bool
     */
    public function hasPokeballsThrown()
    {
        return $this->pokeballs_thrown !== null;
    }

    /**
     * Get 'pokeballs_thrown' value
     *
     * @return int
     */
    public function getPokeballsThrown()
    {
        return $this->pokeballs_thrown;
    }

    /**
     * Set 'pokeballs_thrown' value
     *
     * @param int $value
     */
    public function setPokeballsThrown($value = null)
    {
        $this->pokeballs_thrown = $value;
    }

    /**
     * Check if 'eggs_hatched' has a value
     *
     * @return bool
     */
    public function hasEggsHatched()
    {
        return $this->eggs_hatched !== null;
    }

    /**
     * Get 'eggs_hatched' value
     *
     * @return int
     */
    public function getEggsHatched()
    {
        return $this->eggs_hatched;
    }

    /**
     * Set 'eggs_hatched' value
     *
     * @param int $value
     */
    public function setEggsHatched($value = null)
    {
        $this->eggs_hatched = $value;
    }

    /**
     * Check if 'big_magikarp_caught' has a value
     *
     * @return bool
     */
    public function hasBigMagikarpCaught()
    {
        return $this->big_magikarp_caught !== null;
    }

    /**
     * Get 'big_magikarp_caught' value
     *
     * @return int
     */
    public function getBigMagikarpCaught()
    {
        return $this->big_magikarp_caught;
    }

    /**
     * Set 'big_magikarp_caught' value
     *
     * @param int $value
     */
    public function setBigMagikarpCaught($value = null)
    {
        $this->big_magikarp_caught = $value;
    }

    /**
     * Check if 'battle_attack_won' has a value
     *
     * @return bool
     */
    public function hasBattleAttackWon()
    {
        return $this->battle_attack_won !== null;
    }

    /**
     * Get 'battle_attack_won' value
     *
     * @return int
     */
    public function getBattleAttackWon()
    {
        return $this->battle_attack_won;
    }

    /**
     * Set 'battle_attack_won' value
     *
     * @param int $value
     */
    public function setBattleAttackWon($value = null)
    {
        $this->battle_attack_won = $value;
    }

    /**
     * Check if 'battle_attack_total' has a value
     *
     * @return bool
     */
    public function hasBattleAttackTotal()
    {
        return $this->battle_attack_total !== null;
    }

    /**
     * Get 'battle_attack_total' value
     *
     * @return int
     */
    public function getBattleAttackTotal()
    {
        return $this->battle_attack_total;
    }

    /**
     * Set 'battle_attack_total' value
     *
     * @param int $value
     */
    public function setBattleAttackTotal($value = null)
    {
        $this->battle_attack_total = $value;
    }

    /**
     * Check if 'battle_defended_won' has a value
     *
     * @return bool
     */
    public function hasBattleDefendedWon()
    {
        return $this->battle_defended_won !== null;
    }

    /**
     * Get 'battle_defended_won' value
     *
     * @return int
     */
    public function getBattleDefendedWon()
    {
        return $this->battle_defended_won;
    }

    /**
     * Set 'battle_defended_won' value
     *
     * @param int $value
     */
    public function setBattleDefendedWon($value = null)
    {
        $this->battle_defended_won = $value;
    }

    /**
     * Check if 'battle_training_won' has a value
     *
     * @return bool
     */
    public function hasBattleTrainingWon()
    {
        return $this->battle_training_won !== null;
    }

    /**
     * Get 'battle_training_won' value
     *
     * @return int
     */
    public function getBattleTrainingWon()
    {
        return $this->battle_training_won;
    }

    /**
     * Set 'battle_training_won' value
     *
     * @param int $value
     */
    public function setBattleTrainingWon($value = null)
    {
        $this->battle_training_won = $value;
    }

    /**
     * Check if 'battle_training_total' has a value
     *
     * @return bool
     */
    public function hasBattleTrainingTotal()
    {
        return $this->battle_training_total !== null;
    }

    /**
     * Get 'battle_training_total' value
     *
     * @return int
     */
    public function getBattleTrainingTotal()
    {
        return $this->battle_training_total;
    }

    /**
     * Set 'battle_training_total' value
     *
     * @param int $value
     */
    public function setBattleTrainingTotal($value = null)
    {
        $this->battle_training_total = $value;
    }

    /**
     * Check if 'prestige_raised_total' has a value
     *
     * @return bool
     */
    public function hasPrestigeRaisedTotal()
    {
        return $this->prestige_raised_total !== null;
    }

    /**
     * Get 'prestige_raised_total' value
     *
     * @return int
     */
    public function getPrestigeRaisedTotal()
    {
        return $this->prestige_raised_total;
    }

    /**
     * Set 'prestige_raised_total' value
     *
     * @param int $value
     */
    public function setPrestigeRaisedTotal($value = null)
    {
        $this->prestige_raised_total = $value;
    }

    /**
     * Check if 'prestige_dropped_total' has a value
     *
     * @return bool
     */
    public function hasPrestigeDroppedTotal()
    {
        return $this->prestige_dropped_total !== null;
    }

    /**
     * Get 'prestige_dropped_total' value
     *
     * @return int
     */
    public function getPrestigeDroppedTotal()
    {
        return $this->prestige_dropped_total;
    }

    /**
     * Set 'prestige_dropped_total' value
     *
     * @param int $value
     */
    public function setPrestigeDroppedTotal($value = null)
    {
        $this->prestige_dropped_total = $value;
    }

    /**
     * Check if 'pokemon_deployed' has a value
     *
     * @return bool
     */
    public function hasPokemonDeployed()
    {
        return $this->pokemon_deployed !== null;
    }

    /**
     * Get 'pokemon_deployed' value
     *
     * @return int
     */
    public function getPokemonDeployed()
    {
        return $this->pokemon_deployed;
    }

    /**
     * Set 'pokemon_deployed' value
     *
     * @param int $value
     */
    public function setPokemonDeployed($value = null)
    {
        $this->pokemon_deployed = $value;
    }

    /**
     * Check if 'pokemon_caught_by_type' has a value
     *
     * @return bool
     */
    public function hasPokemonCaughtByType()
    {
        return $this->pokemon_caught_by_type !== null;
    }

    /**
     * Get 'pokemon_caught_by_type' value
     *
     * @return \Protobuf\Stream
     */
    public function getPokemonCaughtByType()
    {
        return $this->pokemon_caught_by_type;
    }

    /**
     * Set 'pokemon_caught_by_type' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPokemonCaughtByType($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->pokemon_caught_by_type = $value;
    }

    /**
     * Check if 'small_rattata_caught' has a value
     *
     * @return bool
     */
    public function hasSmallRattataCaught()
    {
        return $this->small_rattata_caught !== null;
    }

    /**
     * Get 'small_rattata_caught' value
     *
     * @return int
     */
    public function getSmallRattataCaught()
    {
        return $this->small_rattata_caught;
    }

    /**
     * Set 'small_rattata_caught' value
     *
     * @param int $value
     */
    public function setSmallRattataCaught($value = null)
    {
        $this->small_rattata_caught = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'level' => null,
            'experience' => null,
            'prev_level_xp' => null,
            'next_level_xp' => null,
            'km_walked' => null,
            'pokemons_encountered' => null,
            'unique_pokedex_entries' => null,
            'pokemons_captured' => null,
            'evolutions' => null,
            'poke_stop_visits' => null,
            'pokeballs_thrown' => null,
            'eggs_hatched' => null,
            'big_magikarp_caught' => null,
            'battle_attack_won' => null,
            'battle_attack_total' => null,
            'battle_defended_won' => null,
            'battle_training_won' => null,
            'battle_training_total' => null,
            'prestige_raised_total' => null,
            'prestige_dropped_total' => null,
            'pokemon_deployed' => null,
            'pokemon_caught_by_type' => null,
            'small_rattata_caught' => null
        ], $values);

        $message->setLevel($values['level']);
        $message->setExperience($values['experience']);
        $message->setPrevLevelXp($values['prev_level_xp']);
        $message->setNextLevelXp($values['next_level_xp']);
        $message->setKmWalked($values['km_walked']);
        $message->setPokemonsEncountered($values['pokemons_encountered']);
        $message->setUniquePokedexEntries($values['unique_pokedex_entries']);
        $message->setPokemonsCaptured($values['pokemons_captured']);
        $message->setEvolutions($values['evolutions']);
        $message->setPokeStopVisits($values['poke_stop_visits']);
        $message->setPokeballsThrown($values['pokeballs_thrown']);
        $message->setEggsHatched($values['eggs_hatched']);
        $message->setBigMagikarpCaught($values['big_magikarp_caught']);
        $message->setBattleAttackWon($values['battle_attack_won']);
        $message->setBattleAttackTotal($values['battle_attack_total']);
        $message->setBattleDefendedWon($values['battle_defended_won']);
        $message->setBattleTrainingWon($values['battle_training_won']);
        $message->setBattleTrainingTotal($values['battle_training_total']);
        $message->setPrestigeRaisedTotal($values['prestige_raised_total']);
        $message->setPrestigeDroppedTotal($values['prestige_dropped_total']);
        $message->setPokemonDeployed($values['pokemon_deployed']);
        $message->setPokemonCaughtByType($values['pokemon_caught_by_type']);
        $message->setSmallRattataCaught($values['small_rattata_caught']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'PlayerStats',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'experience',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'prev_level_xp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'next_level_xp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'km_walked',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'pokemons_encountered',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'unique_pokedex_entries',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'pokemons_captured',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'evolutions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'poke_stop_visits',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'pokeballs_thrown',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'eggs_hatched',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'big_magikarp_caught',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'battle_attack_won',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'battle_attack_total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'battle_defended_won',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'battle_training_won',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'battle_training_total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'prestige_raised_total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'prestige_dropped_total',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'pokemon_deployed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'pokemon_caught_by_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'small_rattata_caught',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->level !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->level);
        }

        if ($this->experience !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->experience);
        }

        if ($this->prev_level_xp !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->prev_level_xp);
        }

        if ($this->next_level_xp !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->next_level_xp);
        }

        if ($this->km_walked !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->km_walked);
        }

        if ($this->pokemons_encountered !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->pokemons_encountered);
        }

        if ($this->unique_pokedex_entries !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->unique_pokedex_entries);
        }

        if ($this->pokemons_captured !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->pokemons_captured);
        }

        if ($this->evolutions !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->evolutions);
        }

        if ($this->poke_stop_visits !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->poke_stop_visits);
        }

        if ($this->pokeballs_thrown !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->pokeballs_thrown);
        }

        if ($this->eggs_hatched !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->eggs_hatched);
        }

        if ($this->big_magikarp_caught !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->big_magikarp_caught);
        }

        if ($this->battle_attack_won !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->battle_attack_won);
        }

        if ($this->battle_attack_total !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->battle_attack_total);
        }

        if ($this->battle_defended_won !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->battle_defended_won);
        }

        if ($this->battle_training_won !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->battle_training_won);
        }

        if ($this->battle_training_total !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->battle_training_total);
        }

        if ($this->prestige_raised_total !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->prestige_raised_total);
        }

        if ($this->prestige_dropped_total !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->prestige_dropped_total);
        }

        if ($this->pokemon_deployed !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->pokemon_deployed);
        }

        if ($this->pokemon_caught_by_type !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeByteStream($stream, $this->pokemon_caught_by_type);
        }

        if ($this->small_rattata_caught !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeVarint($stream, $this->small_rattata_caught);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->experience = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->prev_level_xp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->next_level_xp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->km_walked = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokemons_encountered = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->unique_pokedex_entries = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokemons_captured = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->evolutions = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->poke_stop_visits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokeballs_thrown = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->eggs_hatched = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->big_magikarp_caught = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battle_attack_won = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battle_attack_total = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battle_defended_won = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battle_training_won = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battle_training_total = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->prestige_raised_total = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->prestige_dropped_total = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokemon_deployed = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->pokemon_caught_by_type = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->small_rattata_caught = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->level);
        }

        if ($this->experience !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->experience);
        }

        if ($this->prev_level_xp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->prev_level_xp);
        }

        if ($this->next_level_xp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->next_level_xp);
        }

        if ($this->km_walked !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->pokemons_encountered !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemons_encountered);
        }

        if ($this->unique_pokedex_entries !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unique_pokedex_entries);
        }

        if ($this->pokemons_captured !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemons_captured);
        }

        if ($this->evolutions !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->evolutions);
        }

        if ($this->poke_stop_visits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->poke_stop_visits);
        }

        if ($this->pokeballs_thrown !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokeballs_thrown);
        }

        if ($this->eggs_hatched !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->eggs_hatched);
        }

        if ($this->big_magikarp_caught !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->big_magikarp_caught);
        }

        if ($this->battle_attack_won !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battle_attack_won);
        }

        if ($this->battle_attack_total !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battle_attack_total);
        }

        if ($this->battle_defended_won !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->battle_defended_won);
        }

        if ($this->battle_training_won !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->battle_training_won);
        }

        if ($this->battle_training_total !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->battle_training_total);
        }

        if ($this->prestige_raised_total !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->prestige_raised_total);
        }

        if ($this->prestige_dropped_total !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->prestige_dropped_total);
        }

        if ($this->pokemon_deployed !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->pokemon_deployed);
        }

        if ($this->pokemon_caught_by_type !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->pokemon_caught_by_type);
        }

        if ($this->small_rattata_caught !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->small_rattata_caught);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->level = null;
        $this->experience = null;
        $this->prev_level_xp = null;
        $this->next_level_xp = null;
        $this->km_walked = null;
        $this->pokemons_encountered = null;
        $this->unique_pokedex_entries = null;
        $this->pokemons_captured = null;
        $this->evolutions = null;
        $this->poke_stop_visits = null;
        $this->pokeballs_thrown = null;
        $this->eggs_hatched = null;
        $this->big_magikarp_caught = null;
        $this->battle_attack_won = null;
        $this->battle_attack_total = null;
        $this->battle_defended_won = null;
        $this->battle_training_won = null;
        $this->battle_training_total = null;
        $this->prestige_raised_total = null;
        $this->prestige_dropped_total = null;
        $this->pokemon_deployed = null;
        $this->pokemon_caught_by_type = null;
        $this->small_rattata_caught = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Data\Player\PlayerStats) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->level = ($message->level !== null) ? $message->level : $this->level;
        $this->experience = ($message->experience !== null) ? $message->experience : $this->experience;
        $this->prev_level_xp = ($message->prev_level_xp !== null) ? $message->prev_level_xp : $this->prev_level_xp;
        $this->next_level_xp = ($message->next_level_xp !== null) ? $message->next_level_xp : $this->next_level_xp;
        $this->km_walked = ($message->km_walked !== null) ? $message->km_walked : $this->km_walked;
        $this->pokemons_encountered = ($message->pokemons_encountered !== null) ? $message->pokemons_encountered : $this->pokemons_encountered;
        $this->unique_pokedex_entries = ($message->unique_pokedex_entries !== null) ? $message->unique_pokedex_entries : $this->unique_pokedex_entries;
        $this->pokemons_captured = ($message->pokemons_captured !== null) ? $message->pokemons_captured : $this->pokemons_captured;
        $this->evolutions = ($message->evolutions !== null) ? $message->evolutions : $this->evolutions;
        $this->poke_stop_visits = ($message->poke_stop_visits !== null) ? $message->poke_stop_visits : $this->poke_stop_visits;
        $this->pokeballs_thrown = ($message->pokeballs_thrown !== null) ? $message->pokeballs_thrown : $this->pokeballs_thrown;
        $this->eggs_hatched = ($message->eggs_hatched !== null) ? $message->eggs_hatched : $this->eggs_hatched;
        $this->big_magikarp_caught = ($message->big_magikarp_caught !== null) ? $message->big_magikarp_caught : $this->big_magikarp_caught;
        $this->battle_attack_won = ($message->battle_attack_won !== null) ? $message->battle_attack_won : $this->battle_attack_won;
        $this->battle_attack_total = ($message->battle_attack_total !== null) ? $message->battle_attack_total : $this->battle_attack_total;
        $this->battle_defended_won = ($message->battle_defended_won !== null) ? $message->battle_defended_won : $this->battle_defended_won;
        $this->battle_training_won = ($message->battle_training_won !== null) ? $message->battle_training_won : $this->battle_training_won;
        $this->battle_training_total = ($message->battle_training_total !== null) ? $message->battle_training_total : $this->battle_training_total;
        $this->prestige_raised_total = ($message->prestige_raised_total !== null) ? $message->prestige_raised_total : $this->prestige_raised_total;
        $this->prestige_dropped_total = ($message->prestige_dropped_total !== null) ? $message->prestige_dropped_total : $this->prestige_dropped_total;
        $this->pokemon_deployed = ($message->pokemon_deployed !== null) ? $message->pokemon_deployed : $this->pokemon_deployed;
        $this->pokemon_caught_by_type = ($message->pokemon_caught_by_type !== null) ? $message->pokemon_caught_by_type : $this->pokemon_caught_by_type;
        $this->small_rattata_caught = ($message->small_rattata_caught !== null) ? $message->small_rattata_caught : $this->small_rattata_caught;
    }


}

