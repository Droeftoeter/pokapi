<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Logs/FortSearchLogEntry.php');

namespace POGOProtos\Data\Logs {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // enum POGOProtos.Data.Logs.FortSearchLogEntry.Result
  abstract class FortSearchLogEntry_Result extends ProtobufEnum {
    const UNSET = 0;
    const SUCCESS = 1;

    public static $_values = array(
      0 => "UNSET",
      1 => "SUCCESS",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Data.Logs.FortSearchLogEntry
  final class FortSearchLogEntry extends ProtobufMessage {

    private $_unknown;
    private $result = FortSearchLogEntry_Result::UNSET; // optional .POGOProtos.Data.Logs.FortSearchLogEntry.Result result = 1
    private $fortId = ""; // optional string fort_id = 2
    private $items = array(); // repeated .POGOProtos.Inventory.Item.ItemData items = 3
    private $eggs = 0; // optional int32 eggs = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Data.Logs.FortSearchLogEntry.Result result = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->result = $tmp;

            break;
          case 2: // optional string fort_id = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->fortId = $tmp;

            break;
          case 3: // repeated .POGOProtos.Inventory.Item.ItemData items = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->items[] = new \POGOProtos\Inventory\Item\ItemData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\Item\ItemData did not read the full length');

            break;
          case 4: // optional int32 eggs = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->eggs = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->result !== FortSearchLogEntry_Result::UNSET) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->result);
      }
      if ($this->fortId !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->fortId));
        fwrite($fp, $this->fortId);
      }
      foreach($this->items as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->eggs !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->eggs);
      }
    }

    public function size() {
      $size = 0;
      if ($this->result !== FortSearchLogEntry_Result::UNSET) {
        $size += 1 + Protobuf::size_varint($this->result);
      }
      if ($this->fortId !== "") {
        $l = strlen($this->fortId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->items as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->eggs !== 0) {
        $size += 1 + Protobuf::size_varint($this->eggs);
      }
      return $size;
    }

    public function clearResult() { $this->result = FortSearchLogEntry_Result::UNSET; }
    public function getResult() { return $this->result;}
    public function setResult($value) { $this->result = $value; }

    public function clearFortId() { $this->fortId = ""; }
    public function getFortId() { return $this->fortId;}
    public function setFortId($value) { $this->fortId = $value; }

    public function clearItems() { $this->items = array(); }
    public function getItemsCount() { return count($this->items); }
    public function getItems($index) { return $this->items[$index]; }
    public function getItemsArray() { return $this->items; }
    public function setItems($index, array $value) {$this->items[$index] = $value; }
    public function addItems(array $value) { $this->items[] = $value; }
    public function addAllItems(array $values) { foreach($values as $value) {$this->items[] = $value; }}

    public function clearEggs() { $this->eggs = 0; }
    public function getEggs() { return $this->eggs;}
    public function setEggs($value) { $this->eggs = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('result', $this->result, FortSearchLogEntry_Result::UNSET)
           . Protobuf::toString('fort_id', $this->fortId, "")
           . Protobuf::toString('items', $this->items, null)
           . Protobuf::toString('eggs', $this->eggs, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Logs.FortSearchLogEntry)
  }

}