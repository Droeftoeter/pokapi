<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Logs/ActionLogEntry.php');

namespace POGOProtos\Data\Logs {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.Logs.ActionLogEntry
  final class ActionLogEntry extends ProtobufMessage {
    const NONE = 0;
    const CATCH_POKEMON = 3;
    const FORT_SEARCH = 4;

    private $_unknown;
    private $action = null; //  oneof Action
    private $_actioncase = self::NONE;
    private $timestampMs = 0; // optional int64 timestamp_ms = 1
    private $sfida = false; // optional bool sfida = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int64 timestamp_ms = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->timestampMs = $tmp;

            break;
          case 2: // optional bool sfida = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->sfida = ($tmp > 0) ? true : false;

            break;
          case 3: // optional .POGOProtos.Data.Logs.CatchPokemonLogEntry catch_pokemon = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->action = new \POGOProtos\Data\Logs\CatchPokemonLogEntry($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Logs\CatchPokemonLogEntry did not read the full length');
            $this->_actioncase = self::CATCH_POKEMON;

            break;
          case 4: // optional .POGOProtos.Data.Logs.FortSearchLogEntry fort_search = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->action = new \POGOProtos\Data\Logs\FortSearchLogEntry($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Logs\FortSearchLogEntry did not read the full length');
            $this->_actioncase = self::FORT_SEARCH;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->timestampMs !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->timestampMs);
      }
      if ($this->sfida !== false) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->sfida ? 1 : 0);
      }
      if ($this->_actioncase === self::CATCH_POKEMON) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->action->size());
        $this->action->write($fp);
      }
      if ($this->_actioncase === self::FORT_SEARCH) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->action->size());
        $this->action->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->timestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->timestampMs);
      }
      if ($this->sfida !== false) {
        $size += 2;
      }
      if ($this->_actioncase === self::CATCH_POKEMON) {
        $l = $this->action->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->_actioncase === self::FORT_SEARCH) {
        $l = $this->action->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearAction() { $this->_actioncase = self::NONE; $this->action = null; }
    public function hasAction() { return $this->_actioncase !== self::NONE; }
    public function getAction() { if($this->_actioncase !== self::NONE) return $this->action; else return null; }
    public function getActionCase() { return $this->_actioncase; }

    public function clearTimestampMs() { $this->timestampMs = 0; }
    public function getTimestampMs() { return $this->timestampMs;}
    public function setTimestampMs($value) { $this->timestampMs = $value; }

    public function clearSfida() { $this->sfida = false; }
    public function getSfida() { return $this->sfida;}
    public function setSfida($value) { $this->sfida = $value; }

    public function clearCatchPokemon() { if ($this->_actioncase === self::CATCH_POKEMON) clearAction(); }
    public function hasCatchPokemon() { return $this->_actioncase === self::CATCH_POKEMON; }
    public function getCatchPokemon() { if($this->_actioncase === self::CATCH_POKEMON) return $this->action; else return null;}
    public function setCatchPokemon(\POGOProtos\Data\Logs\CatchPokemonLogEntry $value) { $this->_actioncase = self::CATCH_POKEMON; $this->action = $value; }

    public function clearFortSearch() { if ($this->_actioncase === self::FORT_SEARCH) clearAction(); }
    public function hasFortSearch() { return $this->_actioncase === self::FORT_SEARCH; }
    public function getFortSearch() { if($this->_actioncase === self::FORT_SEARCH) return $this->action; else return null;}
    public function setFortSearch(\POGOProtos\Data\Logs\FortSearchLogEntry $value) { $this->_actioncase = self::FORT_SEARCH; $this->action = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('Action_case', $this->_actioncase, self::NONE)
           . Protobuf::toString('Action', $this->action, null)
           . Protobuf::toString('timestamp_ms', $this->timestampMs, 0)
           . Protobuf::toString('sfida', $this->sfida, false);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Logs.ActionLogEntry)
  }

}