<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/PlayerBadge.php');

namespace POGOProtos\Data {

  use POGOProtos\Enums\BadgeType;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.PlayerBadge
  final class PlayerBadge extends ProtobufMessage {

    private $_unknown;
    private $badgeType = BadgeType::BADGE_UNSET; // optional .POGOProtos.Enums.BadgeType badge_type = 1
    private $rank = 0; // optional int32 rank = 2
    private $startValue = 0; // optional int32 start_value = 3
    private $endValue = 0; // optional int32 end_value = 4
    private $currentValue = 0; // optional double current_value = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Enums.BadgeType badge_type = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->badgeType = $tmp;

            break;
          case 2: // optional int32 rank = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->rank = $tmp;

            break;
          case 3: // optional int32 start_value = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->startValue = $tmp;

            break;
          case 4: // optional int32 end_value = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->endValue = $tmp;

            break;
          case 5: // optional double current_value = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->currentValue = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->badgeType !== BadgeType::BADGE_UNSET) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->badgeType);
      }
      if ($this->rank !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->rank);
      }
      if ($this->startValue !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->startValue);
      }
      if ($this->endValue !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->endValue);
      }
      if ($this->currentValue !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->currentValue);
      }
    }

    public function size() {
      $size = 0;
      if ($this->badgeType !== BadgeType::BADGE_UNSET) {
        $size += 1 + Protobuf::size_varint($this->badgeType);
      }
      if ($this->rank !== 0) {
        $size += 1 + Protobuf::size_varint($this->rank);
      }
      if ($this->startValue !== 0) {
        $size += 1 + Protobuf::size_varint($this->startValue);
      }
      if ($this->endValue !== 0) {
        $size += 1 + Protobuf::size_varint($this->endValue);
      }
      if ($this->currentValue !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearBadgeType() { $this->badgeType = BadgeType::BADGE_UNSET; }
    public function getBadgeType() { return $this->badgeType;}
    public function setBadgeType($value) { $this->badgeType = $value; }

    public function clearRank() { $this->rank = 0; }
    public function getRank() { return $this->rank;}
    public function setRank($value) { $this->rank = $value; }

    public function clearStartValue() { $this->startValue = 0; }
    public function getStartValue() { return $this->startValue;}
    public function setStartValue($value) { $this->startValue = $value; }

    public function clearEndValue() { $this->endValue = 0; }
    public function getEndValue() { return $this->endValue;}
    public function setEndValue($value) { $this->endValue = $value; }

    public function clearCurrentValue() { $this->currentValue = 0; }
    public function getCurrentValue() { return $this->currentValue;}
    public function setCurrentValue($value) { $this->currentValue = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('badge_type', $this->badgeType, BadgeType::BADGE_UNSET)
           . Protobuf::toString('rank', $this->rank, 0)
           . Protobuf::toString('start_value', $this->startValue, 0)
           . Protobuf::toString('end_value', $this->endValue, 0)
           . Protobuf::toString('current_value', $this->currentValue, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.PlayerBadge)
  }

}