<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/PokedexEntry.php');

namespace POGOProtos\Data {

  use POGOProtos\Enums\PokemonId;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.PokedexEntry
  final class PokedexEntry extends ProtobufMessage {

    private $_unknown;
    private $pokemonId = PokemonId::MISSINGNO; // optional .POGOProtos.Enums.PokemonId pokemon_id = 1
    private $timesEncountered = 0; // optional int32 times_encountered = 2
    private $timesCaptured = 0; // optional int32 times_captured = 3
    private $evolutionStonePieces = 0; // optional int32 evolution_stone_pieces = 4
    private $evolutionStones = 0; // optional int32 evolution_stones = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Enums.PokemonId pokemon_id = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->pokemonId = $tmp;

            break;
          case 2: // optional int32 times_encountered = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->timesEncountered = $tmp;

            break;
          case 3: // optional int32 times_captured = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->timesCaptured = $tmp;

            break;
          case 4: // optional int32 evolution_stone_pieces = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->evolutionStonePieces = $tmp;

            break;
          case 5: // optional int32 evolution_stones = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->evolutionStones = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->pokemonId !== PokemonId::MISSINGNO) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->pokemonId);
      }
      if ($this->timesEncountered !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->timesEncountered);
      }
      if ($this->timesCaptured !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->timesCaptured);
      }
      if ($this->evolutionStonePieces !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->evolutionStonePieces);
      }
      if ($this->evolutionStones !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->evolutionStones);
      }
    }

    public function size() {
      $size = 0;
      if ($this->pokemonId !== PokemonId::MISSINGNO) {
        $size += 1 + Protobuf::size_varint($this->pokemonId);
      }
      if ($this->timesEncountered !== 0) {
        $size += 1 + Protobuf::size_varint($this->timesEncountered);
      }
      if ($this->timesCaptured !== 0) {
        $size += 1 + Protobuf::size_varint($this->timesCaptured);
      }
      if ($this->evolutionStonePieces !== 0) {
        $size += 1 + Protobuf::size_varint($this->evolutionStonePieces);
      }
      if ($this->evolutionStones !== 0) {
        $size += 1 + Protobuf::size_varint($this->evolutionStones);
      }
      return $size;
    }

    public function clearPokemonId() { $this->pokemonId = PokemonId::MISSINGNO; }
    public function getPokemonId() { return $this->pokemonId;}
    public function setPokemonId($value) { $this->pokemonId = $value; }

    public function clearTimesEncountered() { $this->timesEncountered = 0; }
    public function getTimesEncountered() { return $this->timesEncountered;}
    public function setTimesEncountered($value) { $this->timesEncountered = $value; }

    public function clearTimesCaptured() { $this->timesCaptured = 0; }
    public function getTimesCaptured() { return $this->timesCaptured;}
    public function setTimesCaptured($value) { $this->timesCaptured = $value; }

    public function clearEvolutionStonePieces() { $this->evolutionStonePieces = 0; }
    public function getEvolutionStonePieces() { return $this->evolutionStonePieces;}
    public function setEvolutionStonePieces($value) { $this->evolutionStonePieces = $value; }

    public function clearEvolutionStones() { $this->evolutionStones = 0; }
    public function getEvolutionStones() { return $this->evolutionStones;}
    public function setEvolutionStones($value) { $this->evolutionStones = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('pokemon_id', $this->pokemonId, PokemonId::MISSINGNO)
           . Protobuf::toString('times_encountered', $this->timesEncountered, 0)
           . Protobuf::toString('times_captured', $this->timesCaptured, 0)
           . Protobuf::toString('evolution_stone_pieces', $this->evolutionStonePieces, 0)
           . Protobuf::toString('evolution_stones', $this->evolutionStones, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.PokedexEntry)
  }

}