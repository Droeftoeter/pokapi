<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Gym/GymState.php');

namespace POGOProtos\Data\Gym {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.Gym.GymState
  final class GymState extends ProtobufMessage {

    private $_unknown;
    private $fortData = null; // optional .POGOProtos.Map.Fort.FortData fort_data = 1
    private $memberships = array(); // repeated .POGOProtos.Data.Gym.GymMembership memberships = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Map.Fort.FortData fort_data = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->fortData = new \POGOProtos\Map\Fort\FortData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Fort\FortData did not read the full length');

            break;
          case 2: // repeated .POGOProtos.Data.Gym.GymMembership memberships = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->memberships[] = new \POGOProtos\Data\Gym\GymMembership($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Gym\GymMembership did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->fortData !== null) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->fortData->size());
        $this->fortData->write($fp);
      }
      foreach($this->memberships as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->fortData !== null) {
        $l = $this->fortData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->memberships as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearFortData() { $this->fortData = null; }
    public function getFortData() { return $this->fortData;}
    public function setFortData(\POGOProtos\Map\Fort\FortData $value) { $this->fortData = $value; }

    public function clearMemberships() { $this->memberships = array(); }
    public function getMembershipsCount() { return count($this->memberships); }
    public function getMemberships($index) { return $this->memberships[$index]; }
    public function getMembershipsArray() { return $this->memberships; }
    public function setMemberships($index, array $value) {$this->memberships[$index] = $value; }
    public function addMemberships(array $value) { $this->memberships[] = $value; }
    public function addAllMemberships(array $values) { foreach($values as $value) {$this->memberships[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('fort_data', $this->fortData, null)
           . Protobuf::toString('memberships', $this->memberships, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Gym.GymState)
  }

}