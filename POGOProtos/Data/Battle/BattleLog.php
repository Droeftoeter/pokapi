<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Data.Battle.proto
 */


namespace POGOProtos\Data\Battle;

/**
 * Protobuf message : POGOProtos.Data.Battle.BattleLog
 */
class BattleLog extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * state optional enum = 1
     *
     * @var \POGOProtos\Data\Battle\BattleState
     */
    protected $state = null;

    /**
     * battle_type optional enum = 2
     *
     * @var \POGOProtos\Data\Battle\BattleType
     */
    protected $battle_type = null;

    /**
     * server_ms optional int64 = 3
     *
     * @var int
     */
    protected $server_ms = null;

    /**
     * battle_actions repeated message = 4
     *
     * @var \Protobuf\Collection<\POGOProtos\Data\Battle\BattleAction>
     */
    protected $battle_actions = null;

    /**
     * battle_start_timestamp_ms optional int64 = 5
     *
     * @var int
     */
    protected $battle_start_timestamp_ms = null;

    /**
     * battle_end_timestamp_ms optional int64 = 6
     *
     * @var int
     */
    protected $battle_end_timestamp_ms = null;

    /**
     * Check if 'state' has a value
     *
     * @return bool
     */
    public function hasState()
    {
        return $this->state !== null;
    }

    /**
     * Get 'state' value
     *
     * @return \POGOProtos\Data\Battle\BattleState
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set 'state' value
     *
     * @param \POGOProtos\Data\Battle\BattleState $value
     */
    public function setState(\POGOProtos\Data\Battle\BattleState $value = null)
    {
        $this->state = $value;
    }

    /**
     * Check if 'battle_type' has a value
     *
     * @return bool
     */
    public function hasBattleType()
    {
        return $this->battle_type !== null;
    }

    /**
     * Get 'battle_type' value
     *
     * @return \POGOProtos\Data\Battle\BattleType
     */
    public function getBattleType()
    {
        return $this->battle_type;
    }

    /**
     * Set 'battle_type' value
     *
     * @param \POGOProtos\Data\Battle\BattleType $value
     */
    public function setBattleType(\POGOProtos\Data\Battle\BattleType $value = null)
    {
        $this->battle_type = $value;
    }

    /**
     * Check if 'server_ms' has a value
     *
     * @return bool
     */
    public function hasServerMs()
    {
        return $this->server_ms !== null;
    }

    /**
     * Get 'server_ms' value
     *
     * @return int
     */
    public function getServerMs()
    {
        return $this->server_ms;
    }

    /**
     * Set 'server_ms' value
     *
     * @param int $value
     */
    public function setServerMs($value = null)
    {
        $this->server_ms = $value;
    }

    /**
     * Check if 'battle_actions' has a value
     *
     * @return bool
     */
    public function hasBattleActionsList()
    {
        return $this->battle_actions !== null;
    }

    /**
     * Get 'battle_actions' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Data\Battle\BattleAction>
     */
    public function getBattleActionsList()
    {
        return $this->battle_actions;
    }

    /**
     * Set 'battle_actions' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Data\Battle\BattleAction> $value
     */
    public function setBattleActionsList(\Protobuf\Collection $value = null)
    {
        $this->battle_actions = $value;
    }

    /**
     * Add a new element to 'battle_actions'
     *
     * @param \POGOProtos\Data\Battle\BattleAction $value
     */
    public function addBattleActions(\POGOProtos\Data\Battle\BattleAction $value)
    {
        if ($this->battle_actions === null) {
            $this->battle_actions = new \Protobuf\MessageCollection();
        }

        $this->battle_actions->add($value);
    }

    /**
     * Check if 'battle_start_timestamp_ms' has a value
     *
     * @return bool
     */
    public function hasBattleStartTimestampMs()
    {
        return $this->battle_start_timestamp_ms !== null;
    }

    /**
     * Get 'battle_start_timestamp_ms' value
     *
     * @return int
     */
    public function getBattleStartTimestampMs()
    {
        return $this->battle_start_timestamp_ms;
    }

    /**
     * Set 'battle_start_timestamp_ms' value
     *
     * @param int $value
     */
    public function setBattleStartTimestampMs($value = null)
    {
        $this->battle_start_timestamp_ms = $value;
    }

    /**
     * Check if 'battle_end_timestamp_ms' has a value
     *
     * @return bool
     */
    public function hasBattleEndTimestampMs()
    {
        return $this->battle_end_timestamp_ms !== null;
    }

    /**
     * Get 'battle_end_timestamp_ms' value
     *
     * @return int
     */
    public function getBattleEndTimestampMs()
    {
        return $this->battle_end_timestamp_ms;
    }

    /**
     * Set 'battle_end_timestamp_ms' value
     *
     * @param int $value
     */
    public function setBattleEndTimestampMs($value = null)
    {
        $this->battle_end_timestamp_ms = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'state' => null,
            'battle_type' => null,
            'server_ms' => null,
            'battle_actions' => [],
            'battle_start_timestamp_ms' => null,
            'battle_end_timestamp_ms' => null
        ], $values);

        $message->setState($values['state']);
        $message->setBattleType($values['battle_type']);
        $message->setServerMs($values['server_ms']);
        $message->setBattleStartTimestampMs($values['battle_start_timestamp_ms']);
        $message->setBattleEndTimestampMs($values['battle_end_timestamp_ms']);

        foreach ($values['battle_actions'] as $item) {
            $message->addBattleActions($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'BattleLog',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'state',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.Battle.BattleState'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'battle_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Data.Battle.BattleType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'server_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'battle_actions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Data.Battle.BattleAction'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'battle_start_timestamp_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'battle_end_timestamp_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->state !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->state->value());
        }

        if ($this->battle_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->battle_type->value());
        }

        if ($this->server_ms !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->server_ms);
        }

        if ($this->battle_actions !== null) {
            foreach ($this->battle_actions as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->battle_start_timestamp_ms !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->battle_start_timestamp_ms);
        }

        if ($this->battle_end_timestamp_ms !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->battle_end_timestamp_ms);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->state = \POGOProtos\Data\Battle\BattleState::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->battle_type = \POGOProtos\Data\Battle\BattleType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->server_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Data\Battle\BattleAction();

                if ($this->battle_actions === null) {
                    $this->battle_actions = new \Protobuf\MessageCollection();
                }

                $this->battle_actions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->battle_start_timestamp_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->battle_end_timestamp_ms = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->state !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->state->value());
        }

        if ($this->battle_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battle_type->value());
        }

        if ($this->server_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->server_ms);
        }

        if ($this->battle_actions !== null) {
            foreach ($this->battle_actions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->battle_start_timestamp_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battle_start_timestamp_ms);
        }

        if ($this->battle_end_timestamp_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battle_end_timestamp_ms);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->state = null;
        $this->battle_type = null;
        $this->server_ms = null;
        $this->battle_actions = null;
        $this->battle_start_timestamp_ms = null;
        $this->battle_end_timestamp_ms = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Data\Battle\BattleLog) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->state = ($message->state !== null) ? $message->state : $this->state;
        $this->battle_type = ($message->battle_type !== null) ? $message->battle_type : $this->battle_type;
        $this->server_ms = ($message->server_ms !== null) ? $message->server_ms : $this->server_ms;
        $this->battle_actions = ($message->battle_actions !== null) ? $message->battle_actions : $this->battle_actions;
        $this->battle_start_timestamp_ms = ($message->battle_start_timestamp_ms !== null) ? $message->battle_start_timestamp_ms : $this->battle_start_timestamp_ms;
        $this->battle_end_timestamp_ms = ($message->battle_end_timestamp_ms !== null) ? $message->battle_end_timestamp_ms : $this->battle_end_timestamp_ms;
    }


}

