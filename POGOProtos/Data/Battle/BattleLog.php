<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Battle/BattleLog.php');

namespace POGOProtos\Data\Battle {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.Battle.BattleLog
  final class BattleLog extends ProtobufMessage {

    private $_unknown;
    private $state = BattleState::STATE_UNSET; // optional .POGOProtos.Data.Battle.BattleState state = 1
    private $battleType = BattleType::BATTLE_TYPE_UNSET; // optional .POGOProtos.Data.Battle.BattleType battle_type = 2
    private $serverMs = 0; // optional int64 server_ms = 3
    private $battleActions = array(); // repeated .POGOProtos.Data.Battle.BattleAction battle_actions = 4
    private $battleStartTimestampMs = 0; // optional int64 battle_start_timestamp_ms = 5
    private $battleEndTimestampMs = 0; // optional int64 battle_end_timestamp_ms = 6

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Data.Battle.BattleState state = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->state = $tmp;

            break;
          case 2: // optional .POGOProtos.Data.Battle.BattleType battle_type = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->battleType = $tmp;

            break;
          case 3: // optional int64 server_ms = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->serverMs = $tmp;

            break;
          case 4: // repeated .POGOProtos.Data.Battle.BattleAction battle_actions = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->battleActions[] = new \POGOProtos\Data\Battle\BattleAction($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Battle\BattleAction did not read the full length');

            break;
          case 5: // optional int64 battle_start_timestamp_ms = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->battleStartTimestampMs = $tmp;

            break;
          case 6: // optional int64 battle_end_timestamp_ms = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->battleEndTimestampMs = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->state !== BattleState::STATE_UNSET) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->state);
      }
      if ($this->battleType !== BattleType::BATTLE_TYPE_UNSET) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->battleType);
      }
      if ($this->serverMs !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->serverMs);
      }
      foreach($this->battleActions as $v) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->battleStartTimestampMs !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->battleStartTimestampMs);
      }
      if ($this->battleEndTimestampMs !== 0) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->battleEndTimestampMs);
      }
    }

    public function size() {
      $size = 0;
      if ($this->state !== BattleState::STATE_UNSET) {
        $size += 1 + Protobuf::size_varint($this->state);
      }
      if ($this->battleType !== BattleType::BATTLE_TYPE_UNSET) {
        $size += 1 + Protobuf::size_varint($this->battleType);
      }
      if ($this->serverMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->serverMs);
      }
      foreach($this->battleActions as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->battleStartTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->battleStartTimestampMs);
      }
      if ($this->battleEndTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->battleEndTimestampMs);
      }
      return $size;
    }

    public function clearState() { $this->state = BattleState::STATE_UNSET; }
    public function getState() { return $this->state;}
    public function setState($value) { $this->state = $value; }

    public function clearBattleType() { $this->battleType = BattleType::BATTLE_TYPE_UNSET; }
    public function getBattleType() { return $this->battleType;}
    public function setBattleType($value) { $this->battleType = $value; }

    public function clearServerMs() { $this->serverMs = 0; }
    public function getServerMs() { return $this->serverMs;}
    public function setServerMs($value) { $this->serverMs = $value; }

    public function clearBattleActions() { $this->battleActions = array(); }
    public function getBattleActionsCount() { return count($this->battleActions); }
    public function getBattleActions($index) { return $this->battleActions[$index]; }
    public function getBattleActionsArray() { return $this->battleActions; }
    public function setBattleActions($index, array $value) {$this->battleActions[$index] = $value; }
    public function addBattleActions(array $value) { $this->battleActions[] = $value; }
    public function addAllBattleActions(array $values) { foreach($values as $value) {$this->battleActions[] = $value; }}

    public function clearBattleStartTimestampMs() { $this->battleStartTimestampMs = 0; }
    public function getBattleStartTimestampMs() { return $this->battleStartTimestampMs;}
    public function setBattleStartTimestampMs($value) { $this->battleStartTimestampMs = $value; }

    public function clearBattleEndTimestampMs() { $this->battleEndTimestampMs = 0; }
    public function getBattleEndTimestampMs() { return $this->battleEndTimestampMs;}
    public function setBattleEndTimestampMs($value) { $this->battleEndTimestampMs = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('state', $this->state, BattleState::STATE_UNSET)
           . Protobuf::toString('battle_type', $this->battleType, BattleType::BATTLE_TYPE_UNSET)
           . Protobuf::toString('server_ms', $this->serverMs, 0)
           . Protobuf::toString('battle_actions', $this->battleActions, null)
           . Protobuf::toString('battle_start_timestamp_ms', $this->battleStartTimestampMs, 0)
           . Protobuf::toString('battle_end_timestamp_ms', $this->battleEndTimestampMs, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Battle.BattleLog)
  }

}