<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Battle/BattlePokemonInfo.php');

namespace POGOProtos\Data\Battle {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Data.Battle.BattlePokemonInfo
  final class BattlePokemonInfo extends ProtobufMessage {

    private $_unknown;
    private $pokemonData = null; // optional .POGOProtos.Data.PokemonData pokemon_data = 1
    private $currentHealth = 0; // optional int32 current_health = 2
    private $currentEnergy = 0; // optional int32 current_energy = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Data.PokemonData pokemon_data = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonData = new \POGOProtos\Data\PokemonData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokemonData did not read the full length');

            break;
          case 2: // optional int32 current_health = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->currentHealth = $tmp;

            break;
          case 3: // optional int32 current_energy = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->currentEnergy = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->pokemonData !== null) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->pokemonData->size());
        $this->pokemonData->write($fp);
      }
      if ($this->currentHealth !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->currentHealth);
      }
      if ($this->currentEnergy !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->currentEnergy);
      }
    }

    public function size() {
      $size = 0;
      if ($this->pokemonData !== null) {
        $l = $this->pokemonData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->currentHealth !== 0) {
        $size += 1 + Protobuf::size_varint($this->currentHealth);
      }
      if ($this->currentEnergy !== 0) {
        $size += 1 + Protobuf::size_varint($this->currentEnergy);
      }
      return $size;
    }

    public function clearPokemonData() { $this->pokemonData = null; }
    public function getPokemonData() { return $this->pokemonData;}
    public function setPokemonData(\POGOProtos\Data\PokemonData $value) { $this->pokemonData = $value; }

    public function clearCurrentHealth() { $this->currentHealth = 0; }
    public function getCurrentHealth() { return $this->currentHealth;}
    public function setCurrentHealth($value) { $this->currentHealth = $value; }

    public function clearCurrentEnergy() { $this->currentEnergy = 0; }
    public function getCurrentEnergy() { return $this->currentEnergy;}
    public function setCurrentEnergy($value) { $this->currentEnergy = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('pokemon_data', $this->pokemonData, null)
           . Protobuf::toString('current_health', $this->currentHealth, 0)
           . Protobuf::toString('current_energy', $this->currentEnergy, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Battle.BattlePokemonInfo)
  }

}