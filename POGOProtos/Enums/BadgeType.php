<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Enums.proto
 */


namespace POGOProtos\Enums;

/**
 * Protobuf enum : POGOProtos.Enums.BadgeType
 */
class BadgeType extends \Protobuf\Enum
{

    /**
     * BADGE_UNSET = 0
     */
    const BADGE_UNSET_VALUE = 0;

    /**
     * BADGE_TRAVEL_KM = 1
     */
    const BADGE_TRAVEL_KM_VALUE = 1;

    /**
     * BADGE_POKEDEX_ENTRIES = 2
     */
    const BADGE_POKEDEX_ENTRIES_VALUE = 2;

    /**
     * BADGE_CAPTURE_TOTAL = 3
     */
    const BADGE_CAPTURE_TOTAL_VALUE = 3;

    /**
     * BADGE_DEFEATED_FORT = 4
     */
    const BADGE_DEFEATED_FORT_VALUE = 4;

    /**
     * BADGE_EVOLVED_TOTAL = 5
     */
    const BADGE_EVOLVED_TOTAL_VALUE = 5;

    /**
     * BADGE_HATCHED_TOTAL = 6
     */
    const BADGE_HATCHED_TOTAL_VALUE = 6;

    /**
     * BADGE_ENCOUNTERED_TOTAL = 7
     */
    const BADGE_ENCOUNTERED_TOTAL_VALUE = 7;

    /**
     * BADGE_POKESTOPS_VISITED = 8
     */
    const BADGE_POKESTOPS_VISITED_VALUE = 8;

    /**
     * BADGE_UNIQUE_POKESTOPS = 9
     */
    const BADGE_UNIQUE_POKESTOPS_VALUE = 9;

    /**
     * BADGE_POKEBALL_THROWN = 10
     */
    const BADGE_POKEBALL_THROWN_VALUE = 10;

    /**
     * BADGE_BIG_MAGIKARP = 11
     */
    const BADGE_BIG_MAGIKARP_VALUE = 11;

    /**
     * BADGE_DEPLOYED_TOTAL = 12
     */
    const BADGE_DEPLOYED_TOTAL_VALUE = 12;

    /**
     * BADGE_BATTLE_ATTACK_WON = 13
     */
    const BADGE_BATTLE_ATTACK_WON_VALUE = 13;

    /**
     * BADGE_BATTLE_TRAINING_WON = 14
     */
    const BADGE_BATTLE_TRAINING_WON_VALUE = 14;

    /**
     * BADGE_BATTLE_DEFEND_WON = 15
     */
    const BADGE_BATTLE_DEFEND_WON_VALUE = 15;

    /**
     * BADGE_PRESTIGE_RAISED = 16
     */
    const BADGE_PRESTIGE_RAISED_VALUE = 16;

    /**
     * BADGE_PRESTIGE_DROPPED = 17
     */
    const BADGE_PRESTIGE_DROPPED_VALUE = 17;

    /**
     * BADGE_TYPE_NORMAL = 18
     */
    const BADGE_TYPE_NORMAL_VALUE = 18;

    /**
     * BADGE_TYPE_FIGHTING = 19
     */
    const BADGE_TYPE_FIGHTING_VALUE = 19;

    /**
     * BADGE_TYPE_FLYING = 20
     */
    const BADGE_TYPE_FLYING_VALUE = 20;

    /**
     * BADGE_TYPE_POISON = 21
     */
    const BADGE_TYPE_POISON_VALUE = 21;

    /**
     * BADGE_TYPE_GROUND = 22
     */
    const BADGE_TYPE_GROUND_VALUE = 22;

    /**
     * BADGE_TYPE_ROCK = 23
     */
    const BADGE_TYPE_ROCK_VALUE = 23;

    /**
     * BADGE_TYPE_BUG = 24
     */
    const BADGE_TYPE_BUG_VALUE = 24;

    /**
     * BADGE_TYPE_GHOST = 25
     */
    const BADGE_TYPE_GHOST_VALUE = 25;

    /**
     * BADGE_TYPE_STEEL = 26
     */
    const BADGE_TYPE_STEEL_VALUE = 26;

    /**
     * BADGE_TYPE_FIRE = 27
     */
    const BADGE_TYPE_FIRE_VALUE = 27;

    /**
     * BADGE_TYPE_WATER = 28
     */
    const BADGE_TYPE_WATER_VALUE = 28;

    /**
     * BADGE_TYPE_GRASS = 29
     */
    const BADGE_TYPE_GRASS_VALUE = 29;

    /**
     * BADGE_TYPE_ELECTRIC = 30
     */
    const BADGE_TYPE_ELECTRIC_VALUE = 30;

    /**
     * BADGE_TYPE_PSYCHIC = 31
     */
    const BADGE_TYPE_PSYCHIC_VALUE = 31;

    /**
     * BADGE_TYPE_ICE = 32
     */
    const BADGE_TYPE_ICE_VALUE = 32;

    /**
     * BADGE_TYPE_DRAGON = 33
     */
    const BADGE_TYPE_DRAGON_VALUE = 33;

    /**
     * BADGE_TYPE_DARK = 34
     */
    const BADGE_TYPE_DARK_VALUE = 34;

    /**
     * BADGE_TYPE_FAIRY = 35
     */
    const BADGE_TYPE_FAIRY_VALUE = 35;

    /**
     * BADGE_SMALL_RATTATA = 36
     */
    const BADGE_SMALL_RATTATA_VALUE = 36;

    /**
     * BADGE_PIKACHU = 37
     */
    const BADGE_PIKACHU_VALUE = 37;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_UNSET = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TRAVEL_KM = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_POKEDEX_ENTRIES = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_CAPTURE_TOTAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_DEFEATED_FORT = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_EVOLVED_TOTAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_HATCHED_TOTAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_ENCOUNTERED_TOTAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_POKESTOPS_VISITED = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_UNIQUE_POKESTOPS = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_POKEBALL_THROWN = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_BIG_MAGIKARP = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_DEPLOYED_TOTAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_BATTLE_ATTACK_WON = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_BATTLE_TRAINING_WON = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_BATTLE_DEFEND_WON = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_PRESTIGE_RAISED = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_PRESTIGE_DROPPED = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_NORMAL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_FIGHTING = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_FLYING = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_POISON = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_GROUND = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_ROCK = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_BUG = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_GHOST = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_STEEL = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_FIRE = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_WATER = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_GRASS = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_ELECTRIC = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_PSYCHIC = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_ICE = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_DRAGON = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_DARK = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_TYPE_FAIRY = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_SMALL_RATTATA = null;

    /**
     * @var \POGOProtos\Enums\BadgeType
     */
    protected static $BADGE_PIKACHU = null;

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_UNSET()
    {
        if (self::$BADGE_UNSET !== null) {
            return self::$BADGE_UNSET;
        }

        return self::$BADGE_UNSET = new self('BADGE_UNSET', self::BADGE_UNSET_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TRAVEL_KM()
    {
        if (self::$BADGE_TRAVEL_KM !== null) {
            return self::$BADGE_TRAVEL_KM;
        }

        return self::$BADGE_TRAVEL_KM = new self('BADGE_TRAVEL_KM', self::BADGE_TRAVEL_KM_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_POKEDEX_ENTRIES()
    {
        if (self::$BADGE_POKEDEX_ENTRIES !== null) {
            return self::$BADGE_POKEDEX_ENTRIES;
        }

        return self::$BADGE_POKEDEX_ENTRIES = new self('BADGE_POKEDEX_ENTRIES', self::BADGE_POKEDEX_ENTRIES_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_CAPTURE_TOTAL()
    {
        if (self::$BADGE_CAPTURE_TOTAL !== null) {
            return self::$BADGE_CAPTURE_TOTAL;
        }

        return self::$BADGE_CAPTURE_TOTAL = new self('BADGE_CAPTURE_TOTAL', self::BADGE_CAPTURE_TOTAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_DEFEATED_FORT()
    {
        if (self::$BADGE_DEFEATED_FORT !== null) {
            return self::$BADGE_DEFEATED_FORT;
        }

        return self::$BADGE_DEFEATED_FORT = new self('BADGE_DEFEATED_FORT', self::BADGE_DEFEATED_FORT_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_EVOLVED_TOTAL()
    {
        if (self::$BADGE_EVOLVED_TOTAL !== null) {
            return self::$BADGE_EVOLVED_TOTAL;
        }

        return self::$BADGE_EVOLVED_TOTAL = new self('BADGE_EVOLVED_TOTAL', self::BADGE_EVOLVED_TOTAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_HATCHED_TOTAL()
    {
        if (self::$BADGE_HATCHED_TOTAL !== null) {
            return self::$BADGE_HATCHED_TOTAL;
        }

        return self::$BADGE_HATCHED_TOTAL = new self('BADGE_HATCHED_TOTAL', self::BADGE_HATCHED_TOTAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_ENCOUNTERED_TOTAL()
    {
        if (self::$BADGE_ENCOUNTERED_TOTAL !== null) {
            return self::$BADGE_ENCOUNTERED_TOTAL;
        }

        return self::$BADGE_ENCOUNTERED_TOTAL = new self('BADGE_ENCOUNTERED_TOTAL', self::BADGE_ENCOUNTERED_TOTAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_POKESTOPS_VISITED()
    {
        if (self::$BADGE_POKESTOPS_VISITED !== null) {
            return self::$BADGE_POKESTOPS_VISITED;
        }

        return self::$BADGE_POKESTOPS_VISITED = new self('BADGE_POKESTOPS_VISITED', self::BADGE_POKESTOPS_VISITED_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_UNIQUE_POKESTOPS()
    {
        if (self::$BADGE_UNIQUE_POKESTOPS !== null) {
            return self::$BADGE_UNIQUE_POKESTOPS;
        }

        return self::$BADGE_UNIQUE_POKESTOPS = new self('BADGE_UNIQUE_POKESTOPS', self::BADGE_UNIQUE_POKESTOPS_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_POKEBALL_THROWN()
    {
        if (self::$BADGE_POKEBALL_THROWN !== null) {
            return self::$BADGE_POKEBALL_THROWN;
        }

        return self::$BADGE_POKEBALL_THROWN = new self('BADGE_POKEBALL_THROWN', self::BADGE_POKEBALL_THROWN_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_BIG_MAGIKARP()
    {
        if (self::$BADGE_BIG_MAGIKARP !== null) {
            return self::$BADGE_BIG_MAGIKARP;
        }

        return self::$BADGE_BIG_MAGIKARP = new self('BADGE_BIG_MAGIKARP', self::BADGE_BIG_MAGIKARP_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_DEPLOYED_TOTAL()
    {
        if (self::$BADGE_DEPLOYED_TOTAL !== null) {
            return self::$BADGE_DEPLOYED_TOTAL;
        }

        return self::$BADGE_DEPLOYED_TOTAL = new self('BADGE_DEPLOYED_TOTAL', self::BADGE_DEPLOYED_TOTAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_BATTLE_ATTACK_WON()
    {
        if (self::$BADGE_BATTLE_ATTACK_WON !== null) {
            return self::$BADGE_BATTLE_ATTACK_WON;
        }

        return self::$BADGE_BATTLE_ATTACK_WON = new self('BADGE_BATTLE_ATTACK_WON', self::BADGE_BATTLE_ATTACK_WON_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_BATTLE_TRAINING_WON()
    {
        if (self::$BADGE_BATTLE_TRAINING_WON !== null) {
            return self::$BADGE_BATTLE_TRAINING_WON;
        }

        return self::$BADGE_BATTLE_TRAINING_WON = new self('BADGE_BATTLE_TRAINING_WON', self::BADGE_BATTLE_TRAINING_WON_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_BATTLE_DEFEND_WON()
    {
        if (self::$BADGE_BATTLE_DEFEND_WON !== null) {
            return self::$BADGE_BATTLE_DEFEND_WON;
        }

        return self::$BADGE_BATTLE_DEFEND_WON = new self('BADGE_BATTLE_DEFEND_WON', self::BADGE_BATTLE_DEFEND_WON_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_PRESTIGE_RAISED()
    {
        if (self::$BADGE_PRESTIGE_RAISED !== null) {
            return self::$BADGE_PRESTIGE_RAISED;
        }

        return self::$BADGE_PRESTIGE_RAISED = new self('BADGE_PRESTIGE_RAISED', self::BADGE_PRESTIGE_RAISED_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_PRESTIGE_DROPPED()
    {
        if (self::$BADGE_PRESTIGE_DROPPED !== null) {
            return self::$BADGE_PRESTIGE_DROPPED;
        }

        return self::$BADGE_PRESTIGE_DROPPED = new self('BADGE_PRESTIGE_DROPPED', self::BADGE_PRESTIGE_DROPPED_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_NORMAL()
    {
        if (self::$BADGE_TYPE_NORMAL !== null) {
            return self::$BADGE_TYPE_NORMAL;
        }

        return self::$BADGE_TYPE_NORMAL = new self('BADGE_TYPE_NORMAL', self::BADGE_TYPE_NORMAL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_FIGHTING()
    {
        if (self::$BADGE_TYPE_FIGHTING !== null) {
            return self::$BADGE_TYPE_FIGHTING;
        }

        return self::$BADGE_TYPE_FIGHTING = new self('BADGE_TYPE_FIGHTING', self::BADGE_TYPE_FIGHTING_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_FLYING()
    {
        if (self::$BADGE_TYPE_FLYING !== null) {
            return self::$BADGE_TYPE_FLYING;
        }

        return self::$BADGE_TYPE_FLYING = new self('BADGE_TYPE_FLYING', self::BADGE_TYPE_FLYING_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_POISON()
    {
        if (self::$BADGE_TYPE_POISON !== null) {
            return self::$BADGE_TYPE_POISON;
        }

        return self::$BADGE_TYPE_POISON = new self('BADGE_TYPE_POISON', self::BADGE_TYPE_POISON_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_GROUND()
    {
        if (self::$BADGE_TYPE_GROUND !== null) {
            return self::$BADGE_TYPE_GROUND;
        }

        return self::$BADGE_TYPE_GROUND = new self('BADGE_TYPE_GROUND', self::BADGE_TYPE_GROUND_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_ROCK()
    {
        if (self::$BADGE_TYPE_ROCK !== null) {
            return self::$BADGE_TYPE_ROCK;
        }

        return self::$BADGE_TYPE_ROCK = new self('BADGE_TYPE_ROCK', self::BADGE_TYPE_ROCK_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_BUG()
    {
        if (self::$BADGE_TYPE_BUG !== null) {
            return self::$BADGE_TYPE_BUG;
        }

        return self::$BADGE_TYPE_BUG = new self('BADGE_TYPE_BUG', self::BADGE_TYPE_BUG_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_GHOST()
    {
        if (self::$BADGE_TYPE_GHOST !== null) {
            return self::$BADGE_TYPE_GHOST;
        }

        return self::$BADGE_TYPE_GHOST = new self('BADGE_TYPE_GHOST', self::BADGE_TYPE_GHOST_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_STEEL()
    {
        if (self::$BADGE_TYPE_STEEL !== null) {
            return self::$BADGE_TYPE_STEEL;
        }

        return self::$BADGE_TYPE_STEEL = new self('BADGE_TYPE_STEEL', self::BADGE_TYPE_STEEL_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_FIRE()
    {
        if (self::$BADGE_TYPE_FIRE !== null) {
            return self::$BADGE_TYPE_FIRE;
        }

        return self::$BADGE_TYPE_FIRE = new self('BADGE_TYPE_FIRE', self::BADGE_TYPE_FIRE_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_WATER()
    {
        if (self::$BADGE_TYPE_WATER !== null) {
            return self::$BADGE_TYPE_WATER;
        }

        return self::$BADGE_TYPE_WATER = new self('BADGE_TYPE_WATER', self::BADGE_TYPE_WATER_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_GRASS()
    {
        if (self::$BADGE_TYPE_GRASS !== null) {
            return self::$BADGE_TYPE_GRASS;
        }

        return self::$BADGE_TYPE_GRASS = new self('BADGE_TYPE_GRASS', self::BADGE_TYPE_GRASS_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_ELECTRIC()
    {
        if (self::$BADGE_TYPE_ELECTRIC !== null) {
            return self::$BADGE_TYPE_ELECTRIC;
        }

        return self::$BADGE_TYPE_ELECTRIC = new self('BADGE_TYPE_ELECTRIC', self::BADGE_TYPE_ELECTRIC_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_PSYCHIC()
    {
        if (self::$BADGE_TYPE_PSYCHIC !== null) {
            return self::$BADGE_TYPE_PSYCHIC;
        }

        return self::$BADGE_TYPE_PSYCHIC = new self('BADGE_TYPE_PSYCHIC', self::BADGE_TYPE_PSYCHIC_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_ICE()
    {
        if (self::$BADGE_TYPE_ICE !== null) {
            return self::$BADGE_TYPE_ICE;
        }

        return self::$BADGE_TYPE_ICE = new self('BADGE_TYPE_ICE', self::BADGE_TYPE_ICE_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_DRAGON()
    {
        if (self::$BADGE_TYPE_DRAGON !== null) {
            return self::$BADGE_TYPE_DRAGON;
        }

        return self::$BADGE_TYPE_DRAGON = new self('BADGE_TYPE_DRAGON', self::BADGE_TYPE_DRAGON_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_DARK()
    {
        if (self::$BADGE_TYPE_DARK !== null) {
            return self::$BADGE_TYPE_DARK;
        }

        return self::$BADGE_TYPE_DARK = new self('BADGE_TYPE_DARK', self::BADGE_TYPE_DARK_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_TYPE_FAIRY()
    {
        if (self::$BADGE_TYPE_FAIRY !== null) {
            return self::$BADGE_TYPE_FAIRY;
        }

        return self::$BADGE_TYPE_FAIRY = new self('BADGE_TYPE_FAIRY', self::BADGE_TYPE_FAIRY_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_SMALL_RATTATA()
    {
        if (self::$BADGE_SMALL_RATTATA !== null) {
            return self::$BADGE_SMALL_RATTATA;
        }

        return self::$BADGE_SMALL_RATTATA = new self('BADGE_SMALL_RATTATA', self::BADGE_SMALL_RATTATA_VALUE);
    }

    /**
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function BADGE_PIKACHU()
    {
        if (self::$BADGE_PIKACHU !== null) {
            return self::$BADGE_PIKACHU;
        }

        return self::$BADGE_PIKACHU = new self('BADGE_PIKACHU', self::BADGE_PIKACHU_VALUE);
    }

    /**
     * @param int $value
     * @return \POGOProtos\Enums\BadgeType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::BADGE_UNSET();
            case 1: return self::BADGE_TRAVEL_KM();
            case 2: return self::BADGE_POKEDEX_ENTRIES();
            case 3: return self::BADGE_CAPTURE_TOTAL();
            case 4: return self::BADGE_DEFEATED_FORT();
            case 5: return self::BADGE_EVOLVED_TOTAL();
            case 6: return self::BADGE_HATCHED_TOTAL();
            case 7: return self::BADGE_ENCOUNTERED_TOTAL();
            case 8: return self::BADGE_POKESTOPS_VISITED();
            case 9: return self::BADGE_UNIQUE_POKESTOPS();
            case 10: return self::BADGE_POKEBALL_THROWN();
            case 11: return self::BADGE_BIG_MAGIKARP();
            case 12: return self::BADGE_DEPLOYED_TOTAL();
            case 13: return self::BADGE_BATTLE_ATTACK_WON();
            case 14: return self::BADGE_BATTLE_TRAINING_WON();
            case 15: return self::BADGE_BATTLE_DEFEND_WON();
            case 16: return self::BADGE_PRESTIGE_RAISED();
            case 17: return self::BADGE_PRESTIGE_DROPPED();
            case 18: return self::BADGE_TYPE_NORMAL();
            case 19: return self::BADGE_TYPE_FIGHTING();
            case 20: return self::BADGE_TYPE_FLYING();
            case 21: return self::BADGE_TYPE_POISON();
            case 22: return self::BADGE_TYPE_GROUND();
            case 23: return self::BADGE_TYPE_ROCK();
            case 24: return self::BADGE_TYPE_BUG();
            case 25: return self::BADGE_TYPE_GHOST();
            case 26: return self::BADGE_TYPE_STEEL();
            case 27: return self::BADGE_TYPE_FIRE();
            case 28: return self::BADGE_TYPE_WATER();
            case 29: return self::BADGE_TYPE_GRASS();
            case 30: return self::BADGE_TYPE_ELECTRIC();
            case 31: return self::BADGE_TYPE_PSYCHIC();
            case 32: return self::BADGE_TYPE_ICE();
            case 33: return self::BADGE_TYPE_DRAGON();
            case 34: return self::BADGE_TYPE_DARK();
            case 35: return self::BADGE_TYPE_FAIRY();
            case 36: return self::BADGE_SMALL_RATTATA();
            case 37: return self::BADGE_PIKACHU();
            default: return null;
        }
    }


}

