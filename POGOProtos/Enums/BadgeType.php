<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Enums/BadgeType.php');

namespace POGOProtos\Enums {

  use ProtobufEnum;

  // enum POGOProtos.Enums.BadgeType
  abstract class BadgeType extends ProtobufEnum {
    const BADGE_UNSET = 0;
    const BADGE_TRAVEL_KM = 1;
    const BADGE_POKEDEX_ENTRIES = 2;
    const BADGE_CAPTURE_TOTAL = 3;
    const BADGE_DEFEATED_FORT = 4;
    const BADGE_EVOLVED_TOTAL = 5;
    const BADGE_HATCHED_TOTAL = 6;
    const BADGE_ENCOUNTERED_TOTAL = 7;
    const BADGE_POKESTOPS_VISITED = 8;
    const BADGE_UNIQUE_POKESTOPS = 9;
    const BADGE_POKEBALL_THROWN = 10;
    const BADGE_BIG_MAGIKARP = 11;
    const BADGE_DEPLOYED_TOTAL = 12;
    const BADGE_BATTLE_ATTACK_WON = 13;
    const BADGE_BATTLE_TRAINING_WON = 14;
    const BADGE_BATTLE_DEFEND_WON = 15;
    const BADGE_PRESTIGE_RAISED = 16;
    const BADGE_PRESTIGE_DROPPED = 17;
    const BADGE_TYPE_NORMAL = 18;
    const BADGE_TYPE_FIGHTING = 19;
    const BADGE_TYPE_FLYING = 20;
    const BADGE_TYPE_POISON = 21;
    const BADGE_TYPE_GROUND = 22;
    const BADGE_TYPE_ROCK = 23;
    const BADGE_TYPE_BUG = 24;
    const BADGE_TYPE_GHOST = 25;
    const BADGE_TYPE_STEEL = 26;
    const BADGE_TYPE_FIRE = 27;
    const BADGE_TYPE_WATER = 28;
    const BADGE_TYPE_GRASS = 29;
    const BADGE_TYPE_ELECTRIC = 30;
    const BADGE_TYPE_PSYCHIC = 31;
    const BADGE_TYPE_ICE = 32;
    const BADGE_TYPE_DRAGON = 33;
    const BADGE_TYPE_DARK = 34;
    const BADGE_TYPE_FAIRY = 35;
    const BADGE_SMALL_RATTATA = 36;
    const BADGE_PIKACHU = 37;

    public static $_values = array(
      0 => "BADGE_UNSET",
      1 => "BADGE_TRAVEL_KM",
      2 => "BADGE_POKEDEX_ENTRIES",
      3 => "BADGE_CAPTURE_TOTAL",
      4 => "BADGE_DEFEATED_FORT",
      5 => "BADGE_EVOLVED_TOTAL",
      6 => "BADGE_HATCHED_TOTAL",
      7 => "BADGE_ENCOUNTERED_TOTAL",
      8 => "BADGE_POKESTOPS_VISITED",
      9 => "BADGE_UNIQUE_POKESTOPS",
      10 => "BADGE_POKEBALL_THROWN",
      11 => "BADGE_BIG_MAGIKARP",
      12 => "BADGE_DEPLOYED_TOTAL",
      13 => "BADGE_BATTLE_ATTACK_WON",
      14 => "BADGE_BATTLE_TRAINING_WON",
      15 => "BADGE_BATTLE_DEFEND_WON",
      16 => "BADGE_PRESTIGE_RAISED",
      17 => "BADGE_PRESTIGE_DROPPED",
      18 => "BADGE_TYPE_NORMAL",
      19 => "BADGE_TYPE_FIGHTING",
      20 => "BADGE_TYPE_FLYING",
      21 => "BADGE_TYPE_POISON",
      22 => "BADGE_TYPE_GROUND",
      23 => "BADGE_TYPE_ROCK",
      24 => "BADGE_TYPE_BUG",
      25 => "BADGE_TYPE_GHOST",
      26 => "BADGE_TYPE_STEEL",
      27 => "BADGE_TYPE_FIRE",
      28 => "BADGE_TYPE_WATER",
      29 => "BADGE_TYPE_GRASS",
      30 => "BADGE_TYPE_ELECTRIC",
      31 => "BADGE_TYPE_PSYCHIC",
      32 => "BADGE_TYPE_ICE",
      33 => "BADGE_TYPE_DRAGON",
      34 => "BADGE_TYPE_DARK",
      35 => "BADGE_TYPE_FAIRY",
      36 => "BADGE_SMALL_RATTATA",
      37 => "BADGE_PIKACHU",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

}