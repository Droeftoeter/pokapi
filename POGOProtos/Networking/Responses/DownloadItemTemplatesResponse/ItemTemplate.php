<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Responses.proto
 */


namespace POGOProtos\Networking\Responses\DownloadItemTemplatesResponse;

/**
 * Protobuf message :
 * POGOProtos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate
 */
class ItemTemplate extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * template_id optional string = 1
     *
     * @var string
     */
    protected $template_id = null;

    /**
     * pokemon_settings optional message = 2
     *
     * @var \POGOProtos\Settings\Master\PokemonSettings
     */
    protected $pokemon_settings = null;

    /**
     * item_settings optional message = 3
     *
     * @var \POGOProtos\Settings\Master\ItemSettings
     */
    protected $item_settings = null;

    /**
     * move_settings optional message = 4
     *
     * @var \POGOProtos\Settings\Master\MoveSettings
     */
    protected $move_settings = null;

    /**
     * move_sequence_settings optional message = 5
     *
     * @var \POGOProtos\Settings\Master\MoveSequenceSettings
     */
    protected $move_sequence_settings = null;

    /**
     * type_effective optional message = 8
     *
     * @var \POGOProtos\Settings\Master\TypeEffectiveSettings
     */
    protected $type_effective = null;

    /**
     * badge_settings optional message = 10
     *
     * @var \POGOProtos\Settings\Master\BadgeSettings
     */
    protected $badge_settings = null;

    /**
     * camera optional message = 11
     *
     * @var \POGOProtos\Settings\Master\CameraSettings
     */
    protected $camera = null;

    /**
     * player_level optional message = 12
     *
     * @var \POGOProtos\Settings\Master\PlayerLevelSettings
     */
    protected $player_level = null;

    /**
     * gym_level optional message = 13
     *
     * @var \POGOProtos\Settings\Master\GymLevelSettings
     */
    protected $gym_level = null;

    /**
     * battle_settings optional message = 14
     *
     * @var \POGOProtos\Settings\Master\GymBattleSettings
     */
    protected $battle_settings = null;

    /**
     * encounter_settings optional message = 15
     *
     * @var \POGOProtos\Settings\Master\EncounterSettings
     */
    protected $encounter_settings = null;

    /**
     * iap_item_display optional message = 16
     *
     * @var \POGOProtos\Settings\Master\IapItemDisplay
     */
    protected $iap_item_display = null;

    /**
     * iap_settings optional message = 17
     *
     * @var \POGOProtos\Settings\Master\IapSettings
     */
    protected $iap_settings = null;

    /**
     * pokemon_upgrades optional message = 18
     *
     * @var \POGOProtos\Settings\Master\PokemonUpgradeSettings
     */
    protected $pokemon_upgrades = null;

    /**
     * equipped_badges optional message = 19
     *
     * @var \POGOProtos\Settings\Master\EquippedBadgeSettings
     */
    protected $equipped_badges = null;

    /**
     * Check if 'template_id' has a value
     *
     * @return bool
     */
    public function hasTemplateId()
    {
        return $this->template_id !== null;
    }

    /**
     * Get 'template_id' value
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->template_id;
    }

    /**
     * Set 'template_id' value
     *
     * @param string $value
     */
    public function setTemplateId($value = null)
    {
        $this->template_id = $value;
    }

    /**
     * Check if 'pokemon_settings' has a value
     *
     * @return bool
     */
    public function hasPokemonSettings()
    {
        return $this->pokemon_settings !== null;
    }

    /**
     * Get 'pokemon_settings' value
     *
     * @return \POGOProtos\Settings\Master\PokemonSettings
     */
    public function getPokemonSettings()
    {
        return $this->pokemon_settings;
    }

    /**
     * Set 'pokemon_settings' value
     *
     * @param \POGOProtos\Settings\Master\PokemonSettings $value
     */
    public function setPokemonSettings(\POGOProtos\Settings\Master\PokemonSettings $value = null)
    {
        $this->pokemon_settings = $value;
    }

    /**
     * Check if 'item_settings' has a value
     *
     * @return bool
     */
    public function hasItemSettings()
    {
        return $this->item_settings !== null;
    }

    /**
     * Get 'item_settings' value
     *
     * @return \POGOProtos\Settings\Master\ItemSettings
     */
    public function getItemSettings()
    {
        return $this->item_settings;
    }

    /**
     * Set 'item_settings' value
     *
     * @param \POGOProtos\Settings\Master\ItemSettings $value
     */
    public function setItemSettings(\POGOProtos\Settings\Master\ItemSettings $value = null)
    {
        $this->item_settings = $value;
    }

    /**
     * Check if 'move_settings' has a value
     *
     * @return bool
     */
    public function hasMoveSettings()
    {
        return $this->move_settings !== null;
    }

    /**
     * Get 'move_settings' value
     *
     * @return \POGOProtos\Settings\Master\MoveSettings
     */
    public function getMoveSettings()
    {
        return $this->move_settings;
    }

    /**
     * Set 'move_settings' value
     *
     * @param \POGOProtos\Settings\Master\MoveSettings $value
     */
    public function setMoveSettings(\POGOProtos\Settings\Master\MoveSettings $value = null)
    {
        $this->move_settings = $value;
    }

    /**
     * Check if 'move_sequence_settings' has a value
     *
     * @return bool
     */
    public function hasMoveSequenceSettings()
    {
        return $this->move_sequence_settings !== null;
    }

    /**
     * Get 'move_sequence_settings' value
     *
     * @return \POGOProtos\Settings\Master\MoveSequenceSettings
     */
    public function getMoveSequenceSettings()
    {
        return $this->move_sequence_settings;
    }

    /**
     * Set 'move_sequence_settings' value
     *
     * @param \POGOProtos\Settings\Master\MoveSequenceSettings $value
     */
    public function setMoveSequenceSettings(\POGOProtos\Settings\Master\MoveSequenceSettings $value = null)
    {
        $this->move_sequence_settings = $value;
    }

    /**
     * Check if 'type_effective' has a value
     *
     * @return bool
     */
    public function hasTypeEffective()
    {
        return $this->type_effective !== null;
    }

    /**
     * Get 'type_effective' value
     *
     * @return \POGOProtos\Settings\Master\TypeEffectiveSettings
     */
    public function getTypeEffective()
    {
        return $this->type_effective;
    }

    /**
     * Set 'type_effective' value
     *
     * @param \POGOProtos\Settings\Master\TypeEffectiveSettings $value
     */
    public function setTypeEffective(\POGOProtos\Settings\Master\TypeEffectiveSettings $value = null)
    {
        $this->type_effective = $value;
    }

    /**
     * Check if 'badge_settings' has a value
     *
     * @return bool
     */
    public function hasBadgeSettings()
    {
        return $this->badge_settings !== null;
    }

    /**
     * Get 'badge_settings' value
     *
     * @return \POGOProtos\Settings\Master\BadgeSettings
     */
    public function getBadgeSettings()
    {
        return $this->badge_settings;
    }

    /**
     * Set 'badge_settings' value
     *
     * @param \POGOProtos\Settings\Master\BadgeSettings $value
     */
    public function setBadgeSettings(\POGOProtos\Settings\Master\BadgeSettings $value = null)
    {
        $this->badge_settings = $value;
    }

    /**
     * Check if 'camera' has a value
     *
     * @return bool
     */
    public function hasCamera()
    {
        return $this->camera !== null;
    }

    /**
     * Get 'camera' value
     *
     * @return \POGOProtos\Settings\Master\CameraSettings
     */
    public function getCamera()
    {
        return $this->camera;
    }

    /**
     * Set 'camera' value
     *
     * @param \POGOProtos\Settings\Master\CameraSettings $value
     */
    public function setCamera(\POGOProtos\Settings\Master\CameraSettings $value = null)
    {
        $this->camera = $value;
    }

    /**
     * Check if 'player_level' has a value
     *
     * @return bool
     */
    public function hasPlayerLevel()
    {
        return $this->player_level !== null;
    }

    /**
     * Get 'player_level' value
     *
     * @return \POGOProtos\Settings\Master\PlayerLevelSettings
     */
    public function getPlayerLevel()
    {
        return $this->player_level;
    }

    /**
     * Set 'player_level' value
     *
     * @param \POGOProtos\Settings\Master\PlayerLevelSettings $value
     */
    public function setPlayerLevel(\POGOProtos\Settings\Master\PlayerLevelSettings $value = null)
    {
        $this->player_level = $value;
    }

    /**
     * Check if 'gym_level' has a value
     *
     * @return bool
     */
    public function hasGymLevel()
    {
        return $this->gym_level !== null;
    }

    /**
     * Get 'gym_level' value
     *
     * @return \POGOProtos\Settings\Master\GymLevelSettings
     */
    public function getGymLevel()
    {
        return $this->gym_level;
    }

    /**
     * Set 'gym_level' value
     *
     * @param \POGOProtos\Settings\Master\GymLevelSettings $value
     */
    public function setGymLevel(\POGOProtos\Settings\Master\GymLevelSettings $value = null)
    {
        $this->gym_level = $value;
    }

    /**
     * Check if 'battle_settings' has a value
     *
     * @return bool
     */
    public function hasBattleSettings()
    {
        return $this->battle_settings !== null;
    }

    /**
     * Get 'battle_settings' value
     *
     * @return \POGOProtos\Settings\Master\GymBattleSettings
     */
    public function getBattleSettings()
    {
        return $this->battle_settings;
    }

    /**
     * Set 'battle_settings' value
     *
     * @param \POGOProtos\Settings\Master\GymBattleSettings $value
     */
    public function setBattleSettings(\POGOProtos\Settings\Master\GymBattleSettings $value = null)
    {
        $this->battle_settings = $value;
    }

    /**
     * Check if 'encounter_settings' has a value
     *
     * @return bool
     */
    public function hasEncounterSettings()
    {
        return $this->encounter_settings !== null;
    }

    /**
     * Get 'encounter_settings' value
     *
     * @return \POGOProtos\Settings\Master\EncounterSettings
     */
    public function getEncounterSettings()
    {
        return $this->encounter_settings;
    }

    /**
     * Set 'encounter_settings' value
     *
     * @param \POGOProtos\Settings\Master\EncounterSettings $value
     */
    public function setEncounterSettings(\POGOProtos\Settings\Master\EncounterSettings $value = null)
    {
        $this->encounter_settings = $value;
    }

    /**
     * Check if 'iap_item_display' has a value
     *
     * @return bool
     */
    public function hasIapItemDisplay()
    {
        return $this->iap_item_display !== null;
    }

    /**
     * Get 'iap_item_display' value
     *
     * @return \POGOProtos\Settings\Master\IapItemDisplay
     */
    public function getIapItemDisplay()
    {
        return $this->iap_item_display;
    }

    /**
     * Set 'iap_item_display' value
     *
     * @param \POGOProtos\Settings\Master\IapItemDisplay $value
     */
    public function setIapItemDisplay(\POGOProtos\Settings\Master\IapItemDisplay $value = null)
    {
        $this->iap_item_display = $value;
    }

    /**
     * Check if 'iap_settings' has a value
     *
     * @return bool
     */
    public function hasIapSettings()
    {
        return $this->iap_settings !== null;
    }

    /**
     * Get 'iap_settings' value
     *
     * @return \POGOProtos\Settings\Master\IapSettings
     */
    public function getIapSettings()
    {
        return $this->iap_settings;
    }

    /**
     * Set 'iap_settings' value
     *
     * @param \POGOProtos\Settings\Master\IapSettings $value
     */
    public function setIapSettings(\POGOProtos\Settings\Master\IapSettings $value = null)
    {
        $this->iap_settings = $value;
    }

    /**
     * Check if 'pokemon_upgrades' has a value
     *
     * @return bool
     */
    public function hasPokemonUpgrades()
    {
        return $this->pokemon_upgrades !== null;
    }

    /**
     * Get 'pokemon_upgrades' value
     *
     * @return \POGOProtos\Settings\Master\PokemonUpgradeSettings
     */
    public function getPokemonUpgrades()
    {
        return $this->pokemon_upgrades;
    }

    /**
     * Set 'pokemon_upgrades' value
     *
     * @param \POGOProtos\Settings\Master\PokemonUpgradeSettings $value
     */
    public function setPokemonUpgrades(\POGOProtos\Settings\Master\PokemonUpgradeSettings $value = null)
    {
        $this->pokemon_upgrades = $value;
    }

    /**
     * Check if 'equipped_badges' has a value
     *
     * @return bool
     */
    public function hasEquippedBadges()
    {
        return $this->equipped_badges !== null;
    }

    /**
     * Get 'equipped_badges' value
     *
     * @return \POGOProtos\Settings\Master\EquippedBadgeSettings
     */
    public function getEquippedBadges()
    {
        return $this->equipped_badges;
    }

    /**
     * Set 'equipped_badges' value
     *
     * @param \POGOProtos\Settings\Master\EquippedBadgeSettings $value
     */
    public function setEquippedBadges(\POGOProtos\Settings\Master\EquippedBadgeSettings $value = null)
    {
        $this->equipped_badges = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'template_id' => null,
            'pokemon_settings' => null,
            'item_settings' => null,
            'move_settings' => null,
            'move_sequence_settings' => null,
            'type_effective' => null,
            'badge_settings' => null,
            'camera' => null,
            'player_level' => null,
            'gym_level' => null,
            'battle_settings' => null,
            'encounter_settings' => null,
            'iap_item_display' => null,
            'iap_settings' => null,
            'pokemon_upgrades' => null,
            'equipped_badges' => null
        ], $values);

        $message->setTemplateId($values['template_id']);
        $message->setPokemonSettings($values['pokemon_settings']);
        $message->setItemSettings($values['item_settings']);
        $message->setMoveSettings($values['move_settings']);
        $message->setMoveSequenceSettings($values['move_sequence_settings']);
        $message->setTypeEffective($values['type_effective']);
        $message->setBadgeSettings($values['badge_settings']);
        $message->setCamera($values['camera']);
        $message->setPlayerLevel($values['player_level']);
        $message->setGymLevel($values['gym_level']);
        $message->setBattleSettings($values['battle_settings']);
        $message->setEncounterSettings($values['encounter_settings']);
        $message->setIapItemDisplay($values['iap_item_display']);
        $message->setIapSettings($values['iap_settings']);
        $message->setPokemonUpgrades($values['pokemon_upgrades']);
        $message->setEquippedBadges($values['equipped_badges']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ItemTemplate',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'template_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'pokemon_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.PokemonSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'item_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.ItemSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'move_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.MoveSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'move_sequence_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.MoveSequenceSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'type_effective',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.TypeEffectiveSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'badge_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.BadgeSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'camera',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.CameraSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'player_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.PlayerLevelSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'gym_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.GymLevelSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'battle_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.GymBattleSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'encounter_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.EncounterSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'iap_item_display',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.IapItemDisplay'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'iap_settings',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.IapSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'pokemon_upgrades',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.PokemonUpgradeSettings'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'equipped_badges',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.EquippedBadgeSettings'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->template_id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->template_id);
        }

        if ($this->pokemon_settings !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->pokemon_settings->serializedSize($sizeContext));
            $this->pokemon_settings->writeTo($context);
        }

        if ($this->item_settings !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->item_settings->serializedSize($sizeContext));
            $this->item_settings->writeTo($context);
        }

        if ($this->move_settings !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->move_settings->serializedSize($sizeContext));
            $this->move_settings->writeTo($context);
        }

        if ($this->move_sequence_settings !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->move_sequence_settings->serializedSize($sizeContext));
            $this->move_sequence_settings->writeTo($context);
        }

        if ($this->type_effective !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->type_effective->serializedSize($sizeContext));
            $this->type_effective->writeTo($context);
        }

        if ($this->badge_settings !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->badge_settings->serializedSize($sizeContext));
            $this->badge_settings->writeTo($context);
        }

        if ($this->camera !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->camera->serializedSize($sizeContext));
            $this->camera->writeTo($context);
        }

        if ($this->player_level !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->player_level->serializedSize($sizeContext));
            $this->player_level->writeTo($context);
        }

        if ($this->gym_level !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->gym_level->serializedSize($sizeContext));
            $this->gym_level->writeTo($context);
        }

        if ($this->battle_settings !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->battle_settings->serializedSize($sizeContext));
            $this->battle_settings->writeTo($context);
        }

        if ($this->encounter_settings !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->encounter_settings->serializedSize($sizeContext));
            $this->encounter_settings->writeTo($context);
        }

        if ($this->iap_item_display !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->iap_item_display->serializedSize($sizeContext));
            $this->iap_item_display->writeTo($context);
        }

        if ($this->iap_settings !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->iap_settings->serializedSize($sizeContext));
            $this->iap_settings->writeTo($context);
        }

        if ($this->pokemon_upgrades !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeVarint($stream, $this->pokemon_upgrades->serializedSize($sizeContext));
            $this->pokemon_upgrades->writeTo($context);
        }

        if ($this->equipped_badges !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeVarint($stream, $this->equipped_badges->serializedSize($sizeContext));
            $this->equipped_badges->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->template_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\PokemonSettings();

                $this->pokemon_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\ItemSettings();

                $this->item_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\MoveSettings();

                $this->move_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\MoveSequenceSettings();

                $this->move_sequence_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\TypeEffectiveSettings();

                $this->type_effective = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\BadgeSettings();

                $this->badge_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\CameraSettings();

                $this->camera = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\PlayerLevelSettings();

                $this->player_level = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\GymLevelSettings();

                $this->gym_level = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\GymBattleSettings();

                $this->battle_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\EncounterSettings();

                $this->encounter_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\IapItemDisplay();

                $this->iap_item_display = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\IapSettings();

                $this->iap_settings = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\PokemonUpgradeSettings();

                $this->pokemon_upgrades = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\EquippedBadgeSettings();

                $this->equipped_badges = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->template_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->template_id);
        }

        if ($this->pokemon_settings !== null) {
            $innerSize = $this->pokemon_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->item_settings !== null) {
            $innerSize = $this->item_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->move_settings !== null) {
            $innerSize = $this->move_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->move_sequence_settings !== null) {
            $innerSize = $this->move_sequence_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->type_effective !== null) {
            $innerSize = $this->type_effective->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->badge_settings !== null) {
            $innerSize = $this->badge_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->camera !== null) {
            $innerSize = $this->camera->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->player_level !== null) {
            $innerSize = $this->player_level->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->gym_level !== null) {
            $innerSize = $this->gym_level->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->battle_settings !== null) {
            $innerSize = $this->battle_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->encounter_settings !== null) {
            $innerSize = $this->encounter_settings->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->iap_item_display !== null) {
            $innerSize = $this->iap_item_display->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->iap_settings !== null) {
            $innerSize = $this->iap_settings->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->pokemon_upgrades !== null) {
            $innerSize = $this->pokemon_upgrades->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->equipped_badges !== null) {
            $innerSize = $this->equipped_badges->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->template_id = null;
        $this->pokemon_settings = null;
        $this->item_settings = null;
        $this->move_settings = null;
        $this->move_sequence_settings = null;
        $this->type_effective = null;
        $this->badge_settings = null;
        $this->camera = null;
        $this->player_level = null;
        $this->gym_level = null;
        $this->battle_settings = null;
        $this->encounter_settings = null;
        $this->iap_item_display = null;
        $this->iap_settings = null;
        $this->pokemon_upgrades = null;
        $this->equipped_badges = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Responses\DownloadItemTemplatesResponse\ItemTemplate) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->template_id = ($message->template_id !== null) ? $message->template_id : $this->template_id;
        $this->pokemon_settings = ($message->pokemon_settings !== null) ? $message->pokemon_settings : $this->pokemon_settings;
        $this->item_settings = ($message->item_settings !== null) ? $message->item_settings : $this->item_settings;
        $this->move_settings = ($message->move_settings !== null) ? $message->move_settings : $this->move_settings;
        $this->move_sequence_settings = ($message->move_sequence_settings !== null) ? $message->move_sequence_settings : $this->move_sequence_settings;
        $this->type_effective = ($message->type_effective !== null) ? $message->type_effective : $this->type_effective;
        $this->badge_settings = ($message->badge_settings !== null) ? $message->badge_settings : $this->badge_settings;
        $this->camera = ($message->camera !== null) ? $message->camera : $this->camera;
        $this->player_level = ($message->player_level !== null) ? $message->player_level : $this->player_level;
        $this->gym_level = ($message->gym_level !== null) ? $message->gym_level : $this->gym_level;
        $this->battle_settings = ($message->battle_settings !== null) ? $message->battle_settings : $this->battle_settings;
        $this->encounter_settings = ($message->encounter_settings !== null) ? $message->encounter_settings : $this->encounter_settings;
        $this->iap_item_display = ($message->iap_item_display !== null) ? $message->iap_item_display : $this->iap_item_display;
        $this->iap_settings = ($message->iap_settings !== null) ? $message->iap_settings : $this->iap_settings;
        $this->pokemon_upgrades = ($message->pokemon_upgrades !== null) ? $message->pokemon_upgrades : $this->pokemon_upgrades;
        $this->equipped_badges = ($message->equipped_badges !== null) ? $message->equipped_badges : $this->equipped_badges;
    }


}

