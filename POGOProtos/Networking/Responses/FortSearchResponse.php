<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/FortSearchResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // enum POGOProtos.Networking.Responses.FortSearchResponse.Result
  abstract class FortSearchResponse_Result extends ProtobufEnum {
    const NO_RESULT_SET = 0;
    const SUCCESS = 1;
    const OUT_OF_RANGE = 2;
    const IN_COOLDOWN_PERIOD = 3;
    const INVENTORY_FULL = 4;

    public static $_values = array(
      0 => "NO_RESULT_SET",
      1 => "SUCCESS",
      2 => "OUT_OF_RANGE",
      3 => "IN_COOLDOWN_PERIOD",
      4 => "INVENTORY_FULL",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Responses.FortSearchResponse
  final class FortSearchResponse extends ProtobufMessage {

    private $_unknown;
    private $result = FortSearchResponse_Result::NO_RESULT_SET; // optional .POGOProtos.Networking.Responses.FortSearchResponse.Result result = 1
    private $itemsAwarded = array(); // repeated .POGOProtos.Inventory.Item.ItemAward items_awarded = 2
    private $gemsAwarded = 0; // optional int32 gems_awarded = 3
    private $pokemonDataEgg = null; // optional .POGOProtos.Data.PokemonData pokemon_data_egg = 4
    private $experienceAwarded = 0; // optional int32 experience_awarded = 5
    private $cooldownCompleteTimestampMs = 0; // optional int64 cooldown_complete_timestamp_ms = 6
    private $chainHackSequenceNumber = 0; // optional int32 chain_hack_sequence_number = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Networking.Responses.FortSearchResponse.Result result = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->result = $tmp;

            break;
          case 2: // repeated .POGOProtos.Inventory.Item.ItemAward items_awarded = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->itemsAwarded[] = new \POGOProtos\Inventory\Item\ItemAward($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\Item\ItemAward did not read the full length');

            break;
          case 3: // optional int32 gems_awarded = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->gemsAwarded = $tmp;

            break;
          case 4: // optional .POGOProtos.Data.PokemonData pokemon_data_egg = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonDataEgg = new \POGOProtos\Data\PokemonData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokemonData did not read the full length');

            break;
          case 5: // optional int32 experience_awarded = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->experienceAwarded = $tmp;

            break;
          case 6: // optional int64 cooldown_complete_timestamp_ms = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->cooldownCompleteTimestampMs = $tmp;

            break;
          case 7: // optional int32 chain_hack_sequence_number = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->chainHackSequenceNumber = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->result !== FortSearchResponse_Result::NO_RESULT_SET) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->result);
      }
      foreach($this->itemsAwarded as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->gemsAwarded !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->gemsAwarded);
      }
      if ($this->pokemonDataEgg !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->pokemonDataEgg->size());
        $this->pokemonDataEgg->write($fp);
      }
      if ($this->experienceAwarded !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->experienceAwarded);
      }
      if ($this->cooldownCompleteTimestampMs !== 0) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->cooldownCompleteTimestampMs);
      }
      if ($this->chainHackSequenceNumber !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->chainHackSequenceNumber);
      }
    }

    public function size() {
      $size = 0;
      if ($this->result !== FortSearchResponse_Result::NO_RESULT_SET) {
        $size += 1 + Protobuf::size_varint($this->result);
      }
      foreach($this->itemsAwarded as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->gemsAwarded !== 0) {
        $size += 1 + Protobuf::size_varint($this->gemsAwarded);
      }
      if ($this->pokemonDataEgg !== null) {
        $l = $this->pokemonDataEgg->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->experienceAwarded !== 0) {
        $size += 1 + Protobuf::size_varint($this->experienceAwarded);
      }
      if ($this->cooldownCompleteTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->cooldownCompleteTimestampMs);
      }
      if ($this->chainHackSequenceNumber !== 0) {
        $size += 1 + Protobuf::size_varint($this->chainHackSequenceNumber);
      }
      return $size;
    }

    public function clearResult() { $this->result = FortSearchResponse_Result::NO_RESULT_SET; }
    public function getResult() { return $this->result;}
    public function setResult($value) { $this->result = $value; }

    public function clearItemsAwarded() { $this->itemsAwarded = array(); }
    public function getItemsAwardedCount() { return count($this->itemsAwarded); }
    public function getItemsAwarded($index) { return $this->itemsAwarded[$index]; }
    public function getItemsAwardedArray() { return $this->itemsAwarded; }
    public function setItemsAwarded($index, array $value) {$this->itemsAwarded[$index] = $value; }
    public function addItemsAwarded(array $value) { $this->itemsAwarded[] = $value; }
    public function addAllItemsAwarded(array $values) { foreach($values as $value) {$this->itemsAwarded[] = $value; }}

    public function clearGemsAwarded() { $this->gemsAwarded = 0; }
    public function getGemsAwarded() { return $this->gemsAwarded;}
    public function setGemsAwarded($value) { $this->gemsAwarded = $value; }

    public function clearPokemonDataEgg() { $this->pokemonDataEgg = null; }
    public function getPokemonDataEgg() { return $this->pokemonDataEgg;}
    public function setPokemonDataEgg(\POGOProtos\Data\PokemonData $value) { $this->pokemonDataEgg = $value; }

    public function clearExperienceAwarded() { $this->experienceAwarded = 0; }
    public function getExperienceAwarded() { return $this->experienceAwarded;}
    public function setExperienceAwarded($value) { $this->experienceAwarded = $value; }

    public function clearCooldownCompleteTimestampMs() { $this->cooldownCompleteTimestampMs = 0; }
    public function getCooldownCompleteTimestampMs() { return $this->cooldownCompleteTimestampMs;}
    public function setCooldownCompleteTimestampMs($value) { $this->cooldownCompleteTimestampMs = $value; }

    public function clearChainHackSequenceNumber() { $this->chainHackSequenceNumber = 0; }
    public function getChainHackSequenceNumber() { return $this->chainHackSequenceNumber;}
    public function setChainHackSequenceNumber($value) { $this->chainHackSequenceNumber = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('result', $this->result, FortSearchResponse_Result::NO_RESULT_SET)
           . Protobuf::toString('items_awarded', $this->itemsAwarded, null)
           . Protobuf::toString('gems_awarded', $this->gemsAwarded, 0)
           . Protobuf::toString('pokemon_data_egg', $this->pokemonDataEgg, null)
           . Protobuf::toString('experience_awarded', $this->experienceAwarded, 0)
           . Protobuf::toString('cooldown_complete_timestamp_ms', $this->cooldownCompleteTimestampMs, 0)
           . Protobuf::toString('chain_hack_sequence_number', $this->chainHackSequenceNumber, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.FortSearchResponse)
  }

}