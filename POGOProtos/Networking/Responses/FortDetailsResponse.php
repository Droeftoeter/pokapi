<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/FortDetailsResponse.php');

namespace POGOProtos\Networking\Responses {

  use POGOProtos\Enums\TeamColor;
  use POGOProtos\Map\Fort\FortType;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Responses.FortDetailsResponse
  final class FortDetailsResponse extends ProtobufMessage {

    private $_unknown;
    private $fortId = ""; // optional string fort_id = 1
    private $teamColor = TeamColor::NEUTRAL; // optional .POGOProtos.Enums.TeamColor team_color = 2
    private $pokemonData = null; // optional .POGOProtos.Data.PokemonData pokemon_data = 3
    private $name = ""; // optional string name = 4
    private $imageUrls = array(); // repeated string image_urls = 5
    private $fp = 0; // optional int32 fp = 6
    private $stamina = 0; // optional int32 stamina = 7
    private $maxStamina = 0; // optional int32 max_stamina = 8
    private $type = FortType::GYM; // optional .POGOProtos.Map.Fort.FortType type = 9
    private $latitude = 0; // optional double latitude = 10
    private $longitude = 0; // optional double longitude = 11
    private $description = ""; // optional string description = 12
    private $modifiers = array(); // repeated .POGOProtos.Map.Fort.FortModifier modifiers = 13

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string fort_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->fortId = $tmp;

            break;
          case 2: // optional .POGOProtos.Enums.TeamColor team_color = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->teamColor = $tmp;

            break;
          case 3: // optional .POGOProtos.Data.PokemonData pokemon_data = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonData = new \POGOProtos\Data\PokemonData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokemonData did not read the full length');

            break;
          case 4: // optional string name = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->name = $tmp;

            break;
          case 5: // repeated string image_urls = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->imageUrls[] = $tmp;

            break;
          case 6: // optional int32 fp = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->fp = $tmp;

            break;
          case 7: // optional int32 stamina = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->stamina = $tmp;

            break;
          case 8: // optional int32 max_stamina = 8
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxStamina = $tmp;

            break;
          case 9: // optional .POGOProtos.Map.Fort.FortType type = 9
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->type = $tmp;

            break;
          case 10: // optional double latitude = 10
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 11: // optional double longitude = 11
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          case 12: // optional string description = 12
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->description = $tmp;

            break;
          case 13: // repeated .POGOProtos.Map.Fort.FortModifier modifiers = 13
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->modifiers[] = new \POGOProtos\Map\Fort\FortModifier($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Fort\FortModifier did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->fortId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->fortId));
        fwrite($fp, $this->fortId);
      }
      if ($this->teamColor !== TeamColor::NEUTRAL) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->teamColor);
      }
      if ($this->pokemonData !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->pokemonData->size());
        $this->pokemonData->write($fp);
      }
      if ($this->name !== "") {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, strlen($this->name));
        fwrite($fp, $this->name);
      }
      foreach($this->imageUrls as $v) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if ($this->fp !== 0) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->fp);
      }
      if ($this->stamina !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->stamina);
      }
      if ($this->maxStamina !== 0) {
        fwrite($fp, "@", 1);
        Protobuf::write_varint($fp, $this->maxStamina);
      }
      if ($this->type !== FortType::GYM) {
        fwrite($fp, "H", 1);
        Protobuf::write_varint($fp, $this->type);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "Q", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "Y", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
      if ($this->description !== "") {
        fwrite($fp, "b", 1);
        Protobuf::write_varint($fp, strlen($this->description));
        fwrite($fp, $this->description);
      }
      foreach($this->modifiers as $v) {
        fwrite($fp, "j", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->fortId !== "") {
        $l = strlen($this->fortId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->teamColor !== TeamColor::NEUTRAL) {
        $size += 1 + Protobuf::size_varint($this->teamColor);
      }
      if ($this->pokemonData !== null) {
        $l = $this->pokemonData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->name !== "") {
        $l = strlen($this->name);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->imageUrls as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->fp !== 0) {
        $size += 1 + Protobuf::size_varint($this->fp);
      }
      if ($this->stamina !== 0) {
        $size += 1 + Protobuf::size_varint($this->stamina);
      }
      if ($this->maxStamina !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxStamina);
      }
      if ($this->type !== FortType::GYM) {
        $size += 1 + Protobuf::size_varint($this->type);
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      if ($this->description !== "") {
        $l = strlen($this->description);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->modifiers as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearFortId() { $this->fortId = ""; }
    public function getFortId() { return $this->fortId;}
    public function setFortId($value) { $this->fortId = $value; }

    public function clearTeamColor() { $this->teamColor = TeamColor::NEUTRAL; }
    public function getTeamColor() { return $this->teamColor;}
    public function setTeamColor($value) { $this->teamColor = $value; }

    public function clearPokemonData() { $this->pokemonData = null; }
    public function getPokemonData() { return $this->pokemonData;}
    public function setPokemonData(\POGOProtos\Data\PokemonData $value) { $this->pokemonData = $value; }

    public function clearName() { $this->name = ""; }
    public function getName() { return $this->name;}
    public function setName($value) { $this->name = $value; }

    public function clearImageUrls() { $this->imageUrls = array(); }
    public function getImageUrlsCount() { return count($this->imageUrls); }
    public function getImageUrls($index) { return $this->imageUrls[$index]; }
    public function getImageUrlsArray() { return $this->imageUrls; }
    public function setImageUrls($index, array $value) {$this->imageUrls[$index] = $value; }
    public function addImageUrls(array $value) { $this->imageUrls[] = $value; }
    public function addAllImageUrls(array $values) { foreach($values as $value) {$this->imageUrls[] = $value; }}

    public function clearFp() { $this->fp = 0; }
    public function getFp() { return $this->fp;}
    public function setFp($value) { $this->fp = $value; }

    public function clearStamina() { $this->stamina = 0; }
    public function getStamina() { return $this->stamina;}
    public function setStamina($value) { $this->stamina = $value; }

    public function clearMaxStamina() { $this->maxStamina = 0; }
    public function getMaxStamina() { return $this->maxStamina;}
    public function setMaxStamina($value) { $this->maxStamina = $value; }

    public function clearType() { $this->type = FortType::GYM; }
    public function getType() { return $this->type;}
    public function setType($value) { $this->type = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function clearDescription() { $this->description = ""; }
    public function getDescription() { return $this->description;}
    public function setDescription($value) { $this->description = $value; }

    public function clearModifiers() { $this->modifiers = array(); }
    public function getModifiersCount() { return count($this->modifiers); }
    public function getModifiers($index) { return $this->modifiers[$index]; }
    public function getModifiersArray() { return $this->modifiers; }
    public function setModifiers($index, array $value) {$this->modifiers[$index] = $value; }
    public function addModifiers(array $value) { $this->modifiers[] = $value; }
    public function addAllModifiers(array $values) { foreach($values as $value) {$this->modifiers[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('fort_id', $this->fortId, "")
           . Protobuf::toString('team_color', $this->teamColor, TeamColor::NEUTRAL)
           . Protobuf::toString('pokemon_data', $this->pokemonData, null)
           . Protobuf::toString('name', $this->name, "")
           . Protobuf::toString('image_urls', $this->imageUrls, "")
           . Protobuf::toString('fp', $this->fp, 0)
           . Protobuf::toString('stamina', $this->stamina, 0)
           . Protobuf::toString('max_stamina', $this->maxStamina, 0)
           . Protobuf::toString('type', $this->type, FortType::GYM)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0)
           . Protobuf::toString('description', $this->description, "")
           . Protobuf::toString('modifiers', $this->modifiers, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.FortDetailsResponse)
  }

}