<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Responses.proto
 */


namespace POGOProtos\Networking\Responses\EncounterResponse;

/**
 * Protobuf enum : POGOProtos.Networking.Responses.EncounterResponse.Status
 */
class Status extends \Protobuf\Enum
{

    /**
     * ENCOUNTER_ERROR = 0
     */
    const ENCOUNTER_ERROR_VALUE = 0;

    /**
     * ENCOUNTER_SUCCESS = 1
     */
    const ENCOUNTER_SUCCESS_VALUE = 1;

    /**
     * ENCOUNTER_NOT_FOUND = 2
     */
    const ENCOUNTER_NOT_FOUND_VALUE = 2;

    /**
     * ENCOUNTER_CLOSED = 3
     */
    const ENCOUNTER_CLOSED_VALUE = 3;

    /**
     * ENCOUNTER_POKEMON_FLED = 4
     */
    const ENCOUNTER_POKEMON_FLED_VALUE = 4;

    /**
     * ENCOUNTER_NOT_IN_RANGE = 5
     */
    const ENCOUNTER_NOT_IN_RANGE_VALUE = 5;

    /**
     * ENCOUNTER_ALREADY_HAPPENED = 6
     */
    const ENCOUNTER_ALREADY_HAPPENED_VALUE = 6;

    /**
     * POKEMON_INVENTORY_FULL = 7
     */
    const POKEMON_INVENTORY_FULL_VALUE = 7;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_ERROR = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_SUCCESS = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_NOT_FOUND = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_CLOSED = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_POKEMON_FLED = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_NOT_IN_RANGE = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $ENCOUNTER_ALREADY_HAPPENED = null;

    /**
     * @var \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    protected static $POKEMON_INVENTORY_FULL = null;

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_ERROR()
    {
        if (self::$ENCOUNTER_ERROR !== null) {
            return self::$ENCOUNTER_ERROR;
        }

        return self::$ENCOUNTER_ERROR = new self('ENCOUNTER_ERROR', self::ENCOUNTER_ERROR_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_SUCCESS()
    {
        if (self::$ENCOUNTER_SUCCESS !== null) {
            return self::$ENCOUNTER_SUCCESS;
        }

        return self::$ENCOUNTER_SUCCESS = new self('ENCOUNTER_SUCCESS', self::ENCOUNTER_SUCCESS_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_NOT_FOUND()
    {
        if (self::$ENCOUNTER_NOT_FOUND !== null) {
            return self::$ENCOUNTER_NOT_FOUND;
        }

        return self::$ENCOUNTER_NOT_FOUND = new self('ENCOUNTER_NOT_FOUND', self::ENCOUNTER_NOT_FOUND_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_CLOSED()
    {
        if (self::$ENCOUNTER_CLOSED !== null) {
            return self::$ENCOUNTER_CLOSED;
        }

        return self::$ENCOUNTER_CLOSED = new self('ENCOUNTER_CLOSED', self::ENCOUNTER_CLOSED_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_POKEMON_FLED()
    {
        if (self::$ENCOUNTER_POKEMON_FLED !== null) {
            return self::$ENCOUNTER_POKEMON_FLED;
        }

        return self::$ENCOUNTER_POKEMON_FLED = new self('ENCOUNTER_POKEMON_FLED', self::ENCOUNTER_POKEMON_FLED_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_NOT_IN_RANGE()
    {
        if (self::$ENCOUNTER_NOT_IN_RANGE !== null) {
            return self::$ENCOUNTER_NOT_IN_RANGE;
        }

        return self::$ENCOUNTER_NOT_IN_RANGE = new self('ENCOUNTER_NOT_IN_RANGE', self::ENCOUNTER_NOT_IN_RANGE_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function ENCOUNTER_ALREADY_HAPPENED()
    {
        if (self::$ENCOUNTER_ALREADY_HAPPENED !== null) {
            return self::$ENCOUNTER_ALREADY_HAPPENED;
        }

        return self::$ENCOUNTER_ALREADY_HAPPENED = new self('ENCOUNTER_ALREADY_HAPPENED', self::ENCOUNTER_ALREADY_HAPPENED_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function POKEMON_INVENTORY_FULL()
    {
        if (self::$POKEMON_INVENTORY_FULL !== null) {
            return self::$POKEMON_INVENTORY_FULL;
        }

        return self::$POKEMON_INVENTORY_FULL = new self('POKEMON_INVENTORY_FULL', self::POKEMON_INVENTORY_FULL_VALUE);
    }

    /**
     * @param int $value
     * @return \POGOProtos\Networking\Responses\EncounterResponse\Status
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::ENCOUNTER_ERROR();
            case 1: return self::ENCOUNTER_SUCCESS();
            case 2: return self::ENCOUNTER_NOT_FOUND();
            case 3: return self::ENCOUNTER_CLOSED();
            case 4: return self::ENCOUNTER_POKEMON_FLED();
            case 5: return self::ENCOUNTER_NOT_IN_RANGE();
            case 6: return self::ENCOUNTER_ALREADY_HAPPENED();
            case 7: return self::POKEMON_INVENTORY_FULL();
            default: return null;
        }
    }


}

