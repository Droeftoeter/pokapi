<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Responses.proto
 */


namespace POGOProtos\Networking\Responses\DiskEncounterResponse;

/**
 * Protobuf enum : POGOProtos.Networking.Responses.DiskEncounterResponse.Result
 */
class Result extends \Protobuf\Enum
{

    /**
     * UNKNOWN = 0
     */
    const UNKNOWN_VALUE = 0;

    /**
     * SUCCESS = 1
     */
    const SUCCESS_VALUE = 1;

    /**
     * NOT_AVAILABLE = 2
     */
    const NOT_AVAILABLE_VALUE = 2;

    /**
     * NOT_IN_RANGE = 3
     */
    const NOT_IN_RANGE_VALUE = 3;

    /**
     * ENCOUNTER_ALREADY_FINISHED = 4
     */
    const ENCOUNTER_ALREADY_FINISHED_VALUE = 4;

    /**
     * POKEMON_INVENTORY_FULL = 5
     */
    const POKEMON_INVENTORY_FULL_VALUE = 5;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $UNKNOWN = null;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $SUCCESS = null;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $NOT_AVAILABLE = null;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $NOT_IN_RANGE = null;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $ENCOUNTER_ALREADY_FINISHED = null;

    /**
     * @var \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    protected static $POKEMON_INVENTORY_FULL = null;

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function UNKNOWN()
    {
        if (self::$UNKNOWN !== null) {
            return self::$UNKNOWN;
        }

        return self::$UNKNOWN = new self('UNKNOWN', self::UNKNOWN_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function SUCCESS()
    {
        if (self::$SUCCESS !== null) {
            return self::$SUCCESS;
        }

        return self::$SUCCESS = new self('SUCCESS', self::SUCCESS_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function NOT_AVAILABLE()
    {
        if (self::$NOT_AVAILABLE !== null) {
            return self::$NOT_AVAILABLE;
        }

        return self::$NOT_AVAILABLE = new self('NOT_AVAILABLE', self::NOT_AVAILABLE_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function NOT_IN_RANGE()
    {
        if (self::$NOT_IN_RANGE !== null) {
            return self::$NOT_IN_RANGE;
        }

        return self::$NOT_IN_RANGE = new self('NOT_IN_RANGE', self::NOT_IN_RANGE_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function ENCOUNTER_ALREADY_FINISHED()
    {
        if (self::$ENCOUNTER_ALREADY_FINISHED !== null) {
            return self::$ENCOUNTER_ALREADY_FINISHED;
        }

        return self::$ENCOUNTER_ALREADY_FINISHED = new self('ENCOUNTER_ALREADY_FINISHED', self::ENCOUNTER_ALREADY_FINISHED_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function POKEMON_INVENTORY_FULL()
    {
        if (self::$POKEMON_INVENTORY_FULL !== null) {
            return self::$POKEMON_INVENTORY_FULL;
        }

        return self::$POKEMON_INVENTORY_FULL = new self('POKEMON_INVENTORY_FULL', self::POKEMON_INVENTORY_FULL_VALUE);
    }

    /**
     * @param int $value
     * @return \POGOProtos\Networking\Responses\DiskEncounterResponse\Result
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::UNKNOWN();
            case 1: return self::SUCCESS();
            case 2: return self::NOT_AVAILABLE();
            case 3: return self::NOT_IN_RANGE();
            case 4: return self::ENCOUNTER_ALREADY_FINISHED();
            case 5: return self::POKEMON_INVENTORY_FULL();
            default: return null;
        }
    }


}

