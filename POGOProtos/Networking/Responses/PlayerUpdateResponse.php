<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/PlayerUpdateResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Responses.PlayerUpdateResponse
  final class PlayerUpdateResponse extends ProtobufMessage {

    private $_unknown;
    private $wildPokemons = array(); // repeated .POGOProtos.Map.Pokemon.WildPokemon wild_pokemons = 1
    private $forts = array(); // repeated .POGOProtos.Map.Fort.FortData forts = 2
    private $fortsNearby = 0; // optional int32 forts_nearby = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated .POGOProtos.Map.Pokemon.WildPokemon wild_pokemons = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->wildPokemons[] = new \POGOProtos\Map\Pokemon\WildPokemon($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Pokemon\WildPokemon did not read the full length');

            break;
          case 2: // repeated .POGOProtos.Map.Fort.FortData forts = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->forts[] = new \POGOProtos\Map\Fort\FortData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\Fort\FortData did not read the full length');

            break;
          case 3: // optional int32 forts_nearby = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->fortsNearby = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->wildPokemons as $v) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->forts as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->fortsNearby !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->fortsNearby);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->wildPokemons as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->forts as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->fortsNearby !== 0) {
        $size += 1 + Protobuf::size_varint($this->fortsNearby);
      }
      return $size;
    }

    public function clearWildPokemons() { $this->wildPokemons = array(); }
    public function getWildPokemonsCount() { return count($this->wildPokemons); }
    public function getWildPokemons($index) { return $this->wildPokemons[$index]; }
    public function getWildPokemonsArray() { return $this->wildPokemons; }
    public function setWildPokemons($index, array $value) {$this->wildPokemons[$index] = $value; }
    public function addWildPokemons(array $value) { $this->wildPokemons[] = $value; }
    public function addAllWildPokemons(array $values) { foreach($values as $value) {$this->wildPokemons[] = $value; }}

    public function clearForts() { $this->forts = array(); }
    public function getFortsCount() { return count($this->forts); }
    public function getForts($index) { return $this->forts[$index]; }
    public function getFortsArray() { return $this->forts; }
    public function setForts($index, array $value) {$this->forts[$index] = $value; }
    public function addForts(array $value) { $this->forts[] = $value; }
    public function addAllForts(array $values) { foreach($values as $value) {$this->forts[] = $value; }}

    public function clearFortsNearby() { $this->fortsNearby = 0; }
    public function getFortsNearby() { return $this->fortsNearby;}
    public function setFortsNearby($value) { $this->fortsNearby = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('wild_pokemons', $this->wildPokemons, null)
           . Protobuf::toString('forts', $this->forts, null)
           . Protobuf::toString('forts_nearby', $this->fortsNearby, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.PlayerUpdateResponse)
  }

}