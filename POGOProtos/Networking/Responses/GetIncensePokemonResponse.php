<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/GetIncensePokemonResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // enum POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result
  abstract class GetIncensePokemonResponse_Result extends ProtobufEnum {
    const INCENSE_ENCOUNTER_UNKNOWN = 0;
    const INCENSE_ENCOUNTER_AVAILABLE = 1;
    const INCENSE_ENCOUNTER_NOT_AVAILABLE = 2;

    public static $_values = array(
      0 => "INCENSE_ENCOUNTER_UNKNOWN",
      1 => "INCENSE_ENCOUNTER_AVAILABLE",
      2 => "INCENSE_ENCOUNTER_NOT_AVAILABLE",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Responses.GetIncensePokemonResponse
  final class GetIncensePokemonResponse extends ProtobufMessage {

    private $_unknown;
    private $result = GetIncensePokemonResponse_Result::INCENSE_ENCOUNTER_UNKNOWN; // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1
    private $pokemonTypeId = 0; // optional int32 pokemon_type_id = 2
    private $latitude = 0; // optional double latitude = 3
    private $longitude = 0; // optional double longitude = 4
    private $encounterLocation = ""; // optional string encounter_location = 5
    private $encounterId = 0; // optional fixed64 encounter_id = 6
    private $disappearTimestampMs = 0; // optional int64 disappear_timestamp_ms = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Networking.Responses.GetIncensePokemonResponse.Result result = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->result = $tmp;

            break;
          case 2: // optional int32 pokemon_type_id = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->pokemonTypeId = $tmp;

            break;
          case 3: // optional double latitude = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 4: // optional double longitude = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          case 5: // optional string encounter_location = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->encounterLocation = $tmp;

            break;
          case 6: // optional fixed64 encounter_id = 6
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_uint64($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
            $this->encounterId = $tmp;

            break;
          case 7: // optional int64 disappear_timestamp_ms = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->disappearTimestampMs = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->result !== GetIncensePokemonResponse_Result::INCENSE_ENCOUNTER_UNKNOWN) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->result);
      }
      if ($this->pokemonTypeId !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->pokemonTypeId);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
      if ($this->encounterLocation !== "") {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, strlen($this->encounterLocation));
        fwrite($fp, $this->encounterLocation);
      }
      if ($this->encounterId !== 0) {
        fwrite($fp, "1", 1);
        Protobuf::write_uint64($fp, $this->encounterId);
      }
      if ($this->disappearTimestampMs !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->disappearTimestampMs);
      }
    }

    public function size() {
      $size = 0;
      if ($this->result !== GetIncensePokemonResponse_Result::INCENSE_ENCOUNTER_UNKNOWN) {
        $size += 1 + Protobuf::size_varint($this->result);
      }
      if ($this->pokemonTypeId !== 0) {
        $size += 1 + Protobuf::size_varint($this->pokemonTypeId);
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      if ($this->encounterLocation !== "") {
        $l = strlen($this->encounterLocation);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->encounterId !== 0) {
        $size += 9;
      }
      if ($this->disappearTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->disappearTimestampMs);
      }
      return $size;
    }

    public function clearResult() { $this->result = GetIncensePokemonResponse_Result::INCENSE_ENCOUNTER_UNKNOWN; }
    public function getResult() { return $this->result;}
    public function setResult($value) { $this->result = $value; }

    public function clearPokemonTypeId() { $this->pokemonTypeId = 0; }
    public function getPokemonTypeId() { return $this->pokemonTypeId;}
    public function setPokemonTypeId($value) { $this->pokemonTypeId = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function clearEncounterLocation() { $this->encounterLocation = ""; }
    public function getEncounterLocation() { return $this->encounterLocation;}
    public function setEncounterLocation($value) { $this->encounterLocation = $value; }

    public function clearEncounterId() { $this->encounterId = 0; }
    public function getEncounterId() { return $this->encounterId;}
    public function setEncounterId($value) { $this->encounterId = $value; }

    public function clearDisappearTimestampMs() { $this->disappearTimestampMs = 0; }
    public function getDisappearTimestampMs() { return $this->disappearTimestampMs;}
    public function setDisappearTimestampMs($value) { $this->disappearTimestampMs = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('result', $this->result, GetIncensePokemonResponse_Result::INCENSE_ENCOUNTER_UNKNOWN)
           . Protobuf::toString('pokemon_type_id', $this->pokemonTypeId, 0)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0)
           . Protobuf::toString('encounter_location', $this->encounterLocation, "")
           . Protobuf::toString('encounter_id', $this->encounterId, 0)
           . Protobuf::toString('disappear_timestamp_ms', $this->disappearTimestampMs, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.GetIncensePokemonResponse)
  }

}