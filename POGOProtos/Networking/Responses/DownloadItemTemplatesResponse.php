<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/DownloadItemTemplatesResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate
  final class DownloadItemTemplatesResponse_ItemTemplate extends ProtobufMessage {

    private $_unknown;
    private $templateId = ""; // optional string template_id = 1
    private $pokemonSettings = null; // optional .POGOProtos.Settings.Master.PokemonSettings pokemon_settings = 2
    private $itemSettings = null; // optional .POGOProtos.Settings.Master.ItemSettings item_settings = 3
    private $moveSettings = null; // optional .POGOProtos.Settings.Master.MoveSettings move_settings = 4
    private $moveSequenceSettings = null; // optional .POGOProtos.Settings.Master.MoveSequenceSettings move_sequence_settings = 5
    private $typeEffective = null; // optional .POGOProtos.Settings.Master.TypeEffectiveSettings type_effective = 8
    private $badgeSettings = null; // optional .POGOProtos.Settings.Master.BadgeSettings badge_settings = 10
    private $camera = null; // optional .POGOProtos.Settings.Master.CameraSettings camera = 11
    private $playerLevel = null; // optional .POGOProtos.Settings.Master.PlayerLevelSettings player_level = 12
    private $gymLevel = null; // optional .POGOProtos.Settings.Master.GymLevelSettings gym_level = 13
    private $battleSettings = null; // optional .POGOProtos.Settings.Master.GymBattleSettings battle_settings = 14
    private $encounterSettings = null; // optional .POGOProtos.Settings.Master.EncounterSettings encounter_settings = 15
    private $iapItemDisplay = null; // optional .POGOProtos.Settings.Master.IapItemDisplay iap_item_display = 16
    private $iapSettings = null; // optional .POGOProtos.Settings.Master.IapSettings iap_settings = 17
    private $pokemonUpgrades = null; // optional .POGOProtos.Settings.Master.PokemonUpgradeSettings pokemon_upgrades = 18
    private $equippedBadges = null; // optional .POGOProtos.Settings.Master.EquippedBadgeSettings equipped_badges = 19

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string template_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->templateId = $tmp;

            break;
          case 2: // optional .POGOProtos.Settings.Master.PokemonSettings pokemon_settings = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonSettings = new \POGOProtos\Settings\Master\PokemonSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\PokemonSettings did not read the full length');

            break;
          case 3: // optional .POGOProtos.Settings.Master.ItemSettings item_settings = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->itemSettings = new \POGOProtos\Settings\Master\ItemSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\ItemSettings did not read the full length');

            break;
          case 4: // optional .POGOProtos.Settings.Master.MoveSettings move_settings = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->moveSettings = new \POGOProtos\Settings\Master\MoveSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\MoveSettings did not read the full length');

            break;
          case 5: // optional .POGOProtos.Settings.Master.MoveSequenceSettings move_sequence_settings = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->moveSequenceSettings = new \POGOProtos\Settings\Master\MoveSequenceSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\MoveSequenceSettings did not read the full length');

            break;
          case 8: // optional .POGOProtos.Settings.Master.TypeEffectiveSettings type_effective = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->typeEffective = new \POGOProtos\Settings\Master\TypeEffectiveSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\TypeEffectiveSettings did not read the full length');

            break;
          case 10: // optional .POGOProtos.Settings.Master.BadgeSettings badge_settings = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->badgeSettings = new \POGOProtos\Settings\Master\BadgeSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\BadgeSettings did not read the full length');

            break;
          case 11: // optional .POGOProtos.Settings.Master.CameraSettings camera = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->camera = new \POGOProtos\Settings\Master\CameraSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\CameraSettings did not read the full length');

            break;
          case 12: // optional .POGOProtos.Settings.Master.PlayerLevelSettings player_level = 12
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->playerLevel = new \POGOProtos\Settings\Master\PlayerLevelSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\PlayerLevelSettings did not read the full length');

            break;
          case 13: // optional .POGOProtos.Settings.Master.GymLevelSettings gym_level = 13
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->gymLevel = new \POGOProtos\Settings\Master\GymLevelSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\GymLevelSettings did not read the full length');

            break;
          case 14: // optional .POGOProtos.Settings.Master.GymBattleSettings battle_settings = 14
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->battleSettings = new \POGOProtos\Settings\Master\GymBattleSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\GymBattleSettings did not read the full length');

            break;
          case 15: // optional .POGOProtos.Settings.Master.EncounterSettings encounter_settings = 15
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->encounterSettings = new \POGOProtos\Settings\Master\EncounterSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\EncounterSettings did not read the full length');

            break;
          case 16: // optional .POGOProtos.Settings.Master.IapItemDisplay iap_item_display = 16
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->iapItemDisplay = new \POGOProtos\Settings\Master\IapItemDisplay($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\IapItemDisplay did not read the full length');

            break;
          case 17: // optional .POGOProtos.Settings.Master.IapSettings iap_settings = 17
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->iapSettings = new \POGOProtos\Settings\Master\IapSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\IapSettings did not read the full length');

            break;
          case 18: // optional .POGOProtos.Settings.Master.PokemonUpgradeSettings pokemon_upgrades = 18
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonUpgrades = new \POGOProtos\Settings\Master\PokemonUpgradeSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\PokemonUpgradeSettings did not read the full length');

            break;
          case 19: // optional .POGOProtos.Settings.Master.EquippedBadgeSettings equipped_badges = 19
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->equippedBadges = new \POGOProtos\Settings\Master\EquippedBadgeSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\EquippedBadgeSettings did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->templateId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->templateId));
        fwrite($fp, $this->templateId);
      }
      if ($this->pokemonSettings !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->pokemonSettings->size());
        $this->pokemonSettings->write($fp);
      }
      if ($this->itemSettings !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->itemSettings->size());
        $this->itemSettings->write($fp);
      }
      if ($this->moveSettings !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->moveSettings->size());
        $this->moveSettings->write($fp);
      }
      if ($this->moveSequenceSettings !== null) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->moveSequenceSettings->size());
        $this->moveSequenceSettings->write($fp);
      }
      if ($this->typeEffective !== null) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->typeEffective->size());
        $this->typeEffective->write($fp);
      }
      if ($this->badgeSettings !== null) {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, $this->badgeSettings->size());
        $this->badgeSettings->write($fp);
      }
      if ($this->camera !== null) {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, $this->camera->size());
        $this->camera->write($fp);
      }
      if ($this->playerLevel !== null) {
        fwrite($fp, "b", 1);
        Protobuf::write_varint($fp, $this->playerLevel->size());
        $this->playerLevel->write($fp);
      }
      if ($this->gymLevel !== null) {
        fwrite($fp, "j", 1);
        Protobuf::write_varint($fp, $this->gymLevel->size());
        $this->gymLevel->write($fp);
      }
      if ($this->battleSettings !== null) {
        fwrite($fp, "r", 1);
        Protobuf::write_varint($fp, $this->battleSettings->size());
        $this->battleSettings->write($fp);
      }
      if ($this->encounterSettings !== null) {
        fwrite($fp, "z", 1);
        Protobuf::write_varint($fp, $this->encounterSettings->size());
        $this->encounterSettings->write($fp);
      }
      if ($this->iapItemDisplay !== null) {
        fwrite($fp, "\x82\x01", 2);
        Protobuf::write_varint($fp, $this->iapItemDisplay->size());
        $this->iapItemDisplay->write($fp);
      }
      if ($this->iapSettings !== null) {
        fwrite($fp, "\x8a\x01", 2);
        Protobuf::write_varint($fp, $this->iapSettings->size());
        $this->iapSettings->write($fp);
      }
      if ($this->pokemonUpgrades !== null) {
        fwrite($fp, "\x92\x01", 2);
        Protobuf::write_varint($fp, $this->pokemonUpgrades->size());
        $this->pokemonUpgrades->write($fp);
      }
      if ($this->equippedBadges !== null) {
        fwrite($fp, "\x9a\x01", 2);
        Protobuf::write_varint($fp, $this->equippedBadges->size());
        $this->equippedBadges->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->templateId !== "") {
        $l = strlen($this->templateId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->pokemonSettings !== null) {
        $l = $this->pokemonSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->itemSettings !== null) {
        $l = $this->itemSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->moveSettings !== null) {
        $l = $this->moveSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->moveSequenceSettings !== null) {
        $l = $this->moveSequenceSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->typeEffective !== null) {
        $l = $this->typeEffective->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->badgeSettings !== null) {
        $l = $this->badgeSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->camera !== null) {
        $l = $this->camera->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->playerLevel !== null) {
        $l = $this->playerLevel->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->gymLevel !== null) {
        $l = $this->gymLevel->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->battleSettings !== null) {
        $l = $this->battleSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->encounterSettings !== null) {
        $l = $this->encounterSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->iapItemDisplay !== null) {
        $l = $this->iapItemDisplay->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->iapSettings !== null) {
        $l = $this->iapSettings->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->pokemonUpgrades !== null) {
        $l = $this->pokemonUpgrades->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->equippedBadges !== null) {
        $l = $this->equippedBadges->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearTemplateId() { $this->templateId = ""; }
    public function getTemplateId() { return $this->templateId;}
    public function setTemplateId($value) { $this->templateId = $value; }

    public function clearPokemonSettings() { $this->pokemonSettings = null; }
    public function getPokemonSettings() { return $this->pokemonSettings;}
    public function setPokemonSettings(\POGOProtos\Settings\Master\PokemonSettings $value) { $this->pokemonSettings = $value; }

    public function clearItemSettings() { $this->itemSettings = null; }
    public function getItemSettings() { return $this->itemSettings;}
    public function setItemSettings(\POGOProtos\Settings\Master\ItemSettings $value) { $this->itemSettings = $value; }

    public function clearMoveSettings() { $this->moveSettings = null; }
    public function getMoveSettings() { return $this->moveSettings;}
    public function setMoveSettings(\POGOProtos\Settings\Master\MoveSettings $value) { $this->moveSettings = $value; }

    public function clearMoveSequenceSettings() { $this->moveSequenceSettings = null; }
    public function getMoveSequenceSettings() { return $this->moveSequenceSettings;}
    public function setMoveSequenceSettings(\POGOProtos\Settings\Master\MoveSequenceSettings $value) { $this->moveSequenceSettings = $value; }

    public function clearTypeEffective() { $this->typeEffective = null; }
    public function getTypeEffective() { return $this->typeEffective;}
    public function setTypeEffective(\POGOProtos\Settings\Master\TypeEffectiveSettings $value) { $this->typeEffective = $value; }

    public function clearBadgeSettings() { $this->badgeSettings = null; }
    public function getBadgeSettings() { return $this->badgeSettings;}
    public function setBadgeSettings(\POGOProtos\Settings\Master\BadgeSettings $value) { $this->badgeSettings = $value; }

    public function clearCamera() { $this->camera = null; }
    public function getCamera() { return $this->camera;}
    public function setCamera(\POGOProtos\Settings\Master\CameraSettings $value) { $this->camera = $value; }

    public function clearPlayerLevel() { $this->playerLevel = null; }
    public function getPlayerLevel() { return $this->playerLevel;}
    public function setPlayerLevel(\POGOProtos\Settings\Master\PlayerLevelSettings $value) { $this->playerLevel = $value; }

    public function clearGymLevel() { $this->gymLevel = null; }
    public function getGymLevel() { return $this->gymLevel;}
    public function setGymLevel(\POGOProtos\Settings\Master\GymLevelSettings $value) { $this->gymLevel = $value; }

    public function clearBattleSettings() { $this->battleSettings = null; }
    public function getBattleSettings() { return $this->battleSettings;}
    public function setBattleSettings(\POGOProtos\Settings\Master\GymBattleSettings $value) { $this->battleSettings = $value; }

    public function clearEncounterSettings() { $this->encounterSettings = null; }
    public function getEncounterSettings() { return $this->encounterSettings;}
    public function setEncounterSettings(\POGOProtos\Settings\Master\EncounterSettings $value) { $this->encounterSettings = $value; }

    public function clearIapItemDisplay() { $this->iapItemDisplay = null; }
    public function getIapItemDisplay() { return $this->iapItemDisplay;}
    public function setIapItemDisplay(\POGOProtos\Settings\Master\IapItemDisplay $value) { $this->iapItemDisplay = $value; }

    public function clearIapSettings() { $this->iapSettings = null; }
    public function getIapSettings() { return $this->iapSettings;}
    public function setIapSettings(\POGOProtos\Settings\Master\IapSettings $value) { $this->iapSettings = $value; }

    public function clearPokemonUpgrades() { $this->pokemonUpgrades = null; }
    public function getPokemonUpgrades() { return $this->pokemonUpgrades;}
    public function setPokemonUpgrades(\POGOProtos\Settings\Master\PokemonUpgradeSettings $value) { $this->pokemonUpgrades = $value; }

    public function clearEquippedBadges() { $this->equippedBadges = null; }
    public function getEquippedBadges() { return $this->equippedBadges;}
    public function setEquippedBadges(\POGOProtos\Settings\Master\EquippedBadgeSettings $value) { $this->equippedBadges = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('template_id', $this->templateId, "")
           . Protobuf::toString('pokemon_settings', $this->pokemonSettings, null)
           . Protobuf::toString('item_settings', $this->itemSettings, null)
           . Protobuf::toString('move_settings', $this->moveSettings, null)
           . Protobuf::toString('move_sequence_settings', $this->moveSequenceSettings, null)
           . Protobuf::toString('type_effective', $this->typeEffective, null)
           . Protobuf::toString('badge_settings', $this->badgeSettings, null)
           . Protobuf::toString('camera', $this->camera, null)
           . Protobuf::toString('player_level', $this->playerLevel, null)
           . Protobuf::toString('gym_level', $this->gymLevel, null)
           . Protobuf::toString('battle_settings', $this->battleSettings, null)
           . Protobuf::toString('encounter_settings', $this->encounterSettings, null)
           . Protobuf::toString('iap_item_display', $this->iapItemDisplay, null)
           . Protobuf::toString('iap_settings', $this->iapSettings, null)
           . Protobuf::toString('pokemon_upgrades', $this->pokemonUpgrades, null)
           . Protobuf::toString('equipped_badges', $this->equippedBadges, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate)
  }

  // message POGOProtos.Networking.Responses.DownloadItemTemplatesResponse
  final class DownloadItemTemplatesResponse extends ProtobufMessage {

    private $_unknown;
    private $success = false; // optional bool success = 1
    private $itemTemplates = array(); // repeated .POGOProtos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate item_templates = 2
    private $timestampMs = 0; // optional uint64 timestamp_ms = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional bool success = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->success = ($tmp > 0) ? true : false;

            break;
          case 2: // repeated .POGOProtos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate item_templates = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->itemTemplates[] = new \POGOProtos\Networking\Responses\DownloadItemTemplatesResponse_ItemTemplate($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Responses\DownloadItemTemplatesResponse_ItemTemplate did not read the full length');

            break;
          case 3: // optional uint64 timestamp_ms = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timestampMs = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->success !== false) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->success ? 1 : 0);
      }
      foreach($this->itemTemplates as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->timestampMs !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->timestampMs);
      }
    }

    public function size() {
      $size = 0;
      if ($this->success !== false) {
        $size += 2;
      }
      foreach($this->itemTemplates as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->timestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->timestampMs);
      }
      return $size;
    }

    public function clearSuccess() { $this->success = false; }
    public function getSuccess() { return $this->success;}
    public function setSuccess($value) { $this->success = $value; }

    public function clearItemTemplates() { $this->itemTemplates = array(); }
    public function getItemTemplatesCount() { return count($this->itemTemplates); }
    public function getItemTemplates($index) { return $this->itemTemplates[$index]; }
    public function getItemTemplatesArray() { return $this->itemTemplates; }
    public function setItemTemplates($index, array $value) {$this->itemTemplates[$index] = $value; }
    public function addItemTemplates(array $value) { $this->itemTemplates[] = $value; }
    public function addAllItemTemplates(array $values) { foreach($values as $value) {$this->itemTemplates[] = $value; }}

    public function clearTimestampMs() { $this->timestampMs = 0; }
    public function getTimestampMs() { return $this->timestampMs;}
    public function setTimestampMs($value) { $this->timestampMs = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('success', $this->success, false)
           . Protobuf::toString('item_templates', $this->itemTemplates, null)
           . Protobuf::toString('timestamp_ms', $this->timestampMs, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.DownloadItemTemplatesResponse)
  }

}