<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Responses.proto
 */


namespace POGOProtos\Networking\Responses\CheckCodenameAvailableResponse;

/**
 * Protobuf enum :
 * POGOProtos.Networking.Responses.CheckCodenameAvailableResponse.Status
 */
class Status extends \Protobuf\Enum
{

    /**
     * UNSET = 0
     */
    const UNSET_VALUE = 0;

    /**
     * SUCCESS = 1
     */
    const SUCCESS_VALUE = 1;

    /**
     * CODENAME_NOT_AVAILABLE = 2
     */
    const CODENAME_NOT_AVAILABLE_VALUE = 2;

    /**
     * CODENAME_NOT_VALID = 3
     */
    const CODENAME_NOT_VALID_VALUE = 3;

    /**
     * CURRENT_OWNER = 4
     */
    const CURRENT_OWNER_VALUE = 4;

    /**
     * CODENAME_CHANGE_NOT_ALLOWED = 5
     */
    const CODENAME_CHANGE_NOT_ALLOWED_VALUE = 5;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $UNSET = null;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $SUCCESS = null;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $CODENAME_NOT_AVAILABLE = null;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $CODENAME_NOT_VALID = null;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $CURRENT_OWNER = null;

    /**
     * @var \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    protected static $CODENAME_CHANGE_NOT_ALLOWED = null;

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function UNSET()
    {
        if (self::$UNSET !== null) {
            return self::$UNSET;
        }

        return self::$UNSET = new self('UNSET', self::UNSET_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function SUCCESS()
    {
        if (self::$SUCCESS !== null) {
            return self::$SUCCESS;
        }

        return self::$SUCCESS = new self('SUCCESS', self::SUCCESS_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function CODENAME_NOT_AVAILABLE()
    {
        if (self::$CODENAME_NOT_AVAILABLE !== null) {
            return self::$CODENAME_NOT_AVAILABLE;
        }

        return self::$CODENAME_NOT_AVAILABLE = new self('CODENAME_NOT_AVAILABLE', self::CODENAME_NOT_AVAILABLE_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function CODENAME_NOT_VALID()
    {
        if (self::$CODENAME_NOT_VALID !== null) {
            return self::$CODENAME_NOT_VALID;
        }

        return self::$CODENAME_NOT_VALID = new self('CODENAME_NOT_VALID', self::CODENAME_NOT_VALID_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function CURRENT_OWNER()
    {
        if (self::$CURRENT_OWNER !== null) {
            return self::$CURRENT_OWNER;
        }

        return self::$CURRENT_OWNER = new self('CURRENT_OWNER', self::CURRENT_OWNER_VALUE);
    }

    /**
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function CODENAME_CHANGE_NOT_ALLOWED()
    {
        if (self::$CODENAME_CHANGE_NOT_ALLOWED !== null) {
            return self::$CODENAME_CHANGE_NOT_ALLOWED;
        }

        return self::$CODENAME_CHANGE_NOT_ALLOWED = new self('CODENAME_CHANGE_NOT_ALLOWED', self::CODENAME_CHANGE_NOT_ALLOWED_VALUE);
    }

    /**
     * @param int $value
     * @return \POGOProtos\Networking\Responses\CheckCodenameAvailableResponse\Status
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 0: return self::UNSET();
            case 1: return self::SUCCESS();
            case 2: return self::CODENAME_NOT_AVAILABLE();
            case 3: return self::CODENAME_NOT_VALID();
            case 4: return self::CURRENT_OWNER();
            case 5: return self::CODENAME_CHANGE_NOT_ALLOWED();
            default: return null;
        }
    }


}

