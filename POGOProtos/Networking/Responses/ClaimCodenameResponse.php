<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/ClaimCodenameResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // enum POGOProtos.Networking.Responses.ClaimCodenameResponse.Status
  abstract class ClaimCodenameResponse_Status extends ProtobufEnum {
    const UNSET = 0;
    const SUCCESS = 1;
    const CODENAME_NOT_AVAILABLE = 2;
    const CODENAME_NOT_VALID = 3;
    const CURRENT_OWNER = 4;
    const CODENAME_CHANGE_NOT_ALLOWED = 5;

    public static $_values = array(
      0 => "UNSET",
      1 => "SUCCESS",
      2 => "CODENAME_NOT_AVAILABLE",
      3 => "CODENAME_NOT_VALID",
      4 => "CURRENT_OWNER",
      5 => "CODENAME_CHANGE_NOT_ALLOWED",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Responses.ClaimCodenameResponse
  final class ClaimCodenameResponse extends ProtobufMessage {

    private $_unknown;
    private $codename = ""; // optional string codename = 1
    private $userMessage = ""; // optional string user_message = 2
    private $isAssignable = false; // optional bool is_assignable = 3
    private $status = ClaimCodenameResponse_Status::UNSET; // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string codename = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->codename = $tmp;

            break;
          case 2: // optional string user_message = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->userMessage = $tmp;

            break;
          case 3: // optional bool is_assignable = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->isAssignable = ($tmp > 0) ? true : false;

            break;
          case 4: // optional .POGOProtos.Networking.Responses.ClaimCodenameResponse.Status status = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->status = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->codename !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->codename));
        fwrite($fp, $this->codename);
      }
      if ($this->userMessage !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->userMessage));
        fwrite($fp, $this->userMessage);
      }
      if ($this->isAssignable !== false) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->isAssignable ? 1 : 0);
      }
      if ($this->status !== ClaimCodenameResponse_Status::UNSET) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->status);
      }
    }

    public function size() {
      $size = 0;
      if ($this->codename !== "") {
        $l = strlen($this->codename);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->userMessage !== "") {
        $l = strlen($this->userMessage);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->isAssignable !== false) {
        $size += 2;
      }
      if ($this->status !== ClaimCodenameResponse_Status::UNSET) {
        $size += 1 + Protobuf::size_varint($this->status);
      }
      return $size;
    }

    public function clearCodename() { $this->codename = ""; }
    public function getCodename() { return $this->codename;}
    public function setCodename($value) { $this->codename = $value; }

    public function clearUserMessage() { $this->userMessage = ""; }
    public function getUserMessage() { return $this->userMessage;}
    public function setUserMessage($value) { $this->userMessage = $value; }

    public function clearIsAssignable() { $this->isAssignable = false; }
    public function getIsAssignable() { return $this->isAssignable;}
    public function setIsAssignable($value) { $this->isAssignable = $value; }

    public function clearStatus() { $this->status = ClaimCodenameResponse_Status::UNSET; }
    public function getStatus() { return $this->status;}
    public function setStatus($value) { $this->status = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('codename', $this->codename, "")
           . Protobuf::toString('user_message', $this->userMessage, "")
           . Protobuf::toString('is_assignable', $this->isAssignable, false)
           . Protobuf::toString('status', $this->status, ClaimCodenameResponse_Status::UNSET);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.ClaimCodenameResponse)
  }

}