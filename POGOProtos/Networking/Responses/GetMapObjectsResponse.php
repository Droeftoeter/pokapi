<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/GetMapObjectsResponse.php');

namespace POGOProtos\Networking\Responses {

  use POGOProtos\Map\MapObjectsStatus;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Responses.GetMapObjectsResponse
  final class GetMapObjectsResponse extends ProtobufMessage {

    private $_unknown;
    private $mapCells = array(); // repeated .POGOProtos.Map.MapCell map_cells = 1
    private $status = MapObjectsStatus::UNSET_STATUS; // optional .POGOProtos.Map.MapObjectsStatus status = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated .POGOProtos.Map.MapCell map_cells = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->mapCells[] = new \POGOProtos\Map\MapCell($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Map\MapCell did not read the full length');

            break;
          case 2: // optional .POGOProtos.Map.MapObjectsStatus status = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->status = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->mapCells as $v) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->status !== MapObjectsStatus::UNSET_STATUS) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->status);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->mapCells as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->status !== MapObjectsStatus::UNSET_STATUS) {
        $size += 1 + Protobuf::size_varint($this->status);
      }
      return $size;
    }

    public function clearMapCells() { $this->mapCells = array(); }
    public function getMapCellsCount() { return count($this->mapCells); }
    public function getMapCells($index) { return $this->mapCells[$index]; }
    public function getMapCellsArray() { return $this->mapCells; }
    public function setMapCells($index, array $value) {$this->mapCells[$index] = $value; }
    public function addMapCells(array $value) { $this->mapCells[] = $value; }
    public function addAllMapCells(array $values) { foreach($values as $value) {$this->mapCells[] = $value; }}

    public function clearStatus() { $this->status = MapObjectsStatus::UNSET_STATUS; }
    public function getStatus() { return $this->status;}
    public function setStatus($value) { $this->status = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('map_cells', $this->mapCells, null)
           . Protobuf::toString('status', $this->status, MapObjectsStatus::UNSET_STATUS);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.GetMapObjectsResponse)
  }

}