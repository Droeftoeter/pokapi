<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Responses.proto
 */


namespace POGOProtos\Networking\Responses;

/**
 * Protobuf message : POGOProtos.Networking.Responses.UseItemCaptureResponse
 */
class UseItemCaptureResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * success optional bool = 1
     *
     * @var bool
     */
    protected $success = null;

    /**
     * item_capture_mult optional double = 2
     *
     * @var float
     */
    protected $item_capture_mult = null;

    /**
     * item_flee_mult optional double = 3
     *
     * @var float
     */
    protected $item_flee_mult = null;

    /**
     * stop_movement optional bool = 4
     *
     * @var bool
     */
    protected $stop_movement = null;

    /**
     * stop_attack optional bool = 5
     *
     * @var bool
     */
    protected $stop_attack = null;

    /**
     * target_max optional bool = 6
     *
     * @var bool
     */
    protected $target_max = null;

    /**
     * target_slow optional bool = 7
     *
     * @var bool
     */
    protected $target_slow = null;

    /**
     * Check if 'success' has a value
     *
     * @return bool
     */
    public function hasSuccess()
    {
        return $this->success !== null;
    }

    /**
     * Get 'success' value
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->success;
    }

    /**
     * Set 'success' value
     *
     * @param bool $value
     */
    public function setSuccess($value = null)
    {
        $this->success = $value;
    }

    /**
     * Check if 'item_capture_mult' has a value
     *
     * @return bool
     */
    public function hasItemCaptureMult()
    {
        return $this->item_capture_mult !== null;
    }

    /**
     * Get 'item_capture_mult' value
     *
     * @return float
     */
    public function getItemCaptureMult()
    {
        return $this->item_capture_mult;
    }

    /**
     * Set 'item_capture_mult' value
     *
     * @param float $value
     */
    public function setItemCaptureMult($value = null)
    {
        $this->item_capture_mult = $value;
    }

    /**
     * Check if 'item_flee_mult' has a value
     *
     * @return bool
     */
    public function hasItemFleeMult()
    {
        return $this->item_flee_mult !== null;
    }

    /**
     * Get 'item_flee_mult' value
     *
     * @return float
     */
    public function getItemFleeMult()
    {
        return $this->item_flee_mult;
    }

    /**
     * Set 'item_flee_mult' value
     *
     * @param float $value
     */
    public function setItemFleeMult($value = null)
    {
        $this->item_flee_mult = $value;
    }

    /**
     * Check if 'stop_movement' has a value
     *
     * @return bool
     */
    public function hasStopMovement()
    {
        return $this->stop_movement !== null;
    }

    /**
     * Get 'stop_movement' value
     *
     * @return bool
     */
    public function getStopMovement()
    {
        return $this->stop_movement;
    }

    /**
     * Set 'stop_movement' value
     *
     * @param bool $value
     */
    public function setStopMovement($value = null)
    {
        $this->stop_movement = $value;
    }

    /**
     * Check if 'stop_attack' has a value
     *
     * @return bool
     */
    public function hasStopAttack()
    {
        return $this->stop_attack !== null;
    }

    /**
     * Get 'stop_attack' value
     *
     * @return bool
     */
    public function getStopAttack()
    {
        return $this->stop_attack;
    }

    /**
     * Set 'stop_attack' value
     *
     * @param bool $value
     */
    public function setStopAttack($value = null)
    {
        $this->stop_attack = $value;
    }

    /**
     * Check if 'target_max' has a value
     *
     * @return bool
     */
    public function hasTargetMax()
    {
        return $this->target_max !== null;
    }

    /**
     * Get 'target_max' value
     *
     * @return bool
     */
    public function getTargetMax()
    {
        return $this->target_max;
    }

    /**
     * Set 'target_max' value
     *
     * @param bool $value
     */
    public function setTargetMax($value = null)
    {
        $this->target_max = $value;
    }

    /**
     * Check if 'target_slow' has a value
     *
     * @return bool
     */
    public function hasTargetSlow()
    {
        return $this->target_slow !== null;
    }

    /**
     * Get 'target_slow' value
     *
     * @return bool
     */
    public function getTargetSlow()
    {
        return $this->target_slow;
    }

    /**
     * Set 'target_slow' value
     *
     * @param bool $value
     */
    public function setTargetSlow($value = null)
    {
        $this->target_slow = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'success' => null,
            'item_capture_mult' => null,
            'item_flee_mult' => null,
            'stop_movement' => null,
            'stop_attack' => null,
            'target_max' => null,
            'target_slow' => null
        ], $values);

        $message->setSuccess($values['success']);
        $message->setItemCaptureMult($values['item_capture_mult']);
        $message->setItemFleeMult($values['item_flee_mult']);
        $message->setStopMovement($values['stop_movement']);
        $message->setStopAttack($values['stop_attack']);
        $message->setTargetMax($values['target_max']);
        $message->setTargetSlow($values['target_slow']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'UseItemCaptureResponse',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'success',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'item_capture_mult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'item_flee_mult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'stop_movement',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'stop_attack',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'target_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'target_slow',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->success !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->success);
        }

        if ($this->item_capture_mult !== null) {
            $writer->writeVarint($stream, 17);
            $writer->writeDouble($stream, $this->item_capture_mult);
        }

        if ($this->item_flee_mult !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeDouble($stream, $this->item_flee_mult);
        }

        if ($this->stop_movement !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->stop_movement);
        }

        if ($this->stop_attack !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->stop_attack);
        }

        if ($this->target_max !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->target_max);
        }

        if ($this->target_slow !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->target_slow);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->success = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->item_capture_mult = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->item_flee_mult = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->stop_movement = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->stop_attack = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->target_max = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->target_slow = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->success !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->item_capture_mult !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->item_flee_mult !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->stop_movement !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->stop_attack !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->target_max !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->target_slow !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->success = null;
        $this->item_capture_mult = null;
        $this->item_flee_mult = null;
        $this->stop_movement = null;
        $this->stop_attack = null;
        $this->target_max = null;
        $this->target_slow = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Responses\UseItemCaptureResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->success = ($message->success !== null) ? $message->success : $this->success;
        $this->item_capture_mult = ($message->item_capture_mult !== null) ? $message->item_capture_mult : $this->item_capture_mult;
        $this->item_flee_mult = ($message->item_flee_mult !== null) ? $message->item_flee_mult : $this->item_flee_mult;
        $this->stop_movement = ($message->stop_movement !== null) ? $message->stop_movement : $this->stop_movement;
        $this->stop_attack = ($message->stop_attack !== null) ? $message->stop_attack : $this->stop_attack;
        $this->target_max = ($message->target_max !== null) ? $message->target_max : $this->target_max;
        $this->target_slow = ($message->target_slow !== null) ? $message->target_slow : $this->target_slow;
    }


}

