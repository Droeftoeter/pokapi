<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/GetGymDetailsResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // enum POGOProtos.Networking.Responses.GetGymDetailsResponse.Result
  abstract class GetGymDetailsResponse_Result extends ProtobufEnum {
    const UNSET = 0;
    const SUCCESS = 1;
    const ERROR_NOT_IN_RANGE = 2;

    public static $_values = array(
      0 => "UNSET",
      1 => "SUCCESS",
      2 => "ERROR_NOT_IN_RANGE",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Responses.GetGymDetailsResponse
  final class GetGymDetailsResponse extends ProtobufMessage {

    private $_unknown;
    private $gymState = null; // optional .POGOProtos.Data.Gym.GymState gym_state = 1
    private $name = ""; // optional string name = 2
    private $urls = array(); // repeated string urls = 3
    private $result = GetGymDetailsResponse_Result::UNSET; // optional .POGOProtos.Networking.Responses.GetGymDetailsResponse.Result result = 4
    private $description = ""; // optional string description = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Data.Gym.GymState gym_state = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->gymState = new \POGOProtos\Data\Gym\GymState($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Gym\GymState did not read the full length');

            break;
          case 2: // optional string name = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->name = $tmp;

            break;
          case 3: // repeated string urls = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->urls[] = $tmp;

            break;
          case 4: // optional .POGOProtos.Networking.Responses.GetGymDetailsResponse.Result result = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->result = $tmp;

            break;
          case 5: // optional string description = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->description = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->gymState !== null) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->gymState->size());
        $this->gymState->write($fp);
      }
      if ($this->name !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->name));
        fwrite($fp, $this->name);
      }
      foreach($this->urls as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if ($this->result !== GetGymDetailsResponse_Result::UNSET) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->result);
      }
      if ($this->description !== "") {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, strlen($this->description));
        fwrite($fp, $this->description);
      }
    }

    public function size() {
      $size = 0;
      if ($this->gymState !== null) {
        $l = $this->gymState->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->name !== "") {
        $l = strlen($this->name);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->urls as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->result !== GetGymDetailsResponse_Result::UNSET) {
        $size += 1 + Protobuf::size_varint($this->result);
      }
      if ($this->description !== "") {
        $l = strlen($this->description);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearGymState() { $this->gymState = null; }
    public function getGymState() { return $this->gymState;}
    public function setGymState(\POGOProtos\Data\Gym\GymState $value) { $this->gymState = $value; }

    public function clearName() { $this->name = ""; }
    public function getName() { return $this->name;}
    public function setName($value) { $this->name = $value; }

    public function clearUrls() { $this->urls = array(); }
    public function getUrlsCount() { return count($this->urls); }
    public function getUrls($index) { return $this->urls[$index]; }
    public function getUrlsArray() { return $this->urls; }
    public function setUrls($index, array $value) {$this->urls[$index] = $value; }
    public function addUrls(array $value) { $this->urls[] = $value; }
    public function addAllUrls(array $values) { foreach($values as $value) {$this->urls[] = $value; }}

    public function clearResult() { $this->result = GetGymDetailsResponse_Result::UNSET; }
    public function getResult() { return $this->result;}
    public function setResult($value) { $this->result = $value; }

    public function clearDescription() { $this->description = ""; }
    public function getDescription() { return $this->description;}
    public function setDescription($value) { $this->description = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('gym_state', $this->gymState, null)
           . Protobuf::toString('name', $this->name, "")
           . Protobuf::toString('urls', $this->urls, "")
           . Protobuf::toString('result', $this->result, GetGymDetailsResponse_Result::UNSET)
           . Protobuf::toString('description', $this->description, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.GetGymDetailsResponse)
  }

}