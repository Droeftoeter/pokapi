<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/GetDownloadUrlsResponse.php');

namespace POGOProtos\Networking\Responses {

  use POGOProtos\Data\DownloadUrlEntry;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Responses.GetDownloadUrlsResponse
  final class GetDownloadUrlsResponse extends ProtobufMessage {

    private $_unknown;
    private $downloadUrls = array(); // repeated .POGOProtos.Data.DownloadUrlEntry download_urls = 1

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated .POGOProtos.Data.DownloadUrlEntry download_urls = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->downloadUrls[] = new DownloadUrlEntry($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\DownloadUrlEntry did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->downloadUrls as $v) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->downloadUrls as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearDownloadUrls() { $this->downloadUrls = array(); }
    public function getDownloadUrlsCount() { return count($this->downloadUrls); }
    public function getDownloadUrls($index) { return $this->downloadUrls[$index]; }
    public function getDownloadUrlsArray() { return $this->downloadUrls; }
    public function setDownloadUrls($index, array $value) {$this->downloadUrls[$index] = $value; }
    public function addDownloadUrls(array $value) { $this->downloadUrls[] = $value; }
    public function addAllDownloadUrls(array $values) { foreach($values as $value) {$this->downloadUrls[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('download_urls', $this->downloadUrls, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.GetDownloadUrlsResponse)
  }

}