<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/GetHatchedEggsResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Networking.Responses.GetHatchedEggsResponse
  final class GetHatchedEggsResponse extends ProtobufMessage {

    private $_unknown;
    private $success = false; // optional bool success = 1
    private $pokemonId = array(); // repeated fixed64 pokemon_id = 2 [packed = true]
    private $experienceAwarded = array(); // repeated int32 experience_awarded = 3
    private $candyAwarded = array(); // repeated int32 candy_awarded = 4
    private $stardustAwarded = array(); // repeated int32 stardust_awarded = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional bool success = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->success = ($tmp > 0) ? true : false;

            break;
          case 2: // repeated fixed64 pokemon_id = 2 [packed = true]
            if($wire !== 2 && $wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 1 got: $wire");
            }
            if ($wire === 1) {
              $tmp = Protobuf::read_uint64($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
              $this->pokemonId[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_uint64($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
                $this->pokemonId[] = $tmp;
              }
            }

            break;
          case 3: // repeated int32 experience_awarded = 3
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->experienceAwarded[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->experienceAwarded[] = $tmp;
              }
            }

            break;
          case 4: // repeated int32 candy_awarded = 4
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->candyAwarded[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->candyAwarded[] = $tmp;
              }
            }

            break;
          case 5: // repeated int32 stardust_awarded = 5
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->stardustAwarded[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->stardustAwarded[] = $tmp;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->success !== false) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->success ? 1 : 0);
      }
      foreach($this->pokemonId as $v) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_uint64($fp, $v);
      }
      foreach($this->experienceAwarded as $v) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->candyAwarded as $v) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->stardustAwarded as $v) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $v);
      }
    }

    public function size() {
      $size = 0;
      if ($this->success !== false) {
        $size += 2;
      }
      foreach($this->pokemonId as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->experienceAwarded as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->candyAwarded as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->stardustAwarded as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearSuccess() { $this->success = false; }
    public function getSuccess() { return $this->success;}
    public function setSuccess($value) { $this->success = $value; }

    public function clearPokemonId() { $this->pokemonId = array(); }
    public function getPokemonIdCount() { return count($this->pokemonId); }
    public function getPokemonId($index) { return $this->pokemonId[$index]; }
    public function getPokemonIdArray() { return $this->pokemonId; }
    public function setPokemonId($index, array $value) {$this->pokemonId[$index] = $value; }
    public function addPokemonId(array $value) { $this->pokemonId[] = $value; }
    public function addAllPokemonId(array $values) { foreach($values as $value) {$this->pokemonId[] = $value; }}

    public function clearExperienceAwarded() { $this->experienceAwarded = array(); }
    public function getExperienceAwardedCount() { return count($this->experienceAwarded); }
    public function getExperienceAwarded($index) { return $this->experienceAwarded[$index]; }
    public function getExperienceAwardedArray() { return $this->experienceAwarded; }
    public function setExperienceAwarded($index, array $value) {$this->experienceAwarded[$index] = $value; }
    public function addExperienceAwarded(array $value) { $this->experienceAwarded[] = $value; }
    public function addAllExperienceAwarded(array $values) { foreach($values as $value) {$this->experienceAwarded[] = $value; }}

    public function clearCandyAwarded() { $this->candyAwarded = array(); }
    public function getCandyAwardedCount() { return count($this->candyAwarded); }
    public function getCandyAwarded($index) { return $this->candyAwarded[$index]; }
    public function getCandyAwardedArray() { return $this->candyAwarded; }
    public function setCandyAwarded($index, array $value) {$this->candyAwarded[$index] = $value; }
    public function addCandyAwarded(array $value) { $this->candyAwarded[] = $value; }
    public function addAllCandyAwarded(array $values) { foreach($values as $value) {$this->candyAwarded[] = $value; }}

    public function clearStardustAwarded() { $this->stardustAwarded = array(); }
    public function getStardustAwardedCount() { return count($this->stardustAwarded); }
    public function getStardustAwarded($index) { return $this->stardustAwarded[$index]; }
    public function getStardustAwardedArray() { return $this->stardustAwarded; }
    public function setStardustAwarded($index, array $value) {$this->stardustAwarded[$index] = $value; }
    public function addStardustAwarded(array $value) { $this->stardustAwarded[] = $value; }
    public function addAllStardustAwarded(array $values) { foreach($values as $value) {$this->stardustAwarded[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('success', $this->success, false)
           . Protobuf::toString('pokemon_id', $this->pokemonId, 0)
           . Protobuf::toString('experience_awarded', $this->experienceAwarded, 0)
           . Protobuf::toString('candy_awarded', $this->candyAwarded, 0)
           . Protobuf::toString('stardust_awarded', $this->stardustAwarded, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.GetHatchedEggsResponse)
  }

}