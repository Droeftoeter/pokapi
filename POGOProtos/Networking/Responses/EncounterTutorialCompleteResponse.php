<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Responses/EncounterTutorialCompleteResponse.php');

namespace POGOProtos\Networking\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // enum POGOProtos.Networking.Responses.EncounterTutorialCompleteResponse.Result
  abstract class EncounterTutorialCompleteResponse_Result extends ProtobufEnum {
    const UNSET = 0;
    const SUCCESS = 1;
    const ERROR_INVALID_POKEMON = 2;

    public static $_values = array(
      0 => "UNSET",
      1 => "SUCCESS",
      2 => "ERROR_INVALID_POKEMON",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Responses.EncounterTutorialCompleteResponse
  final class EncounterTutorialCompleteResponse extends ProtobufMessage {

    private $_unknown;
    private $result = EncounterTutorialCompleteResponse_Result::UNSET; // optional .POGOProtos.Networking.Responses.EncounterTutorialCompleteResponse.Result result = 1
    private $pokemonData = null; // optional .POGOProtos.Data.PokemonData pokemon_data = 2
    private $captureAward = null; // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Networking.Responses.EncounterTutorialCompleteResponse.Result result = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->result = $tmp;

            break;
          case 2: // optional .POGOProtos.Data.PokemonData pokemon_data = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonData = new \POGOProtos\Data\PokemonData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokemonData did not read the full length');

            break;
          case 3: // optional .POGOProtos.Data.Capture.CaptureAward capture_award = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->captureAward = new \POGOProtos\Data\Capture\CaptureAward($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Capture\CaptureAward did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->result !== EncounterTutorialCompleteResponse_Result::UNSET) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->result);
      }
      if ($this->pokemonData !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->pokemonData->size());
        $this->pokemonData->write($fp);
      }
      if ($this->captureAward !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->captureAward->size());
        $this->captureAward->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->result !== EncounterTutorialCompleteResponse_Result::UNSET) {
        $size += 1 + Protobuf::size_varint($this->result);
      }
      if ($this->pokemonData !== null) {
        $l = $this->pokemonData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->captureAward !== null) {
        $l = $this->captureAward->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearResult() { $this->result = EncounterTutorialCompleteResponse_Result::UNSET; }
    public function getResult() { return $this->result;}
    public function setResult($value) { $this->result = $value; }

    public function clearPokemonData() { $this->pokemonData = null; }
    public function getPokemonData() { return $this->pokemonData;}
    public function setPokemonData(\POGOProtos\Data\PokemonData $value) { $this->pokemonData = $value; }

    public function clearCaptureAward() { $this->captureAward = null; }
    public function getCaptureAward() { return $this->captureAward;}
    public function setCaptureAward(\POGOProtos\Data\Capture\CaptureAward $value) { $this->captureAward = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('result', $this->result, EncounterTutorialCompleteResponse_Result::UNSET)
           . Protobuf::toString('pokemon_data', $this->pokemonData, null)
           . Protobuf::toString('capture_award', $this->captureAward, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Responses.EncounterTutorialCompleteResponse)
  }

}