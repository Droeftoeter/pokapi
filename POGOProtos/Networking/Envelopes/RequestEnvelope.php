<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Envelopes/RequestEnvelope.php');

namespace POGOProtos\Networking\Envelopes {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo.JWT
  final class RequestEnvelope_AuthInfo_JWT extends ProtobufMessage {

    private $_unknown;
    private $contents = ""; // optional string contents = 1
    private $unknown2 = 0; // optional int32 unknown2 = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string contents = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->contents = $tmp;

            break;
          case 2: // optional int32 unknown2 = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->unknown2 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->contents !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->contents));
        fwrite($fp, $this->contents);
      }
      if ($this->unknown2 !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->unknown2);
      }
    }

    public function size() {
      $size = 0;
      if ($this->contents !== "") {
        $l = strlen($this->contents);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown2 !== 0) {
        $size += 1 + Protobuf::size_varint($this->unknown2);
      }
      return $size;
    }

    public function clearContents() { $this->contents = ""; }
    public function getContents() { return $this->contents;}
    public function setContents($value) { $this->contents = $value; }

    public function clearUnknown2() { $this->unknown2 = 0; }
    public function getUnknown2() { return $this->unknown2;}
    public function setUnknown2($value) { $this->unknown2 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('contents', $this->contents, "")
           . Protobuf::toString('unknown2', $this->unknown2, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo.JWT)
  }

  // message POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo
  final class RequestEnvelope_AuthInfo extends ProtobufMessage {

    private $_unknown;
    private $provider = ""; // optional string provider = 1
    private $token = null; // optional .POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo.JWT token = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string provider = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->provider = $tmp;

            break;
          case 2: // optional .POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo.JWT token = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->token = new \POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo_JWT($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo_JWT did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->provider !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->provider));
        fwrite($fp, $this->provider);
      }
      if ($this->token !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->token->size());
        $this->token->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->provider !== "") {
        $l = strlen($this->provider);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->token !== null) {
        $l = $this->token->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearProvider() { $this->provider = ""; }
    public function getProvider() { return $this->provider;}
    public function setProvider($value) { $this->provider = $value; }

    public function clearToken() { $this->token = null; }
    public function getToken() { return $this->token;}
    public function setToken(\POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo_JWT $value) { $this->token = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('provider', $this->provider, "")
           . Protobuf::toString('token', $this->token, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo)
  }

  // message POGOProtos.Networking.Envelopes.RequestEnvelope
  final class RequestEnvelope extends ProtobufMessage {

    private $_unknown;
    private $statusCode = 0; // optional int32 status_code = 1
    private $requestId = 0; // optional uint64 request_id = 3
    private $requests = array(); // repeated .POGOProtos.Networking.Requests.Request requests = 4
    private $unknown6 = null; // optional .POGOProtos.Networking.Envelopes.Unknown6 unknown6 = 6
    private $latitude = 0; // optional double latitude = 7
    private $longitude = 0; // optional double longitude = 8
    private $altitude = 0; // optional double altitude = 9
    private $authInfo = null; // optional .POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo auth_info = 10
    private $authTicket = null; // optional .POGOProtos.Networking.Envelopes.AuthTicket auth_ticket = 11
    private $unknown12 = 0; // optional int64 unknown12 = 12

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 status_code = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->statusCode = $tmp;

            break;
          case 3: // optional uint64 request_id = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->requestId = $tmp;

            break;
          case 4: // repeated .POGOProtos.Networking.Requests.Request requests = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->requests[] = new \POGOProtos\Networking\Requests\Request($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Requests\Request did not read the full length');

            break;
          case 6: // optional .POGOProtos.Networking.Envelopes.Unknown6 unknown6 = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->unknown6 = new \POGOProtos\Networking\Envelopes\Unknown6($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Unknown6 did not read the full length');

            break;
          case 7: // optional double latitude = 7
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 8: // optional double longitude = 8
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          case 9: // optional double altitude = 9
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->altitude = $tmp;

            break;
          case 10: // optional .POGOProtos.Networking.Envelopes.RequestEnvelope.AuthInfo auth_info = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->authInfo = new \POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo did not read the full length');

            break;
          case 11: // optional .POGOProtos.Networking.Envelopes.AuthTicket auth_ticket = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->authTicket = new \POGOProtos\Networking\Envelopes\AuthTicket($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\AuthTicket did not read the full length');

            break;
          case 12: // optional int64 unknown12 = 12
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->unknown12 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->statusCode !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->statusCode);
      }
      if ($this->requestId !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->requestId);
      }
      foreach($this->requests as $v) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->unknown6 !== null) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $this->unknown6->size());
        $this->unknown6->write($fp);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "9", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "A", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
      if ($this->altitude !== 0) {
        fwrite($fp, "I", 1);
        Protobuf::write_double($fp, $this->altitude);
      }
      if ($this->authInfo !== null) {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, $this->authInfo->size());
        $this->authInfo->write($fp);
      }
      if ($this->authTicket !== null) {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, $this->authTicket->size());
        $this->authTicket->write($fp);
      }
      if ($this->unknown12 !== 0) {
        fwrite($fp, "`", 1);
        Protobuf::write_varint($fp, $this->unknown12);
      }
    }

    public function size() {
      $size = 0;
      if ($this->statusCode !== 0) {
        $size += 1 + Protobuf::size_varint($this->statusCode);
      }
      if ($this->requestId !== 0) {
        $size += 1 + Protobuf::size_varint($this->requestId);
      }
      foreach($this->requests as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown6 !== null) {
        $l = $this->unknown6->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      if ($this->altitude !== 0) {
        $size += 9;
      }
      if ($this->authInfo !== null) {
        $l = $this->authInfo->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->authTicket !== null) {
        $l = $this->authTicket->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown12 !== 0) {
        $size += 1 + Protobuf::size_varint($this->unknown12);
      }
      return $size;
    }

    public function clearStatusCode() { $this->statusCode = 0; }
    public function getStatusCode() { return $this->statusCode;}
    public function setStatusCode($value) { $this->statusCode = $value; }

    public function clearRequestId() { $this->requestId = 0; }
    public function getRequestId() { return $this->requestId;}
    public function setRequestId($value) { $this->requestId = $value; }

    public function clearRequests() { $this->requests = array(); }
    public function getRequestsCount() { return count($this->requests); }
    public function getRequests($index) { return $this->requests[$index]; }
    public function getRequestsArray() { return $this->requests; }
    public function setRequests($index, array $value) {$this->requests[$index] = $value; }
    public function addRequests(array $value) { $this->requests[] = $value; }
    public function addAllRequests(array $values) { foreach($values as $value) {$this->requests[] = $value; }}

    public function clearUnknown6() { $this->unknown6 = null; }
    public function getUnknown6() { return $this->unknown6;}
    public function setUnknown6(\POGOProtos\Networking\Envelopes\Unknown6 $value) { $this->unknown6 = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function clearAltitude() { $this->altitude = 0; }
    public function getAltitude() { return $this->altitude;}
    public function setAltitude($value) { $this->altitude = $value; }

    public function clearAuthInfo() { $this->authInfo = null; }
    public function getAuthInfo() { return $this->authInfo;}
    public function setAuthInfo(\POGOProtos\Networking\Envelopes\RequestEnvelope_AuthInfo $value) { $this->authInfo = $value; }

    public function clearAuthTicket() { $this->authTicket = null; }
    public function getAuthTicket() { return $this->authTicket;}
    public function setAuthTicket(\POGOProtos\Networking\Envelopes\AuthTicket $value) { $this->authTicket = $value; }

    public function clearUnknown12() { $this->unknown12 = 0; }
    public function getUnknown12() { return $this->unknown12;}
    public function setUnknown12($value) { $this->unknown12 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('status_code', $this->statusCode, 0)
           . Protobuf::toString('request_id', $this->requestId, 0)
           . Protobuf::toString('requests', $this->requests, null)
           . Protobuf::toString('unknown6', $this->unknown6, null)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0)
           . Protobuf::toString('altitude', $this->altitude, 0)
           . Protobuf::toString('auth_info', $this->authInfo, null)
           . Protobuf::toString('auth_ticket', $this->authTicket, null)
           . Protobuf::toString('unknown12', $this->unknown12, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.RequestEnvelope)
  }

}