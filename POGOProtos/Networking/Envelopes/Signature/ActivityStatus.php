<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Envelopes.proto
 */


namespace POGOProtos\Networking\Envelopes\Signature;

/**
 * Protobuf message : POGOProtos.Networking.Envelopes.Signature.ActivityStatus
 */
class ActivityStatus extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * start_time_ms optional uint64 = 1
     *
     * @var int
     */
    protected $start_time_ms = null;

    /**
     * unknown_status optional bool = 2
     *
     * @var bool
     */
    protected $unknown_status = null;

    /**
     * walking optional bool = 3
     *
     * @var bool
     */
    protected $walking = null;

    /**
     * running optional bool = 4
     *
     * @var bool
     */
    protected $running = null;

    /**
     * stationary optional bool = 5
     *
     * @var bool
     */
    protected $stationary = null;

    /**
     * automotive optional bool = 6
     *
     * @var bool
     */
    protected $automotive = null;

    /**
     * tilting optional bool = 7
     *
     * @var bool
     */
    protected $tilting = null;

    /**
     * cycling optional bool = 8
     *
     * @var bool
     */
    protected $cycling = null;

    /**
     * status optional bytes = 9
     *
     * @var \Protobuf\Stream
     */
    protected $status = null;

    /**
     * Check if 'start_time_ms' has a value
     *
     * @return bool
     */
    public function hasStartTimeMs()
    {
        return $this->start_time_ms !== null;
    }

    /**
     * Get 'start_time_ms' value
     *
     * @return int
     */
    public function getStartTimeMs()
    {
        return $this->start_time_ms;
    }

    /**
     * Set 'start_time_ms' value
     *
     * @param int $value
     */
    public function setStartTimeMs($value = null)
    {
        $this->start_time_ms = $value;
    }

    /**
     * Check if 'unknown_status' has a value
     *
     * @return bool
     */
    public function hasUnknownStatus()
    {
        return $this->unknown_status !== null;
    }

    /**
     * Get 'unknown_status' value
     *
     * @return bool
     */
    public function getUnknownStatus()
    {
        return $this->unknown_status;
    }

    /**
     * Set 'unknown_status' value
     *
     * @param bool $value
     */
    public function setUnknownStatus($value = null)
    {
        $this->unknown_status = $value;
    }

    /**
     * Check if 'walking' has a value
     *
     * @return bool
     */
    public function hasWalking()
    {
        return $this->walking !== null;
    }

    /**
     * Get 'walking' value
     *
     * @return bool
     */
    public function getWalking()
    {
        return $this->walking;
    }

    /**
     * Set 'walking' value
     *
     * @param bool $value
     */
    public function setWalking($value = null)
    {
        $this->walking = $value;
    }

    /**
     * Check if 'running' has a value
     *
     * @return bool
     */
    public function hasRunning()
    {
        return $this->running !== null;
    }

    /**
     * Get 'running' value
     *
     * @return bool
     */
    public function getRunning()
    {
        return $this->running;
    }

    /**
     * Set 'running' value
     *
     * @param bool $value
     */
    public function setRunning($value = null)
    {
        $this->running = $value;
    }

    /**
     * Check if 'stationary' has a value
     *
     * @return bool
     */
    public function hasStationary()
    {
        return $this->stationary !== null;
    }

    /**
     * Get 'stationary' value
     *
     * @return bool
     */
    public function getStationary()
    {
        return $this->stationary;
    }

    /**
     * Set 'stationary' value
     *
     * @param bool $value
     */
    public function setStationary($value = null)
    {
        $this->stationary = $value;
    }

    /**
     * Check if 'automotive' has a value
     *
     * @return bool
     */
    public function hasAutomotive()
    {
        return $this->automotive !== null;
    }

    /**
     * Get 'automotive' value
     *
     * @return bool
     */
    public function getAutomotive()
    {
        return $this->automotive;
    }

    /**
     * Set 'automotive' value
     *
     * @param bool $value
     */
    public function setAutomotive($value = null)
    {
        $this->automotive = $value;
    }

    /**
     * Check if 'tilting' has a value
     *
     * @return bool
     */
    public function hasTilting()
    {
        return $this->tilting !== null;
    }

    /**
     * Get 'tilting' value
     *
     * @return bool
     */
    public function getTilting()
    {
        return $this->tilting;
    }

    /**
     * Set 'tilting' value
     *
     * @param bool $value
     */
    public function setTilting($value = null)
    {
        $this->tilting = $value;
    }

    /**
     * Check if 'cycling' has a value
     *
     * @return bool
     */
    public function hasCycling()
    {
        return $this->cycling !== null;
    }

    /**
     * Get 'cycling' value
     *
     * @return bool
     */
    public function getCycling()
    {
        return $this->cycling;
    }

    /**
     * Set 'cycling' value
     *
     * @param bool $value
     */
    public function setCycling($value = null)
    {
        $this->cycling = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return \Protobuf\Stream
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setStatus($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->status = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'start_time_ms' => null,
            'unknown_status' => null,
            'walking' => null,
            'running' => null,
            'stationary' => null,
            'automotive' => null,
            'tilting' => null,
            'cycling' => null,
            'status' => null
        ], $values);

        $message->setStartTimeMs($values['start_time_ms']);
        $message->setUnknownStatus($values['unknown_status']);
        $message->setWalking($values['walking']);
        $message->setRunning($values['running']);
        $message->setStationary($values['stationary']);
        $message->setAutomotive($values['automotive']);
        $message->setTilting($values['tilting']);
        $message->setCycling($values['cycling']);
        $message->setStatus($values['status']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ActivityStatus',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'start_time_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'unknown_status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'walking',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'running',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'stationary',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'automotive',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'tilting',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'cycling',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->start_time_ms !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->start_time_ms);
        }

        if ($this->unknown_status !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->unknown_status);
        }

        if ($this->walking !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->walking);
        }

        if ($this->running !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->running);
        }

        if ($this->stationary !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->stationary);
        }

        if ($this->automotive !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->automotive);
        }

        if ($this->tilting !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->tilting);
        }

        if ($this->cycling !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->cycling);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeByteStream($stream, $this->status);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->start_time_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->unknown_status = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->walking = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->running = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->stationary = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->automotive = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->tilting = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->cycling = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->status = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->start_time_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->start_time_ms);
        }

        if ($this->unknown_status !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->walking !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->running !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->stationary !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->automotive !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->tilting !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->cycling !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->status !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->status);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->start_time_ms = null;
        $this->unknown_status = null;
        $this->walking = null;
        $this->running = null;
        $this->stationary = null;
        $this->automotive = null;
        $this->tilting = null;
        $this->cycling = null;
        $this->status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Envelopes\Signature\ActivityStatus) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->start_time_ms = ($message->start_time_ms !== null) ? $message->start_time_ms : $this->start_time_ms;
        $this->unknown_status = ($message->unknown_status !== null) ? $message->unknown_status : $this->unknown_status;
        $this->walking = ($message->walking !== null) ? $message->walking : $this->walking;
        $this->running = ($message->running !== null) ? $message->running : $this->running;
        $this->stationary = ($message->stationary !== null) ? $message->stationary : $this->stationary;
        $this->automotive = ($message->automotive !== null) ? $message->automotive : $this->automotive;
        $this->tilting = ($message->tilting !== null) ? $message->tilting : $this->tilting;
        $this->cycling = ($message->cycling !== null) ? $message->cycling : $this->cycling;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
    }


}

