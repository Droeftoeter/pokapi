<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Envelopes.proto
 */


namespace POGOProtos\Networking\Envelopes\Signature;

/**
 * Protobuf message : POGOProtos.Networking.Envelopes.Signature.DeviceInfo
 */
class DeviceInfo extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * device_id optional string = 1
     *
     * @var string
     */
    protected $device_id = null;

    /**
     * android_board_name optional string = 2
     *
     * @var string
     */
    protected $android_board_name = null;

    /**
     * android_bootloader optional string = 3
     *
     * @var string
     */
    protected $android_bootloader = null;

    /**
     * device_brand optional string = 4
     *
     * @var string
     */
    protected $device_brand = null;

    /**
     * device_model optional string = 5
     *
     * @var string
     */
    protected $device_model = null;

    /**
     * device_model_identifier optional string = 6
     *
     * @var string
     */
    protected $device_model_identifier = null;

    /**
     * device_model_boot optional string = 7
     *
     * @var string
     */
    protected $device_model_boot = null;

    /**
     * hardware_manufacturer optional string = 8
     *
     * @var string
     */
    protected $hardware_manufacturer = null;

    /**
     * hardware_model optional string = 9
     *
     * @var string
     */
    protected $hardware_model = null;

    /**
     * firmware_brand optional string = 10
     *
     * @var string
     */
    protected $firmware_brand = null;

    /**
     * firmware_tags optional string = 12
     *
     * @var string
     */
    protected $firmware_tags = null;

    /**
     * firmware_type optional string = 13
     *
     * @var string
     */
    protected $firmware_type = null;

    /**
     * firmware_fingerprint optional string = 14
     *
     * @var string
     */
    protected $firmware_fingerprint = null;

    /**
     * Check if 'device_id' has a value
     *
     * @return bool
     */
    public function hasDeviceId()
    {
        return $this->device_id !== null;
    }

    /**
     * Get 'device_id' value
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->device_id;
    }

    /**
     * Set 'device_id' value
     *
     * @param string $value
     */
    public function setDeviceId($value = null)
    {
        $this->device_id = $value;
    }

    /**
     * Check if 'android_board_name' has a value
     *
     * @return bool
     */
    public function hasAndroidBoardName()
    {
        return $this->android_board_name !== null;
    }

    /**
     * Get 'android_board_name' value
     *
     * @return string
     */
    public function getAndroidBoardName()
    {
        return $this->android_board_name;
    }

    /**
     * Set 'android_board_name' value
     *
     * @param string $value
     */
    public function setAndroidBoardName($value = null)
    {
        $this->android_board_name = $value;
    }

    /**
     * Check if 'android_bootloader' has a value
     *
     * @return bool
     */
    public function hasAndroidBootloader()
    {
        return $this->android_bootloader !== null;
    }

    /**
     * Get 'android_bootloader' value
     *
     * @return string
     */
    public function getAndroidBootloader()
    {
        return $this->android_bootloader;
    }

    /**
     * Set 'android_bootloader' value
     *
     * @param string $value
     */
    public function setAndroidBootloader($value = null)
    {
        $this->android_bootloader = $value;
    }

    /**
     * Check if 'device_brand' has a value
     *
     * @return bool
     */
    public function hasDeviceBrand()
    {
        return $this->device_brand !== null;
    }

    /**
     * Get 'device_brand' value
     *
     * @return string
     */
    public function getDeviceBrand()
    {
        return $this->device_brand;
    }

    /**
     * Set 'device_brand' value
     *
     * @param string $value
     */
    public function setDeviceBrand($value = null)
    {
        $this->device_brand = $value;
    }

    /**
     * Check if 'device_model' has a value
     *
     * @return bool
     */
    public function hasDeviceModel()
    {
        return $this->device_model !== null;
    }

    /**
     * Get 'device_model' value
     *
     * @return string
     */
    public function getDeviceModel()
    {
        return $this->device_model;
    }

    /**
     * Set 'device_model' value
     *
     * @param string $value
     */
    public function setDeviceModel($value = null)
    {
        $this->device_model = $value;
    }

    /**
     * Check if 'device_model_identifier' has a value
     *
     * @return bool
     */
    public function hasDeviceModelIdentifier()
    {
        return $this->device_model_identifier !== null;
    }

    /**
     * Get 'device_model_identifier' value
     *
     * @return string
     */
    public function getDeviceModelIdentifier()
    {
        return $this->device_model_identifier;
    }

    /**
     * Set 'device_model_identifier' value
     *
     * @param string $value
     */
    public function setDeviceModelIdentifier($value = null)
    {
        $this->device_model_identifier = $value;
    }

    /**
     * Check if 'device_model_boot' has a value
     *
     * @return bool
     */
    public function hasDeviceModelBoot()
    {
        return $this->device_model_boot !== null;
    }

    /**
     * Get 'device_model_boot' value
     *
     * @return string
     */
    public function getDeviceModelBoot()
    {
        return $this->device_model_boot;
    }

    /**
     * Set 'device_model_boot' value
     *
     * @param string $value
     */
    public function setDeviceModelBoot($value = null)
    {
        $this->device_model_boot = $value;
    }

    /**
     * Check if 'hardware_manufacturer' has a value
     *
     * @return bool
     */
    public function hasHardwareManufacturer()
    {
        return $this->hardware_manufacturer !== null;
    }

    /**
     * Get 'hardware_manufacturer' value
     *
     * @return string
     */
    public function getHardwareManufacturer()
    {
        return $this->hardware_manufacturer;
    }

    /**
     * Set 'hardware_manufacturer' value
     *
     * @param string $value
     */
    public function setHardwareManufacturer($value = null)
    {
        $this->hardware_manufacturer = $value;
    }

    /**
     * Check if 'hardware_model' has a value
     *
     * @return bool
     */
    public function hasHardwareModel()
    {
        return $this->hardware_model !== null;
    }

    /**
     * Get 'hardware_model' value
     *
     * @return string
     */
    public function getHardwareModel()
    {
        return $this->hardware_model;
    }

    /**
     * Set 'hardware_model' value
     *
     * @param string $value
     */
    public function setHardwareModel($value = null)
    {
        $this->hardware_model = $value;
    }

    /**
     * Check if 'firmware_brand' has a value
     *
     * @return bool
     */
    public function hasFirmwareBrand()
    {
        return $this->firmware_brand !== null;
    }

    /**
     * Get 'firmware_brand' value
     *
     * @return string
     */
    public function getFirmwareBrand()
    {
        return $this->firmware_brand;
    }

    /**
     * Set 'firmware_brand' value
     *
     * @param string $value
     */
    public function setFirmwareBrand($value = null)
    {
        $this->firmware_brand = $value;
    }

    /**
     * Check if 'firmware_tags' has a value
     *
     * @return bool
     */
    public function hasFirmwareTags()
    {
        return $this->firmware_tags !== null;
    }

    /**
     * Get 'firmware_tags' value
     *
     * @return string
     */
    public function getFirmwareTags()
    {
        return $this->firmware_tags;
    }

    /**
     * Set 'firmware_tags' value
     *
     * @param string $value
     */
    public function setFirmwareTags($value = null)
    {
        $this->firmware_tags = $value;
    }

    /**
     * Check if 'firmware_type' has a value
     *
     * @return bool
     */
    public function hasFirmwareType()
    {
        return $this->firmware_type !== null;
    }

    /**
     * Get 'firmware_type' value
     *
     * @return string
     */
    public function getFirmwareType()
    {
        return $this->firmware_type;
    }

    /**
     * Set 'firmware_type' value
     *
     * @param string $value
     */
    public function setFirmwareType($value = null)
    {
        $this->firmware_type = $value;
    }

    /**
     * Check if 'firmware_fingerprint' has a value
     *
     * @return bool
     */
    public function hasFirmwareFingerprint()
    {
        return $this->firmware_fingerprint !== null;
    }

    /**
     * Get 'firmware_fingerprint' value
     *
     * @return string
     */
    public function getFirmwareFingerprint()
    {
        return $this->firmware_fingerprint;
    }

    /**
     * Set 'firmware_fingerprint' value
     *
     * @param string $value
     */
    public function setFirmwareFingerprint($value = null)
    {
        $this->firmware_fingerprint = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'device_id' => null,
            'android_board_name' => null,
            'android_bootloader' => null,
            'device_brand' => null,
            'device_model' => null,
            'device_model_identifier' => null,
            'device_model_boot' => null,
            'hardware_manufacturer' => null,
            'hardware_model' => null,
            'firmware_brand' => null,
            'firmware_tags' => null,
            'firmware_type' => null,
            'firmware_fingerprint' => null
        ], $values);

        $message->setDeviceId($values['device_id']);
        $message->setAndroidBoardName($values['android_board_name']);
        $message->setAndroidBootloader($values['android_bootloader']);
        $message->setDeviceBrand($values['device_brand']);
        $message->setDeviceModel($values['device_model']);
        $message->setDeviceModelIdentifier($values['device_model_identifier']);
        $message->setDeviceModelBoot($values['device_model_boot']);
        $message->setHardwareManufacturer($values['hardware_manufacturer']);
        $message->setHardwareModel($values['hardware_model']);
        $message->setFirmwareBrand($values['firmware_brand']);
        $message->setFirmwareTags($values['firmware_tags']);
        $message->setFirmwareType($values['firmware_type']);
        $message->setFirmwareFingerprint($values['firmware_fingerprint']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DeviceInfo',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'device_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'android_board_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'android_bootloader',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'device_brand',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'device_model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'device_model_identifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'device_model_boot',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'hardware_manufacturer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'hardware_model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'firmware_brand',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'firmware_tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'firmware_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'firmware_fingerprint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->device_id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->device_id);
        }

        if ($this->android_board_name !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->android_board_name);
        }

        if ($this->android_bootloader !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->android_bootloader);
        }

        if ($this->device_brand !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->device_brand);
        }

        if ($this->device_model !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->device_model);
        }

        if ($this->device_model_identifier !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->device_model_identifier);
        }

        if ($this->device_model_boot !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->device_model_boot);
        }

        if ($this->hardware_manufacturer !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeString($stream, $this->hardware_manufacturer);
        }

        if ($this->hardware_model !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->hardware_model);
        }

        if ($this->firmware_brand !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->firmware_brand);
        }

        if ($this->firmware_tags !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->firmware_tags);
        }

        if ($this->firmware_type !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->firmware_type);
        }

        if ($this->firmware_fingerprint !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->firmware_fingerprint);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->android_board_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->android_bootloader = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_brand = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_model = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_model_identifier = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->device_model_boot = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->hardware_manufacturer = $reader->readString($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->hardware_model = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->firmware_brand = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->firmware_tags = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->firmware_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->firmware_fingerprint = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->device_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_id);
        }

        if ($this->android_board_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->android_board_name);
        }

        if ($this->android_bootloader !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->android_bootloader);
        }

        if ($this->device_brand !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_brand);
        }

        if ($this->device_model !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_model);
        }

        if ($this->device_model_identifier !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_model_identifier);
        }

        if ($this->device_model_boot !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->device_model_boot);
        }

        if ($this->hardware_manufacturer !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->hardware_manufacturer);
        }

        if ($this->hardware_model !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->hardware_model);
        }

        if ($this->firmware_brand !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->firmware_brand);
        }

        if ($this->firmware_tags !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->firmware_tags);
        }

        if ($this->firmware_type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->firmware_type);
        }

        if ($this->firmware_fingerprint !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->firmware_fingerprint);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->device_id = null;
        $this->android_board_name = null;
        $this->android_bootloader = null;
        $this->device_brand = null;
        $this->device_model = null;
        $this->device_model_identifier = null;
        $this->device_model_boot = null;
        $this->hardware_manufacturer = null;
        $this->hardware_model = null;
        $this->firmware_brand = null;
        $this->firmware_tags = null;
        $this->firmware_type = null;
        $this->firmware_fingerprint = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Envelopes\Signature\DeviceInfo) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->device_id = ($message->device_id !== null) ? $message->device_id : $this->device_id;
        $this->android_board_name = ($message->android_board_name !== null) ? $message->android_board_name : $this->android_board_name;
        $this->android_bootloader = ($message->android_bootloader !== null) ? $message->android_bootloader : $this->android_bootloader;
        $this->device_brand = ($message->device_brand !== null) ? $message->device_brand : $this->device_brand;
        $this->device_model = ($message->device_model !== null) ? $message->device_model : $this->device_model;
        $this->device_model_identifier = ($message->device_model_identifier !== null) ? $message->device_model_identifier : $this->device_model_identifier;
        $this->device_model_boot = ($message->device_model_boot !== null) ? $message->device_model_boot : $this->device_model_boot;
        $this->hardware_manufacturer = ($message->hardware_manufacturer !== null) ? $message->hardware_manufacturer : $this->hardware_manufacturer;
        $this->hardware_model = ($message->hardware_model !== null) ? $message->hardware_model : $this->hardware_model;
        $this->firmware_brand = ($message->firmware_brand !== null) ? $message->firmware_brand : $this->firmware_brand;
        $this->firmware_tags = ($message->firmware_tags !== null) ? $message->firmware_tags : $this->firmware_tags;
        $this->firmware_type = ($message->firmware_type !== null) ? $message->firmware_type : $this->firmware_type;
        $this->firmware_fingerprint = ($message->firmware_fingerprint !== null) ? $message->firmware_fingerprint : $this->firmware_fingerprint;
    }


}

