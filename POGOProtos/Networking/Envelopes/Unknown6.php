<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Envelopes/Unknown6.php');

namespace POGOProtos\Networking\Envelopes {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Envelopes.Unknown6.Unknown2
  final class Unknown6_Unknown2 extends ProtobufMessage {

    private $_unknown;
    private $unknown1 = ""; // optional bytes unknown1 = 1

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional bytes unknown1 = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->unknown1 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->unknown1 !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->unknown1));
        fwrite($fp, $this->unknown1);
      }
    }

    public function size() {
      $size = 0;
      if ($this->unknown1 !== "") {
        $l = strlen($this->unknown1);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearUnknown1() { $this->unknown1 = ""; }
    public function getUnknown1() { return $this->unknown1;}
    public function setUnknown1($value) { $this->unknown1 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('unknown1', $this->unknown1, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Unknown6.Unknown2)
  }

  // message POGOProtos.Networking.Envelopes.Unknown6
  final class Unknown6 extends ProtobufMessage {

    private $_unknown;
    private $unknown1 = 0; // optional int32 unknown1 = 1
    private $unknown2 = null; // optional .POGOProtos.Networking.Envelopes.Unknown6.Unknown2 unknown2 = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 unknown1 = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->unknown1 = $tmp;

            break;
          case 2: // optional .POGOProtos.Networking.Envelopes.Unknown6.Unknown2 unknown2 = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->unknown2 = new \POGOProtos\Networking\Envelopes\Unknown6_Unknown2($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Unknown6_Unknown2 did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->unknown1 !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->unknown1);
      }
      if ($this->unknown2 !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->unknown2->size());
        $this->unknown2->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->unknown1 !== 0) {
        $size += 1 + Protobuf::size_varint($this->unknown1);
      }
      if ($this->unknown2 !== null) {
        $l = $this->unknown2->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearUnknown1() { $this->unknown1 = 0; }
    public function getUnknown1() { return $this->unknown1;}
    public function setUnknown1($value) { $this->unknown1 = $value; }

    public function clearUnknown2() { $this->unknown2 = null; }
    public function getUnknown2() { return $this->unknown2;}
    public function setUnknown2(\POGOProtos\Networking\Envelopes\Unknown6_Unknown2 $value) { $this->unknown2 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('unknown1', $this->unknown1, 0)
           . Protobuf::toString('unknown2', $this->unknown2, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Unknown6)
  }

}