<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Requests/Messages/AttackGymMessage.php');

namespace POGOProtos\Networking\Requests\Messages {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Requests.Messages.AttackGymMessage
  final class AttackGymMessage extends ProtobufMessage {

    private $_unknown;
    private $gymId = ""; // optional string gym_id = 1
    private $battleId = ""; // optional string battle_id = 2
    private $attackActions = array(); // repeated .POGOProtos.Data.Battle.BattleAction attack_actions = 3
    private $lastRetrievedActions = null; // optional .POGOProtos.Data.Battle.BattleAction last_retrieved_actions = 4
    private $playerLatitude = 0; // optional double player_latitude = 5
    private $playerLongitude = 0; // optional double player_longitude = 6

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string gym_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->gymId = $tmp;

            break;
          case 2: // optional string battle_id = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->battleId = $tmp;

            break;
          case 3: // repeated .POGOProtos.Data.Battle.BattleAction attack_actions = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->attackActions[] = new \POGOProtos\Data\Battle\BattleAction($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Battle\BattleAction did not read the full length');

            break;
          case 4: // optional .POGOProtos.Data.Battle.BattleAction last_retrieved_actions = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->lastRetrievedActions = new \POGOProtos\Data\Battle\BattleAction($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Battle\BattleAction did not read the full length');

            break;
          case 5: // optional double player_latitude = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->playerLatitude = $tmp;

            break;
          case 6: // optional double player_longitude = 6
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->playerLongitude = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->gymId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->gymId));
        fwrite($fp, $this->gymId);
      }
      if ($this->battleId !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->battleId));
        fwrite($fp, $this->battleId);
      }
      foreach($this->attackActions as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->lastRetrievedActions !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->lastRetrievedActions->size());
        $this->lastRetrievedActions->write($fp);
      }
      if ($this->playerLatitude !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->playerLatitude);
      }
      if ($this->playerLongitude !== 0) {
        fwrite($fp, "1", 1);
        Protobuf::write_double($fp, $this->playerLongitude);
      }
    }

    public function size() {
      $size = 0;
      if ($this->gymId !== "") {
        $l = strlen($this->gymId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->battleId !== "") {
        $l = strlen($this->battleId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->attackActions as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->lastRetrievedActions !== null) {
        $l = $this->lastRetrievedActions->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->playerLatitude !== 0) {
        $size += 9;
      }
      if ($this->playerLongitude !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearGymId() { $this->gymId = ""; }
    public function getGymId() { return $this->gymId;}
    public function setGymId($value) { $this->gymId = $value; }

    public function clearBattleId() { $this->battleId = ""; }
    public function getBattleId() { return $this->battleId;}
    public function setBattleId($value) { $this->battleId = $value; }

    public function clearAttackActions() { $this->attackActions = array(); }
    public function getAttackActionsCount() { return count($this->attackActions); }
    public function getAttackActions($index) { return $this->attackActions[$index]; }
    public function getAttackActionsArray() { return $this->attackActions; }
    public function setAttackActions($index, array $value) {$this->attackActions[$index] = $value; }
    public function addAttackActions(array $value) { $this->attackActions[] = $value; }
    public function addAllAttackActions(array $values) { foreach($values as $value) {$this->attackActions[] = $value; }}

    public function clearLastRetrievedActions() { $this->lastRetrievedActions = null; }
    public function getLastRetrievedActions() { return $this->lastRetrievedActions;}
    public function setLastRetrievedActions(\POGOProtos\Data\Battle\BattleAction $value) { $this->lastRetrievedActions = $value; }

    public function clearPlayerLatitude() { $this->playerLatitude = 0; }
    public function getPlayerLatitude() { return $this->playerLatitude;}
    public function setPlayerLatitude($value) { $this->playerLatitude = $value; }

    public function clearPlayerLongitude() { $this->playerLongitude = 0; }
    public function getPlayerLongitude() { return $this->playerLongitude;}
    public function setPlayerLongitude($value) { $this->playerLongitude = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('gym_id', $this->gymId, "")
           . Protobuf::toString('battle_id', $this->battleId, "")
           . Protobuf::toString('attack_actions', $this->attackActions, null)
           . Protobuf::toString('last_retrieved_actions', $this->lastRetrievedActions, null)
           . Protobuf::toString('player_latitude', $this->playerLatitude, 0)
           . Protobuf::toString('player_longitude', $this->playerLongitude, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Requests.Messages.AttackGymMessage)
  }

}