<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Requests.Messages.proto
 */


namespace POGOProtos\Networking\Requests\Messages;

/**
 * Protobuf message : POGOProtos.Networking.Requests.Messages.GetMapObjectsMessage
 */
class GetMapObjectsMessage extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * cell_id repeated uint64 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $cell_id = null;

    /**
     * since_timestamp_ms repeated int64 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $since_timestamp_ms = null;

    /**
     * latitude optional double = 3
     *
     * @var float
     */
    protected $latitude = null;

    /**
     * longitude optional double = 4
     *
     * @var float
     */
    protected $longitude = null;

    /**
     * Check if 'cell_id' has a value
     *
     * @return bool
     */
    public function hasCellIdList()
    {
        return $this->cell_id !== null;
    }

    /**
     * Get 'cell_id' value
     *
     * @return \Protobuf\Collection
     */
    public function getCellIdList()
    {
        return $this->cell_id;
    }

    /**
     * Set 'cell_id' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setCellIdList(\Protobuf\Collection $value = null)
    {
        $this->cell_id = $value;
    }

    /**
     * Add a new element to 'cell_id'
     *
     * @param int $value
     */
    public function addCellId($value)
    {
        if ($this->cell_id === null) {
            $this->cell_id = new \Protobuf\ScalarCollection();
        }

        $this->cell_id->add($value);
    }

    /**
     * Check if 'since_timestamp_ms' has a value
     *
     * @return bool
     */
    public function hasSinceTimestampMsList()
    {
        return $this->since_timestamp_ms !== null;
    }

    /**
     * Get 'since_timestamp_ms' value
     *
     * @return \Protobuf\Collection
     */
    public function getSinceTimestampMsList()
    {
        return $this->since_timestamp_ms;
    }

    /**
     * Set 'since_timestamp_ms' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSinceTimestampMsList(\Protobuf\Collection $value = null)
    {
        $this->since_timestamp_ms = $value;
    }

    /**
     * Add a new element to 'since_timestamp_ms'
     *
     * @param int $value
     */
    public function addSinceTimestampMs($value)
    {
        if ($this->since_timestamp_ms === null) {
            $this->since_timestamp_ms = new \Protobuf\ScalarCollection();
        }

        $this->since_timestamp_ms->add($value);
    }

    /**
     * Check if 'latitude' has a value
     *
     * @return bool
     */
    public function hasLatitude()
    {
        return $this->latitude !== null;
    }

    /**
     * Get 'latitude' value
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * Set 'latitude' value
     *
     * @param float $value
     */
    public function setLatitude($value = null)
    {
        $this->latitude = $value;
    }

    /**
     * Check if 'longitude' has a value
     *
     * @return bool
     */
    public function hasLongitude()
    {
        return $this->longitude !== null;
    }

    /**
     * Get 'longitude' value
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * Set 'longitude' value
     *
     * @param float $value
     */
    public function setLongitude($value = null)
    {
        $this->longitude = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'cell_id' => [],
            'since_timestamp_ms' => [],
            'latitude' => null,
            'longitude' => null
        ], $values);

        $message->setLatitude($values['latitude']);
        $message->setLongitude($values['longitude']);

        foreach ($values['cell_id'] as $item) {
            $message->addCellId($item);
        }

        foreach ($values['since_timestamp_ms'] as $item) {
            $message->addSinceTimestampMs($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GetMapObjectsMessage',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'cell_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'since_timestamp_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'latitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'longitude',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->cell_id !== null) {
            $innerSize   = 0;
            $calculator  = $sizeContext->getSizeCalculator();

            foreach ($this->cell_id as $val) {
                $innerSize += $calculator->computeVarintSize($val);
            }

            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $innerSize);

            foreach ($this->cell_id as $val) {
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->since_timestamp_ms !== null) {
            $innerSize   = 0;
            $calculator  = $sizeContext->getSizeCalculator();

            foreach ($this->since_timestamp_ms as $val) {
                $innerSize += $calculator->computeVarintSize($val);
            }

            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $innerSize);

            foreach ($this->since_timestamp_ms as $val) {
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->latitude !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeDouble($stream, $this->latitude);
        }

        if ($this->longitude !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeDouble($stream, $this->longitude);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->cell_id === null) {
                    $this->cell_id = new \Protobuf\ScalarCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->cell_id->add($reader->readVarint($stream));
                }

                continue;
            }

            if ($tag === 2) {
                $innerSize  = $reader->readVarint($stream);
                $innerLimit = $stream->tell() + $innerSize;

                if ($this->since_timestamp_ms === null) {
                    $this->since_timestamp_ms = new \Protobuf\ScalarCollection();
                }

                while ($stream->tell() < $innerLimit) {
                    $this->since_timestamp_ms->add($reader->readVarint($stream));
                }

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->latitude = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->longitude = $reader->readDouble($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->cell_id !== null) {
            $innerSize = 0;

            foreach ($this->cell_id as $val) {
                $innerSize += $calculator->computeVarintSize($val);
            }

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->since_timestamp_ms !== null) {
            $innerSize = 0;

            foreach ($this->since_timestamp_ms as $val) {
                $innerSize += $calculator->computeVarintSize($val);
            }

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->latitude !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->longitude !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->cell_id = null;
        $this->since_timestamp_ms = null;
        $this->latitude = null;
        $this->longitude = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Requests\Messages\GetMapObjectsMessage) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->cell_id = ($message->cell_id !== null) ? $message->cell_id : $this->cell_id;
        $this->since_timestamp_ms = ($message->since_timestamp_ms !== null) ? $message->since_timestamp_ms : $this->since_timestamp_ms;
        $this->latitude = ($message->latitude !== null) ? $message->latitude : $this->latitude;
        $this->longitude = ($message->longitude !== null) ? $message->longitude : $this->longitude;
    }


}

