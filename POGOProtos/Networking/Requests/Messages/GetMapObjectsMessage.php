<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Requests/Messages/GetMapObjectsMessage.php');

namespace POGOProtos\Networking\Requests\Messages {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Networking.Requests.Messages.GetMapObjectsMessage
  final class GetMapObjectsMessage extends ProtobufMessage {

    private $_unknown;
    private $cellId = array(); // repeated uint64 cell_id = 1 [packed = true]
    private $sinceTimestampMs = array(); // repeated int64 since_timestamp_ms = 2 [packed = true]
    private $latitude = 0; // optional double latitude = 3
    private $longitude = 0; // optional double longitude = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated uint64 cell_id = 1 [packed = true]
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->cellId[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->cellId[] = $tmp;
              }
            }

            break;
          case 2: // repeated int64 since_timestamp_ms = 2 [packed = true]
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->sinceTimestampMs[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->sinceTimestampMs[] = $tmp;
              }
            }

            break;
          case 3: // optional double latitude = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->latitude = $tmp;

            break;
          case 4: // optional double longitude = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->longitude = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->cellId as $v) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->sinceTimestampMs as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->longitude);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->cellId as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->sinceTimestampMs as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->latitude !== 0) {
        $size += 9;
      }
      if ($this->longitude !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearCellId() { $this->cellId = array(); }
    public function getCellIdCount() { return count($this->cellId); }
    public function getCellId($index) { return $this->cellId[$index]; }
    public function getCellIdArray() { return $this->cellId; }
    public function setCellId($index, array $value) {$this->cellId[$index] = $value; }
    public function addCellId( $value) { $this->cellId[] = $value; }
    public function addAllCellId(array $values) { foreach($values as $value) {$this->cellId[] = $value; }}

    public function clearSinceTimestampMs() { $this->sinceTimestampMs = array(); }
    public function getSinceTimestampMsCount() { return count($this->sinceTimestampMs); }
    public function getSinceTimestampMs($index) { return $this->sinceTimestampMs[$index]; }
    public function getSinceTimestampMsArray() { return $this->sinceTimestampMs; }
    public function setSinceTimestampMs($index, array $value) {$this->sinceTimestampMs[$index] = $value; }
    public function addSinceTimestampMs( $value) { $this->sinceTimestampMs[] = $value; }
    public function addAllSinceTimestampMs(array $values) { foreach($values as $value) {$this->sinceTimestampMs[] = $value; }}

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('cell_id', $this->cellId, 0)
           . Protobuf::toString('since_timestamp_ms', $this->sinceTimestampMs, 0)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Requests.Messages.GetMapObjectsMessage)
  }

}