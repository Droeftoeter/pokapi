<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Networking.Requests.Messages.proto
 */


namespace POGOProtos\Networking\Requests\Messages;

/**
 * Protobuf message : POGOProtos.Networking.Requests.Messages.CatchPokemonMessage
 */
class CatchPokemonMessage extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * encounter_id optional fixed64 = 1
     *
     * @var int
     */
    protected $encounter_id = null;

    /**
     * pokeball optional enum = 2
     *
     * @var \POGOProtos\Inventory\Item\ItemId
     */
    protected $pokeball = null;

    /**
     * normalized_reticle_size optional double = 3
     *
     * @var float
     */
    protected $normalized_reticle_size = null;

    /**
     * spawn_point_id optional string = 4
     *
     * @var string
     */
    protected $spawn_point_id = null;

    /**
     * hit_pokemon optional bool = 5
     *
     * @var bool
     */
    protected $hit_pokemon = null;

    /**
     * spin_modifier optional double = 6
     *
     * @var float
     */
    protected $spin_modifier = null;

    /**
     * normalized_hit_position optional double = 7
     *
     * @var float
     */
    protected $normalized_hit_position = null;

    /**
     * Check if 'encounter_id' has a value
     *
     * @return bool
     */
    public function hasEncounterId()
    {
        return $this->encounter_id !== null;
    }

    /**
     * Get 'encounter_id' value
     *
     * @return int
     */
    public function getEncounterId()
    {
        return $this->encounter_id;
    }

    /**
     * Set 'encounter_id' value
     *
     * @param int $value
     */
    public function setEncounterId($value = null)
    {
        $this->encounter_id = $value;
    }

    /**
     * Check if 'pokeball' has a value
     *
     * @return bool
     */
    public function hasPokeball()
    {
        return $this->pokeball !== null;
    }

    /**
     * Get 'pokeball' value
     *
     * @return \POGOProtos\Inventory\Item\ItemId
     */
    public function getPokeball()
    {
        return $this->pokeball;
    }

    /**
     * Set 'pokeball' value
     *
     * @param \POGOProtos\Inventory\Item\ItemId $value
     */
    public function setPokeball(\POGOProtos\Inventory\Item\ItemId $value = null)
    {
        $this->pokeball = $value;
    }

    /**
     * Check if 'normalized_reticle_size' has a value
     *
     * @return bool
     */
    public function hasNormalizedReticleSize()
    {
        return $this->normalized_reticle_size !== null;
    }

    /**
     * Get 'normalized_reticle_size' value
     *
     * @return float
     */
    public function getNormalizedReticleSize()
    {
        return $this->normalized_reticle_size;
    }

    /**
     * Set 'normalized_reticle_size' value
     *
     * @param float $value
     */
    public function setNormalizedReticleSize($value = null)
    {
        $this->normalized_reticle_size = $value;
    }

    /**
     * Check if 'spawn_point_id' has a value
     *
     * @return bool
     */
    public function hasSpawnPointId()
    {
        return $this->spawn_point_id !== null;
    }

    /**
     * Get 'spawn_point_id' value
     *
     * @return string
     */
    public function getSpawnPointId()
    {
        return $this->spawn_point_id;
    }

    /**
     * Set 'spawn_point_id' value
     *
     * @param string $value
     */
    public function setSpawnPointId($value = null)
    {
        $this->spawn_point_id = $value;
    }

    /**
     * Check if 'hit_pokemon' has a value
     *
     * @return bool
     */
    public function hasHitPokemon()
    {
        return $this->hit_pokemon !== null;
    }

    /**
     * Get 'hit_pokemon' value
     *
     * @return bool
     */
    public function getHitPokemon()
    {
        return $this->hit_pokemon;
    }

    /**
     * Set 'hit_pokemon' value
     *
     * @param bool $value
     */
    public function setHitPokemon($value = null)
    {
        $this->hit_pokemon = $value;
    }

    /**
     * Check if 'spin_modifier' has a value
     *
     * @return bool
     */
    public function hasSpinModifier()
    {
        return $this->spin_modifier !== null;
    }

    /**
     * Get 'spin_modifier' value
     *
     * @return float
     */
    public function getSpinModifier()
    {
        return $this->spin_modifier;
    }

    /**
     * Set 'spin_modifier' value
     *
     * @param float $value
     */
    public function setSpinModifier($value = null)
    {
        $this->spin_modifier = $value;
    }

    /**
     * Check if 'normalized_hit_position' has a value
     *
     * @return bool
     */
    public function hasNormalizedHitPosition()
    {
        return $this->normalized_hit_position !== null;
    }

    /**
     * Get 'normalized_hit_position' value
     *
     * @return float
     */
    public function getNormalizedHitPosition()
    {
        return $this->normalized_hit_position;
    }

    /**
     * Set 'normalized_hit_position' value
     *
     * @param float $value
     */
    public function setNormalizedHitPosition($value = null)
    {
        $this->normalized_hit_position = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'encounter_id' => null,
            'pokeball' => null,
            'normalized_reticle_size' => null,
            'spawn_point_id' => null,
            'hit_pokemon' => null,
            'spin_modifier' => null,
            'normalized_hit_position' => null
        ], $values);

        $message->setEncounterId($values['encounter_id']);
        $message->setPokeball($values['pokeball']);
        $message->setNormalizedReticleSize($values['normalized_reticle_size']);
        $message->setSpawnPointId($values['spawn_point_id']);
        $message->setHitPokemon($values['hit_pokemon']);
        $message->setSpinModifier($values['spin_modifier']);
        $message->setNormalizedHitPosition($values['normalized_hit_position']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CatchPokemonMessage',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'encounter_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FIXED64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'pokeball',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Inventory.Item.ItemId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'normalized_reticle_size',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'spawn_point_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'hit_pokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'spin_modifier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'normalized_hit_position',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->encounter_id !== null) {
            $writer->writeVarint($stream, 9);
            $writer->writeFixed64($stream, $this->encounter_id);
        }

        if ($this->pokeball !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->pokeball->value());
        }

        if ($this->normalized_reticle_size !== null) {
            $writer->writeVarint($stream, 25);
            $writer->writeDouble($stream, $this->normalized_reticle_size);
        }

        if ($this->spawn_point_id !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->spawn_point_id);
        }

        if ($this->hit_pokemon !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->hit_pokemon);
        }

        if ($this->spin_modifier !== null) {
            $writer->writeVarint($stream, 49);
            $writer->writeDouble($stream, $this->spin_modifier);
        }

        if ($this->normalized_hit_position !== null) {
            $writer->writeVarint($stream, 57);
            $writer->writeDouble($stream, $this->normalized_hit_position);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 6);

                $this->encounter_id = $reader->readFixed64($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->pokeball = \POGOProtos\Inventory\Item\ItemId::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->normalized_reticle_size = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->spawn_point_id = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->hit_pokemon = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->spin_modifier = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->normalized_hit_position = $reader->readDouble($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->encounter_id !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->pokeball !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokeball->value());
        }

        if ($this->normalized_reticle_size !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->spawn_point_id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->spawn_point_id);
        }

        if ($this->hit_pokemon !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->spin_modifier !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->normalized_hit_position !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->encounter_id = null;
        $this->pokeball = null;
        $this->normalized_reticle_size = null;
        $this->spawn_point_id = null;
        $this->hit_pokemon = null;
        $this->spin_modifier = null;
        $this->normalized_hit_position = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Networking\Requests\Messages\CatchPokemonMessage) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->encounter_id = ($message->encounter_id !== null) ? $message->encounter_id : $this->encounter_id;
        $this->pokeball = ($message->pokeball !== null) ? $message->pokeball : $this->pokeball;
        $this->normalized_reticle_size = ($message->normalized_reticle_size !== null) ? $message->normalized_reticle_size : $this->normalized_reticle_size;
        $this->spawn_point_id = ($message->spawn_point_id !== null) ? $message->spawn_point_id : $this->spawn_point_id;
        $this->hit_pokemon = ($message->hit_pokemon !== null) ? $message->hit_pokemon : $this->hit_pokemon;
        $this->spin_modifier = ($message->spin_modifier !== null) ? $message->spin_modifier : $this->spin_modifier;
        $this->normalized_hit_position = ($message->normalized_hit_position !== null) ? $message->normalized_hit_position : $this->normalized_hit_position;
    }


}

