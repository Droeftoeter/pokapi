<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Requests/Messages/StartGymBattleMessage.php');

namespace POGOProtos\Networking\Requests\Messages {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Networking.Requests.Messages.StartGymBattleMessage
  final class StartGymBattleMessage extends ProtobufMessage {

    private $_unknown;
    private $gymId = ""; // optional string gym_id = 1
    private $attackingPokemonIds = array(); // repeated fixed64 attacking_pokemon_ids = 2
    private $defendingPokemonId = 0; // optional uint64 defending_pokemon_id = 3
    private $playerLatitude = 0; // optional double player_latitude = 4
    private $playerLongitude = 0; // optional double player_longitude = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string gym_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->gymId = $tmp;

            break;
          case 2: // repeated fixed64 attacking_pokemon_ids = 2
            if($wire !== 2 && $wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 1 got: $wire");
            }
            if ($wire === 1) {
              $tmp = Protobuf::read_uint64($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
              $this->attackingPokemonIds[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_uint64($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
                $this->attackingPokemonIds[] = $tmp;
              }
            }

            break;
          case 3: // optional uint64 defending_pokemon_id = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->defendingPokemonId = $tmp;

            break;
          case 4: // optional double player_latitude = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->playerLatitude = $tmp;

            break;
          case 5: // optional double player_longitude = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->playerLongitude = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->gymId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->gymId));
        fwrite($fp, $this->gymId);
      }
      foreach($this->attackingPokemonIds as $v) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_uint64($fp, $v);
      }
      if ($this->defendingPokemonId !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->defendingPokemonId);
      }
      if ($this->playerLatitude !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->playerLatitude);
      }
      if ($this->playerLongitude !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->playerLongitude);
      }
    }

    public function size() {
      $size = 0;
      if ($this->gymId !== "") {
        $l = strlen($this->gymId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->attackingPokemonIds as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->defendingPokemonId !== 0) {
        $size += 1 + Protobuf::size_varint($this->defendingPokemonId);
      }
      if ($this->playerLatitude !== 0) {
        $size += 9;
      }
      if ($this->playerLongitude !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearGymId() { $this->gymId = ""; }
    public function getGymId() { return $this->gymId;}
    public function setGymId($value) { $this->gymId = $value; }

    public function clearAttackingPokemonIds() { $this->attackingPokemonIds = array(); }
    public function getAttackingPokemonIdsCount() { return count($this->attackingPokemonIds); }
    public function getAttackingPokemonIds($index) { return $this->attackingPokemonIds[$index]; }
    public function getAttackingPokemonIdsArray() { return $this->attackingPokemonIds; }
    public function setAttackingPokemonIds($index, array $value) {$this->attackingPokemonIds[$index] = $value; }
    public function addAttackingPokemonIds(array $value) { $this->attackingPokemonIds[] = $value; }
    public function addAllAttackingPokemonIds(array $values) { foreach($values as $value) {$this->attackingPokemonIds[] = $value; }}

    public function clearDefendingPokemonId() { $this->defendingPokemonId = 0; }
    public function getDefendingPokemonId() { return $this->defendingPokemonId;}
    public function setDefendingPokemonId($value) { $this->defendingPokemonId = $value; }

    public function clearPlayerLatitude() { $this->playerLatitude = 0; }
    public function getPlayerLatitude() { return $this->playerLatitude;}
    public function setPlayerLatitude($value) { $this->playerLatitude = $value; }

    public function clearPlayerLongitude() { $this->playerLongitude = 0; }
    public function getPlayerLongitude() { return $this->playerLongitude;}
    public function setPlayerLongitude($value) { $this->playerLongitude = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('gym_id', $this->gymId, "")
           . Protobuf::toString('attacking_pokemon_ids', $this->attackingPokemonIds, 0)
           . Protobuf::toString('defending_pokemon_id', $this->defendingPokemonId, 0)
           . Protobuf::toString('player_latitude', $this->playerLatitude, 0)
           . Protobuf::toString('player_longitude', $this->playerLongitude, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Requests.Messages.StartGymBattleMessage)
  }

}