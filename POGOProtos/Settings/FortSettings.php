<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/FortSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.FortSettings
  final class FortSettings extends ProtobufMessage {

    private $_unknown;
    private $interactionRangeMeters = 0; // optional double interaction_range_meters = 1
    private $maxTotalDeployedPokemon = 0; // optional int32 max_total_deployed_pokemon = 2
    private $maxPlayerDeployedPokemon = 0; // optional int32 max_player_deployed_pokemon = 3
    private $deployStaminaMultiplier = 0; // optional double deploy_stamina_multiplier = 4
    private $deployAttackMultiplier = 0; // optional double deploy_attack_multiplier = 5
    private $farInteractionRangeMeters = 0; // optional double far_interaction_range_meters = 6

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional double interaction_range_meters = 1
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->interactionRangeMeters = $tmp;

            break;
          case 2: // optional int32 max_total_deployed_pokemon = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxTotalDeployedPokemon = $tmp;

            break;
          case 3: // optional int32 max_player_deployed_pokemon = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxPlayerDeployedPokemon = $tmp;

            break;
          case 4: // optional double deploy_stamina_multiplier = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->deployStaminaMultiplier = $tmp;

            break;
          case 5: // optional double deploy_attack_multiplier = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->deployAttackMultiplier = $tmp;

            break;
          case 6: // optional double far_interaction_range_meters = 6
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->farInteractionRangeMeters = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->interactionRangeMeters !== 0) {
        fwrite($fp, "\x09", 1);
        Protobuf::write_double($fp, $this->interactionRangeMeters);
      }
      if ($this->maxTotalDeployedPokemon !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->maxTotalDeployedPokemon);
      }
      if ($this->maxPlayerDeployedPokemon !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->maxPlayerDeployedPokemon);
      }
      if ($this->deployStaminaMultiplier !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->deployStaminaMultiplier);
      }
      if ($this->deployAttackMultiplier !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->deployAttackMultiplier);
      }
      if ($this->farInteractionRangeMeters !== 0) {
        fwrite($fp, "1", 1);
        Protobuf::write_double($fp, $this->farInteractionRangeMeters);
      }
    }

    public function size() {
      $size = 0;
      if ($this->interactionRangeMeters !== 0) {
        $size += 9;
      }
      if ($this->maxTotalDeployedPokemon !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxTotalDeployedPokemon);
      }
      if ($this->maxPlayerDeployedPokemon !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxPlayerDeployedPokemon);
      }
      if ($this->deployStaminaMultiplier !== 0) {
        $size += 9;
      }
      if ($this->deployAttackMultiplier !== 0) {
        $size += 9;
      }
      if ($this->farInteractionRangeMeters !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearInteractionRangeMeters() { $this->interactionRangeMeters = 0; }
    public function getInteractionRangeMeters() { return $this->interactionRangeMeters;}
    public function setInteractionRangeMeters($value) { $this->interactionRangeMeters = $value; }

    public function clearMaxTotalDeployedPokemon() { $this->maxTotalDeployedPokemon = 0; }
    public function getMaxTotalDeployedPokemon() { return $this->maxTotalDeployedPokemon;}
    public function setMaxTotalDeployedPokemon($value) { $this->maxTotalDeployedPokemon = $value; }

    public function clearMaxPlayerDeployedPokemon() { $this->maxPlayerDeployedPokemon = 0; }
    public function getMaxPlayerDeployedPokemon() { return $this->maxPlayerDeployedPokemon;}
    public function setMaxPlayerDeployedPokemon($value) { $this->maxPlayerDeployedPokemon = $value; }

    public function clearDeployStaminaMultiplier() { $this->deployStaminaMultiplier = 0; }
    public function getDeployStaminaMultiplier() { return $this->deployStaminaMultiplier;}
    public function setDeployStaminaMultiplier($value) { $this->deployStaminaMultiplier = $value; }

    public function clearDeployAttackMultiplier() { $this->deployAttackMultiplier = 0; }
    public function getDeployAttackMultiplier() { return $this->deployAttackMultiplier;}
    public function setDeployAttackMultiplier($value) { $this->deployAttackMultiplier = $value; }

    public function clearFarInteractionRangeMeters() { $this->farInteractionRangeMeters = 0; }
    public function getFarInteractionRangeMeters() { return $this->farInteractionRangeMeters;}
    public function setFarInteractionRangeMeters($value) { $this->farInteractionRangeMeters = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('interaction_range_meters', $this->interactionRangeMeters, 0)
           . Protobuf::toString('max_total_deployed_pokemon', $this->maxTotalDeployedPokemon, 0)
           . Protobuf::toString('max_player_deployed_pokemon', $this->maxPlayerDeployedPokemon, 0)
           . Protobuf::toString('deploy_stamina_multiplier', $this->deployStaminaMultiplier, 0)
           . Protobuf::toString('deploy_attack_multiplier', $this->deployAttackMultiplier, 0)
           . Protobuf::toString('far_interaction_range_meters', $this->farInteractionRangeMeters, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.FortSettings)
  }

}