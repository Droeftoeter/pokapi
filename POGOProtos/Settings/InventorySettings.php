<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/InventorySettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.InventorySettings
  final class InventorySettings extends ProtobufMessage {

    private $_unknown;
    private $maxPokemon = 0; // optional int32 max_pokemon = 1
    private $maxBagItems = 0; // optional int32 max_bag_items = 2
    private $basePokemon = 0; // optional int32 base_pokemon = 3
    private $baseBagItems = 0; // optional int32 base_bag_items = 4
    private $baseEggs = 0; // optional int32 base_eggs = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 max_pokemon = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxPokemon = $tmp;

            break;
          case 2: // optional int32 max_bag_items = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxBagItems = $tmp;

            break;
          case 3: // optional int32 base_pokemon = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->basePokemon = $tmp;

            break;
          case 4: // optional int32 base_bag_items = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->baseBagItems = $tmp;

            break;
          case 5: // optional int32 base_eggs = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->baseEggs = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->maxPokemon !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->maxPokemon);
      }
      if ($this->maxBagItems !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->maxBagItems);
      }
      if ($this->basePokemon !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->basePokemon);
      }
      if ($this->baseBagItems !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->baseBagItems);
      }
      if ($this->baseEggs !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->baseEggs);
      }
    }

    public function size() {
      $size = 0;
      if ($this->maxPokemon !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxPokemon);
      }
      if ($this->maxBagItems !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxBagItems);
      }
      if ($this->basePokemon !== 0) {
        $size += 1 + Protobuf::size_varint($this->basePokemon);
      }
      if ($this->baseBagItems !== 0) {
        $size += 1 + Protobuf::size_varint($this->baseBagItems);
      }
      if ($this->baseEggs !== 0) {
        $size += 1 + Protobuf::size_varint($this->baseEggs);
      }
      return $size;
    }

    public function clearMaxPokemon() { $this->maxPokemon = 0; }
    public function getMaxPokemon() { return $this->maxPokemon;}
    public function setMaxPokemon($value) { $this->maxPokemon = $value; }

    public function clearMaxBagItems() { $this->maxBagItems = 0; }
    public function getMaxBagItems() { return $this->maxBagItems;}
    public function setMaxBagItems($value) { $this->maxBagItems = $value; }

    public function clearBasePokemon() { $this->basePokemon = 0; }
    public function getBasePokemon() { return $this->basePokemon;}
    public function setBasePokemon($value) { $this->basePokemon = $value; }

    public function clearBaseBagItems() { $this->baseBagItems = 0; }
    public function getBaseBagItems() { return $this->baseBagItems;}
    public function setBaseBagItems($value) { $this->baseBagItems = $value; }

    public function clearBaseEggs() { $this->baseEggs = 0; }
    public function getBaseEggs() { return $this->baseEggs;}
    public function setBaseEggs($value) { $this->baseEggs = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('max_pokemon', $this->maxPokemon, 0)
           . Protobuf::toString('max_bag_items', $this->maxBagItems, 0)
           . Protobuf::toString('base_pokemon', $this->basePokemon, 0)
           . Protobuf::toString('base_bag_items', $this->baseBagItems, 0)
           . Protobuf::toString('base_eggs', $this->baseEggs, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.InventorySettings)
  }

}