<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/PokemonUpgradeSettings.php');

namespace POGOProtos\Settings\Master {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.PokemonUpgradeSettings
  final class PokemonUpgradeSettings extends ProtobufMessage {

    private $_unknown;
    private $upgradesPerLevel = 0; // optional int32 upgrades_per_level = 1
    private $allowedLevelsAbovePlayer = 0; // optional int32 allowed_levels_above_player = 2
    private $candyCost = array(); // repeated int32 candy_cost = 3
    private $stardustCost = array(); // repeated int32 stardust_cost = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 upgrades_per_level = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->upgradesPerLevel = $tmp;

            break;
          case 2: // optional int32 allowed_levels_above_player = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->allowedLevelsAbovePlayer = $tmp;

            break;
          case 3: // repeated int32 candy_cost = 3
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->candyCost[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->candyCost[] = $tmp;
              }
            }

            break;
          case 4: // repeated int32 stardust_cost = 4
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->stardustCost[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->stardustCost[] = $tmp;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->upgradesPerLevel !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->upgradesPerLevel);
      }
      if ($this->allowedLevelsAbovePlayer !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->allowedLevelsAbovePlayer);
      }
      foreach($this->candyCost as $v) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->stardustCost as $v) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $v);
      }
    }

    public function size() {
      $size = 0;
      if ($this->upgradesPerLevel !== 0) {
        $size += 1 + Protobuf::size_varint($this->upgradesPerLevel);
      }
      if ($this->allowedLevelsAbovePlayer !== 0) {
        $size += 1 + Protobuf::size_varint($this->allowedLevelsAbovePlayer);
      }
      foreach($this->candyCost as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->stardustCost as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearUpgradesPerLevel() { $this->upgradesPerLevel = 0; }
    public function getUpgradesPerLevel() { return $this->upgradesPerLevel;}
    public function setUpgradesPerLevel($value) { $this->upgradesPerLevel = $value; }

    public function clearAllowedLevelsAbovePlayer() { $this->allowedLevelsAbovePlayer = 0; }
    public function getAllowedLevelsAbovePlayer() { return $this->allowedLevelsAbovePlayer;}
    public function setAllowedLevelsAbovePlayer($value) { $this->allowedLevelsAbovePlayer = $value; }

    public function clearCandyCost() { $this->candyCost = array(); }
    public function getCandyCostCount() { return count($this->candyCost); }
    public function getCandyCost($index) { return $this->candyCost[$index]; }
    public function getCandyCostArray() { return $this->candyCost; }
    public function setCandyCost($index, array $value) {$this->candyCost[$index] = $value; }
    public function addCandyCost(array $value) { $this->candyCost[] = $value; }
    public function addAllCandyCost(array $values) { foreach($values as $value) {$this->candyCost[] = $value; }}

    public function clearStardustCost() { $this->stardustCost = array(); }
    public function getStardustCostCount() { return count($this->stardustCost); }
    public function getStardustCost($index) { return $this->stardustCost[$index]; }
    public function getStardustCostArray() { return $this->stardustCost; }
    public function setStardustCost($index, array $value) {$this->stardustCost[$index] = $value; }
    public function addStardustCost(array $value) { $this->stardustCost[] = $value; }
    public function addAllStardustCost(array $values) { foreach($values as $value) {$this->stardustCost[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('upgrades_per_level', $this->upgradesPerLevel, 0)
           . Protobuf::toString('allowed_levels_above_player', $this->allowedLevelsAbovePlayer, 0)
           . Protobuf::toString('candy_cost', $this->candyCost, 0)
           . Protobuf::toString('stardust_cost', $this->stardustCost, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.PokemonUpgradeSettings)
  }

}