<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/ItemSettings.php');

namespace POGOProtos\Settings\Master {

  use POGOProtos\Enums\ItemCategory;
  use POGOProtos\Inventory\Item\ItemId;
  use POGOProtos\Inventory\Item\ItemType;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Settings.Master.ItemSettings
  final class ItemSettings extends ProtobufMessage {

    private $_unknown;
    private $itemId = ItemId::ITEM_UNKNOWN; // optional .POGOProtos.Inventory.Item.ItemId item_id = 1
    private $itemType = ItemType::ITEM_TYPE_NONE; // optional .POGOProtos.Inventory.Item.ItemType item_type = 2
    private $category = ItemCategory::ITEM_CATEGORY_NONE; // optional .POGOProtos.Enums.ItemCategory category = 3
    private $dropFreq = 0; // optional float drop_freq = 4
    private $dropTrainerLevel = 0; // optional int32 drop_trainer_level = 5
    private $pokeball = null; // optional .POGOProtos.Settings.Master.Item.PokeballAttributes pokeball = 6
    private $potion = null; // optional .POGOProtos.Settings.Master.Item.PotionAttributes potion = 7
    private $revive = null; // optional .POGOProtos.Settings.Master.Item.ReviveAttributes revive = 8
    private $battle = null; // optional .POGOProtos.Settings.Master.Item.BattleAttributes battle = 9
    private $food = null; // optional .POGOProtos.Settings.Master.Item.FoodAttributes food = 10
    private $inventoryUpgrade = null; // optional .POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventory_upgrade = 11
    private $xpBoost = null; // optional .POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xp_boost = 12
    private $incense = null; // optional .POGOProtos.Settings.Master.Item.IncenseAttributes incense = 13
    private $eggIncubator = null; // optional .POGOProtos.Settings.Master.Item.EggIncubatorAttributes egg_incubator = 14
    private $fortModifier = null; // optional .POGOProtos.Settings.Master.Item.FortModifierAttributes fort_modifier = 15

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Inventory.Item.ItemId item_id = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->itemId = $tmp;

            break;
          case 2: // optional .POGOProtos.Inventory.Item.ItemType item_type = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->itemType = $tmp;

            break;
          case 3: // optional .POGOProtos.Enums.ItemCategory category = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->category = $tmp;

            break;
          case 4: // optional float drop_freq = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->dropFreq = $tmp;

            break;
          case 5: // optional int32 drop_trainer_level = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->dropTrainerLevel = $tmp;

            break;
          case 6: // optional .POGOProtos.Settings.Master.Item.PokeballAttributes pokeball = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokeball = new \POGOProtos\Settings\Master\Item\PokeballAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\PokeballAttributes did not read the full length');

            break;
          case 7: // optional .POGOProtos.Settings.Master.Item.PotionAttributes potion = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->potion = new \POGOProtos\Settings\Master\Item\PotionAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\PotionAttributes did not read the full length');

            break;
          case 8: // optional .POGOProtos.Settings.Master.Item.ReviveAttributes revive = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->revive = new \POGOProtos\Settings\Master\Item\ReviveAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\ReviveAttributes did not read the full length');

            break;
          case 9: // optional .POGOProtos.Settings.Master.Item.BattleAttributes battle = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->battle = new \POGOProtos\Settings\Master\Item\BattleAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\BattleAttributes did not read the full length');

            break;
          case 10: // optional .POGOProtos.Settings.Master.Item.FoodAttributes food = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->food = new \POGOProtos\Settings\Master\Item\FoodAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\FoodAttributes did not read the full length');

            break;
          case 11: // optional .POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventory_upgrade = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->inventoryUpgrade = new \POGOProtos\Settings\Master\Item\InventoryUpgradeAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\InventoryUpgradeAttributes did not read the full length');

            break;
          case 12: // optional .POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xp_boost = 12
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->xpBoost = new \POGOProtos\Settings\Master\Item\ExperienceBoostAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\ExperienceBoostAttributes did not read the full length');

            break;
          case 13: // optional .POGOProtos.Settings.Master.Item.IncenseAttributes incense = 13
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->incense = new \POGOProtos\Settings\Master\Item\IncenseAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\IncenseAttributes did not read the full length');

            break;
          case 14: // optional .POGOProtos.Settings.Master.Item.EggIncubatorAttributes egg_incubator = 14
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->eggIncubator = new \POGOProtos\Settings\Master\Item\EggIncubatorAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\EggIncubatorAttributes did not read the full length');

            break;
          case 15: // optional .POGOProtos.Settings.Master.Item.FortModifierAttributes fort_modifier = 15
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->fortModifier = new \POGOProtos\Settings\Master\Item\FortModifierAttributes($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\Master\Item\FortModifierAttributes did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->itemId !== ItemId::ITEM_UNKNOWN) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->itemId);
      }
      if ($this->itemType !== ItemType::ITEM_TYPE_NONE) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->itemType);
      }
      if ($this->category !== ItemCategory::ITEM_CATEGORY_NONE) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->category);
      }
      if ($this->dropFreq !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->dropFreq);
      }
      if ($this->dropTrainerLevel !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->dropTrainerLevel);
      }
      if ($this->pokeball !== null) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $this->pokeball->size());
        $this->pokeball->write($fp);
      }
      if ($this->potion !== null) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->potion->size());
        $this->potion->write($fp);
      }
      if ($this->revive !== null) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->revive->size());
        $this->revive->write($fp);
      }
      if ($this->battle !== null) {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, $this->battle->size());
        $this->battle->write($fp);
      }
      if ($this->food !== null) {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, $this->food->size());
        $this->food->write($fp);
      }
      if ($this->inventoryUpgrade !== null) {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, $this->inventoryUpgrade->size());
        $this->inventoryUpgrade->write($fp);
      }
      if ($this->xpBoost !== null) {
        fwrite($fp, "b", 1);
        Protobuf::write_varint($fp, $this->xpBoost->size());
        $this->xpBoost->write($fp);
      }
      if ($this->incense !== null) {
        fwrite($fp, "j", 1);
        Protobuf::write_varint($fp, $this->incense->size());
        $this->incense->write($fp);
      }
      if ($this->eggIncubator !== null) {
        fwrite($fp, "r", 1);
        Protobuf::write_varint($fp, $this->eggIncubator->size());
        $this->eggIncubator->write($fp);
      }
      if ($this->fortModifier !== null) {
        fwrite($fp, "z", 1);
        Protobuf::write_varint($fp, $this->fortModifier->size());
        $this->fortModifier->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->itemId !== ItemId::ITEM_UNKNOWN) {
        $size += 1 + Protobuf::size_varint($this->itemId);
      }
      if ($this->itemType !== ItemType::ITEM_TYPE_NONE) {
        $size += 1 + Protobuf::size_varint($this->itemType);
      }
      if ($this->category !== ItemCategory::ITEM_CATEGORY_NONE) {
        $size += 1 + Protobuf::size_varint($this->category);
      }
      if ($this->dropFreq !== 0) {
        $size += 5;
      }
      if ($this->dropTrainerLevel !== 0) {
        $size += 1 + Protobuf::size_varint($this->dropTrainerLevel);
      }
      if ($this->pokeball !== null) {
        $l = $this->pokeball->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->potion !== null) {
        $l = $this->potion->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->revive !== null) {
        $l = $this->revive->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->battle !== null) {
        $l = $this->battle->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->food !== null) {
        $l = $this->food->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->inventoryUpgrade !== null) {
        $l = $this->inventoryUpgrade->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->xpBoost !== null) {
        $l = $this->xpBoost->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->incense !== null) {
        $l = $this->incense->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->eggIncubator !== null) {
        $l = $this->eggIncubator->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->fortModifier !== null) {
        $l = $this->fortModifier->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearItemId() { $this->itemId = ItemId::ITEM_UNKNOWN; }
    public function getItemId() { return $this->itemId;}
    public function setItemId($value) { $this->itemId = $value; }

    public function clearItemType() { $this->itemType = ItemType::ITEM_TYPE_NONE; }
    public function getItemType() { return $this->itemType;}
    public function setItemType($value) { $this->itemType = $value; }

    public function clearCategory() { $this->category = ItemCategory::ITEM_CATEGORY_NONE; }
    public function getCategory() { return $this->category;}
    public function setCategory($value) { $this->category = $value; }

    public function clearDropFreq() { $this->dropFreq = 0; }
    public function getDropFreq() { return $this->dropFreq;}
    public function setDropFreq($value) { $this->dropFreq = $value; }

    public function clearDropTrainerLevel() { $this->dropTrainerLevel = 0; }
    public function getDropTrainerLevel() { return $this->dropTrainerLevel;}
    public function setDropTrainerLevel($value) { $this->dropTrainerLevel = $value; }

    public function clearPokeball() { $this->pokeball = null; }
    public function getPokeball() { return $this->pokeball;}
    public function setPokeball(\POGOProtos\Settings\Master\Item\PokeballAttributes $value) { $this->pokeball = $value; }

    public function clearPotion() { $this->potion = null; }
    public function getPotion() { return $this->potion;}
    public function setPotion(\POGOProtos\Settings\Master\Item\PotionAttributes $value) { $this->potion = $value; }

    public function clearRevive() { $this->revive = null; }
    public function getRevive() { return $this->revive;}
    public function setRevive(\POGOProtos\Settings\Master\Item\ReviveAttributes $value) { $this->revive = $value; }

    public function clearBattle() { $this->battle = null; }
    public function getBattle() { return $this->battle;}
    public function setBattle(\POGOProtos\Settings\Master\Item\BattleAttributes $value) { $this->battle = $value; }

    public function clearFood() { $this->food = null; }
    public function getFood() { return $this->food;}
    public function setFood(\POGOProtos\Settings\Master\Item\FoodAttributes $value) { $this->food = $value; }

    public function clearInventoryUpgrade() { $this->inventoryUpgrade = null; }
    public function getInventoryUpgrade() { return $this->inventoryUpgrade;}
    public function setInventoryUpgrade(\POGOProtos\Settings\Master\Item\InventoryUpgradeAttributes $value) { $this->inventoryUpgrade = $value; }

    public function clearXpBoost() { $this->xpBoost = null; }
    public function getXpBoost() { return $this->xpBoost;}
    public function setXpBoost(\POGOProtos\Settings\Master\Item\ExperienceBoostAttributes $value) { $this->xpBoost = $value; }

    public function clearIncense() { $this->incense = null; }
    public function getIncense() { return $this->incense;}
    public function setIncense(\POGOProtos\Settings\Master\Item\IncenseAttributes $value) { $this->incense = $value; }

    public function clearEggIncubator() { $this->eggIncubator = null; }
    public function getEggIncubator() { return $this->eggIncubator;}
    public function setEggIncubator(\POGOProtos\Settings\Master\Item\EggIncubatorAttributes $value) { $this->eggIncubator = $value; }

    public function clearFortModifier() { $this->fortModifier = null; }
    public function getFortModifier() { return $this->fortModifier;}
    public function setFortModifier(\POGOProtos\Settings\Master\Item\FortModifierAttributes $value) { $this->fortModifier = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('item_id', $this->itemId, ItemId::ITEM_UNKNOWN)
           . Protobuf::toString('item_type', $this->itemType, ItemType::ITEM_TYPE_NONE)
           . Protobuf::toString('category', $this->category, ItemCategory::ITEM_CATEGORY_NONE)
           . Protobuf::toString('drop_freq', $this->dropFreq, 0)
           . Protobuf::toString('drop_trainer_level', $this->dropTrainerLevel, 0)
           . Protobuf::toString('pokeball', $this->pokeball, null)
           . Protobuf::toString('potion', $this->potion, null)
           . Protobuf::toString('revive', $this->revive, null)
           . Protobuf::toString('battle', $this->battle, null)
           . Protobuf::toString('food', $this->food, null)
           . Protobuf::toString('inventory_upgrade', $this->inventoryUpgrade, null)
           . Protobuf::toString('xp_boost', $this->xpBoost, null)
           . Protobuf::toString('incense', $this->incense, null)
           . Protobuf::toString('egg_incubator', $this->eggIncubator, null)
           . Protobuf::toString('fort_modifier', $this->fortModifier, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.ItemSettings)
  }

}