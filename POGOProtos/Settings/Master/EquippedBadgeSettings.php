<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/EquippedBadgeSettings.php');

namespace POGOProtos\Settings\Master {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.EquippedBadgeSettings
  final class EquippedBadgeSettings extends ProtobufMessage {

    private $_unknown;
    private $equipBadgeCooldownMs = 0; // optional int64 equip_badge_cooldown_ms = 1
    private $catchProbabilityBonus = array(); // repeated float catch_probability_bonus = 2
    private $fleeProbabilityBonus = array(); // repeated float flee_probability_bonus = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int64 equip_badge_cooldown_ms = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->equipBadgeCooldownMs = $tmp;

            break;
          case 2: // repeated float catch_probability_bonus = 2
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->catchProbabilityBonus[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->catchProbabilityBonus[] = $tmp;
              }
            }

            break;
          case 3: // repeated float flee_probability_bonus = 3
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->fleeProbabilityBonus[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->fleeProbabilityBonus[] = $tmp;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->equipBadgeCooldownMs !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->equipBadgeCooldownMs);
      }
      foreach($this->catchProbabilityBonus as $v) {
        fwrite($fp, "\x15", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->fleeProbabilityBonus as $v) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $v);
      }
    }

    public function size() {
      $size = 0;
      if ($this->equipBadgeCooldownMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->equipBadgeCooldownMs);
      }
      foreach($this->catchProbabilityBonus as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->fleeProbabilityBonus as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearEquipBadgeCooldownMs() { $this->equipBadgeCooldownMs = 0; }
    public function getEquipBadgeCooldownMs() { return $this->equipBadgeCooldownMs;}
    public function setEquipBadgeCooldownMs($value) { $this->equipBadgeCooldownMs = $value; }

    public function clearCatchProbabilityBonus() { $this->catchProbabilityBonus = array(); }
    public function getCatchProbabilityBonusCount() { return count($this->catchProbabilityBonus); }
    public function getCatchProbabilityBonus($index) { return $this->catchProbabilityBonus[$index]; }
    public function getCatchProbabilityBonusArray() { return $this->catchProbabilityBonus; }
    public function setCatchProbabilityBonus($index, array $value) {$this->catchProbabilityBonus[$index] = $value; }
    public function addCatchProbabilityBonus(array $value) { $this->catchProbabilityBonus[] = $value; }
    public function addAllCatchProbabilityBonus(array $values) { foreach($values as $value) {$this->catchProbabilityBonus[] = $value; }}

    public function clearFleeProbabilityBonus() { $this->fleeProbabilityBonus = array(); }
    public function getFleeProbabilityBonusCount() { return count($this->fleeProbabilityBonus); }
    public function getFleeProbabilityBonus($index) { return $this->fleeProbabilityBonus[$index]; }
    public function getFleeProbabilityBonusArray() { return $this->fleeProbabilityBonus; }
    public function setFleeProbabilityBonus($index, array $value) {$this->fleeProbabilityBonus[$index] = $value; }
    public function addFleeProbabilityBonus(array $value) { $this->fleeProbabilityBonus[] = $value; }
    public function addAllFleeProbabilityBonus(array $values) { foreach($values as $value) {$this->fleeProbabilityBonus[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('equip_badge_cooldown_ms', $this->equipBadgeCooldownMs, 0)
           . Protobuf::toString('catch_probability_bonus', $this->catchProbabilityBonus, 0)
           . Protobuf::toString('flee_probability_bonus', $this->fleeProbabilityBonus, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.EquippedBadgeSettings)
  }

}