<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.PlayerLevelSettings
 */
class PlayerLevelSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * rank_num repeated int32 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $rank_num = null;

    /**
     * required_experience repeated int32 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $required_experience = null;

    /**
     * cp_multiplier repeated float = 3
     *
     * @var \Protobuf\Collection
     */
    protected $cp_multiplier = null;

    /**
     * max_egg_player_level optional int32 = 4
     *
     * @var int
     */
    protected $max_egg_player_level = null;

    /**
     * max_encounter_player_level optional int32 = 5
     *
     * @var int
     */
    protected $max_encounter_player_level = null;

    /**
     * Check if 'rank_num' has a value
     *
     * @return bool
     */
    public function hasRankNumList()
    {
        return $this->rank_num !== null;
    }

    /**
     * Get 'rank_num' value
     *
     * @return \Protobuf\Collection
     */
    public function getRankNumList()
    {
        return $this->rank_num;
    }

    /**
     * Set 'rank_num' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRankNumList(\Protobuf\Collection $value = null)
    {
        $this->rank_num = $value;
    }

    /**
     * Add a new element to 'rank_num'
     *
     * @param int $value
     */
    public function addRankNum($value)
    {
        if ($this->rank_num === null) {
            $this->rank_num = new \Protobuf\ScalarCollection();
        }

        $this->rank_num->add($value);
    }

    /**
     * Check if 'required_experience' has a value
     *
     * @return bool
     */
    public function hasRequiredExperienceList()
    {
        return $this->required_experience !== null;
    }

    /**
     * Get 'required_experience' value
     *
     * @return \Protobuf\Collection
     */
    public function getRequiredExperienceList()
    {
        return $this->required_experience;
    }

    /**
     * Set 'required_experience' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRequiredExperienceList(\Protobuf\Collection $value = null)
    {
        $this->required_experience = $value;
    }

    /**
     * Add a new element to 'required_experience'
     *
     * @param int $value
     */
    public function addRequiredExperience($value)
    {
        if ($this->required_experience === null) {
            $this->required_experience = new \Protobuf\ScalarCollection();
        }

        $this->required_experience->add($value);
    }

    /**
     * Check if 'cp_multiplier' has a value
     *
     * @return bool
     */
    public function hasCpMultiplierList()
    {
        return $this->cp_multiplier !== null;
    }

    /**
     * Get 'cp_multiplier' value
     *
     * @return \Protobuf\Collection
     */
    public function getCpMultiplierList()
    {
        return $this->cp_multiplier;
    }

    /**
     * Set 'cp_multiplier' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setCpMultiplierList(\Protobuf\Collection $value = null)
    {
        $this->cp_multiplier = $value;
    }

    /**
     * Add a new element to 'cp_multiplier'
     *
     * @param float $value
     */
    public function addCpMultiplier($value)
    {
        if ($this->cp_multiplier === null) {
            $this->cp_multiplier = new \Protobuf\ScalarCollection();
        }

        $this->cp_multiplier->add($value);
    }

    /**
     * Check if 'max_egg_player_level' has a value
     *
     * @return bool
     */
    public function hasMaxEggPlayerLevel()
    {
        return $this->max_egg_player_level !== null;
    }

    /**
     * Get 'max_egg_player_level' value
     *
     * @return int
     */
    public function getMaxEggPlayerLevel()
    {
        return $this->max_egg_player_level;
    }

    /**
     * Set 'max_egg_player_level' value
     *
     * @param int $value
     */
    public function setMaxEggPlayerLevel($value = null)
    {
        $this->max_egg_player_level = $value;
    }

    /**
     * Check if 'max_encounter_player_level' has a value
     *
     * @return bool
     */
    public function hasMaxEncounterPlayerLevel()
    {
        return $this->max_encounter_player_level !== null;
    }

    /**
     * Get 'max_encounter_player_level' value
     *
     * @return int
     */
    public function getMaxEncounterPlayerLevel()
    {
        return $this->max_encounter_player_level;
    }

    /**
     * Set 'max_encounter_player_level' value
     *
     * @param int $value
     */
    public function setMaxEncounterPlayerLevel($value = null)
    {
        $this->max_encounter_player_level = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'rank_num' => [],
            'required_experience' => [],
            'cp_multiplier' => [],
            'max_egg_player_level' => null,
            'max_encounter_player_level' => null
        ], $values);

        $message->setMaxEggPlayerLevel($values['max_egg_player_level']);
        $message->setMaxEncounterPlayerLevel($values['max_encounter_player_level']);

        foreach ($values['rank_num'] as $item) {
            $message->addRankNum($item);
        }

        foreach ($values['required_experience'] as $item) {
            $message->addRequiredExperience($item);
        }

        foreach ($values['cp_multiplier'] as $item) {
            $message->addCpMultiplier($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'PlayerLevelSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'rank_num',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'required_experience',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'cp_multiplier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'max_egg_player_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'max_encounter_player_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->rank_num !== null) {
            foreach ($this->rank_num as $val) {
                $writer->writeVarint($stream, 8);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->required_experience !== null) {
            foreach ($this->required_experience as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->cp_multiplier !== null) {
            foreach ($this->cp_multiplier as $val) {
                $writer->writeVarint($stream, 29);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->max_egg_player_level !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->max_egg_player_level);
        }

        if ($this->max_encounter_player_level !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->max_encounter_player_level);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->rank_num === null) {
                    $this->rank_num = new \Protobuf\ScalarCollection();
                }

                $this->rank_num->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->required_experience === null) {
                    $this->required_experience = new \Protobuf\ScalarCollection();
                }

                $this->required_experience->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->cp_multiplier === null) {
                    $this->cp_multiplier = new \Protobuf\ScalarCollection();
                }

                $this->cp_multiplier->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_egg_player_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->max_encounter_player_level = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->rank_num !== null) {
            foreach ($this->rank_num as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->required_experience !== null) {
            foreach ($this->required_experience as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->cp_multiplier !== null) {
            foreach ($this->cp_multiplier as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->max_egg_player_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_egg_player_level);
        }

        if ($this->max_encounter_player_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_encounter_player_level);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->rank_num = null;
        $this->required_experience = null;
        $this->cp_multiplier = null;
        $this->max_egg_player_level = null;
        $this->max_encounter_player_level = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\PlayerLevelSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->rank_num = ($message->rank_num !== null) ? $message->rank_num : $this->rank_num;
        $this->required_experience = ($message->required_experience !== null) ? $message->required_experience : $this->required_experience;
        $this->cp_multiplier = ($message->cp_multiplier !== null) ? $message->cp_multiplier : $this->cp_multiplier;
        $this->max_egg_player_level = ($message->max_egg_player_level !== null) ? $message->max_egg_player_level : $this->max_egg_player_level;
        $this->max_encounter_player_level = ($message->max_encounter_player_level !== null) ? $message->max_encounter_player_level : $this->max_encounter_player_level;
    }


}

