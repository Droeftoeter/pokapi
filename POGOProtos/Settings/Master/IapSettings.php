<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/IapSettings.php');

namespace POGOProtos\Settings\Master {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.IapSettings
  final class IapSettings extends ProtobufMessage {

    private $_unknown;
    private $dailyBonusCoins = 0; // optional int32 daily_bonus_coins = 1
    private $dailyDefenderBonusPerPokemon = array(); // repeated int32 daily_defender_bonus_per_pokemon = 2
    private $dailyDefenderBonusMaxDefenders = 0; // optional int32 daily_defender_bonus_max_defenders = 3
    private $dailyDefenderBonusCurrency = array(); // repeated string daily_defender_bonus_currency = 4
    private $minTimeBetweenClaimsMs = 0; // optional int64 min_time_between_claims_ms = 5
    private $dailyBonusEnabled = false; // optional bool daily_bonus_enabled = 6
    private $dailyDefenderBonusEnabled = false; // optional bool daily_defender_bonus_enabled = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 daily_bonus_coins = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->dailyBonusCoins = $tmp;

            break;
          case 2: // repeated int32 daily_defender_bonus_per_pokemon = 2
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->dailyDefenderBonusPerPokemon[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->dailyDefenderBonusPerPokemon[] = $tmp;
              }
            }

            break;
          case 3: // optional int32 daily_defender_bonus_max_defenders = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->dailyDefenderBonusMaxDefenders = $tmp;

            break;
          case 4: // repeated string daily_defender_bonus_currency = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->dailyDefenderBonusCurrency[] = $tmp;

            break;
          case 5: // optional int64 min_time_between_claims_ms = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->minTimeBetweenClaimsMs = $tmp;

            break;
          case 6: // optional bool daily_bonus_enabled = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->dailyBonusEnabled = ($tmp > 0) ? true : false;

            break;
          case 7: // optional bool daily_defender_bonus_enabled = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->dailyDefenderBonusEnabled = ($tmp > 0) ? true : false;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->dailyBonusCoins !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->dailyBonusCoins);
      }
      foreach($this->dailyDefenderBonusPerPokemon as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      if ($this->dailyDefenderBonusMaxDefenders !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->dailyDefenderBonusMaxDefenders);
      }
      foreach($this->dailyDefenderBonusCurrency as $v) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if ($this->minTimeBetweenClaimsMs !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->minTimeBetweenClaimsMs);
      }
      if ($this->dailyBonusEnabled !== false) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->dailyBonusEnabled ? 1 : 0);
      }
      if ($this->dailyDefenderBonusEnabled !== false) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->dailyDefenderBonusEnabled ? 1 : 0);
      }
    }

    public function size() {
      $size = 0;
      if ($this->dailyBonusCoins !== 0) {
        $size += 1 + Protobuf::size_varint($this->dailyBonusCoins);
      }
      foreach($this->dailyDefenderBonusPerPokemon as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->dailyDefenderBonusMaxDefenders !== 0) {
        $size += 1 + Protobuf::size_varint($this->dailyDefenderBonusMaxDefenders);
      }
      foreach($this->dailyDefenderBonusCurrency as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->minTimeBetweenClaimsMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->minTimeBetweenClaimsMs);
      }
      if ($this->dailyBonusEnabled !== false) {
        $size += 2;
      }
      if ($this->dailyDefenderBonusEnabled !== false) {
        $size += 2;
      }
      return $size;
    }

    public function clearDailyBonusCoins() { $this->dailyBonusCoins = 0; }
    public function getDailyBonusCoins() { return $this->dailyBonusCoins;}
    public function setDailyBonusCoins($value) { $this->dailyBonusCoins = $value; }

    public function clearDailyDefenderBonusPerPokemon() { $this->dailyDefenderBonusPerPokemon = array(); }
    public function getDailyDefenderBonusPerPokemonCount() { return count($this->dailyDefenderBonusPerPokemon); }
    public function getDailyDefenderBonusPerPokemon($index) { return $this->dailyDefenderBonusPerPokemon[$index]; }
    public function getDailyDefenderBonusPerPokemonArray() { return $this->dailyDefenderBonusPerPokemon; }
    public function setDailyDefenderBonusPerPokemon($index, array $value) {$this->dailyDefenderBonusPerPokemon[$index] = $value; }
    public function addDailyDefenderBonusPerPokemon(array $value) { $this->dailyDefenderBonusPerPokemon[] = $value; }
    public function addAllDailyDefenderBonusPerPokemon(array $values) { foreach($values as $value) {$this->dailyDefenderBonusPerPokemon[] = $value; }}

    public function clearDailyDefenderBonusMaxDefenders() { $this->dailyDefenderBonusMaxDefenders = 0; }
    public function getDailyDefenderBonusMaxDefenders() { return $this->dailyDefenderBonusMaxDefenders;}
    public function setDailyDefenderBonusMaxDefenders($value) { $this->dailyDefenderBonusMaxDefenders = $value; }

    public function clearDailyDefenderBonusCurrency() { $this->dailyDefenderBonusCurrency = array(); }
    public function getDailyDefenderBonusCurrencyCount() { return count($this->dailyDefenderBonusCurrency); }
    public function getDailyDefenderBonusCurrency($index) { return $this->dailyDefenderBonusCurrency[$index]; }
    public function getDailyDefenderBonusCurrencyArray() { return $this->dailyDefenderBonusCurrency; }
    public function setDailyDefenderBonusCurrency($index, array $value) {$this->dailyDefenderBonusCurrency[$index] = $value; }
    public function addDailyDefenderBonusCurrency(array $value) { $this->dailyDefenderBonusCurrency[] = $value; }
    public function addAllDailyDefenderBonusCurrency(array $values) { foreach($values as $value) {$this->dailyDefenderBonusCurrency[] = $value; }}

    public function clearMinTimeBetweenClaimsMs() { $this->minTimeBetweenClaimsMs = 0; }
    public function getMinTimeBetweenClaimsMs() { return $this->minTimeBetweenClaimsMs;}
    public function setMinTimeBetweenClaimsMs($value) { $this->minTimeBetweenClaimsMs = $value; }

    public function clearDailyBonusEnabled() { $this->dailyBonusEnabled = false; }
    public function getDailyBonusEnabled() { return $this->dailyBonusEnabled;}
    public function setDailyBonusEnabled($value) { $this->dailyBonusEnabled = $value; }

    public function clearDailyDefenderBonusEnabled() { $this->dailyDefenderBonusEnabled = false; }
    public function getDailyDefenderBonusEnabled() { return $this->dailyDefenderBonusEnabled;}
    public function setDailyDefenderBonusEnabled($value) { $this->dailyDefenderBonusEnabled = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('daily_bonus_coins', $this->dailyBonusCoins, 0)
           . Protobuf::toString('daily_defender_bonus_per_pokemon', $this->dailyDefenderBonusPerPokemon, 0)
           . Protobuf::toString('daily_defender_bonus_max_defenders', $this->dailyDefenderBonusMaxDefenders, 0)
           . Protobuf::toString('daily_defender_bonus_currency', $this->dailyDefenderBonusCurrency, "")
           . Protobuf::toString('min_time_between_claims_ms', $this->minTimeBetweenClaimsMs, 0)
           . Protobuf::toString('daily_bonus_enabled', $this->dailyBonusEnabled, false)
           . Protobuf::toString('daily_defender_bonus_enabled', $this->dailyDefenderBonusEnabled, false);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.IapSettings)
  }

}