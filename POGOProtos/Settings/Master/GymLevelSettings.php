<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/GymLevelSettings.php');

namespace POGOProtos\Settings\Master {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.GymLevelSettings
  final class GymLevelSettings extends ProtobufMessage {

    private $_unknown;
    private $requiredExperience = array(); // repeated int32 required_experience = 1
    private $leaderSlots = array(); // repeated int32 leader_slots = 2
    private $trainerSlots = array(); // repeated int32 trainer_slots = 3
    private $searchRollBonus = array(); // repeated int32 search_roll_bonus = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated int32 required_experience = 1
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->requiredExperience[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->requiredExperience[] = $tmp;
              }
            }

            break;
          case 2: // repeated int32 leader_slots = 2
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->leaderSlots[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->leaderSlots[] = $tmp;
              }
            }

            break;
          case 3: // repeated int32 trainer_slots = 3
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->trainerSlots[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->trainerSlots[] = $tmp;
              }
            }

            break;
          case 4: // repeated int32 search_roll_bonus = 4
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->searchRollBonus[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->searchRollBonus[] = $tmp;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->requiredExperience as $v) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->leaderSlots as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->trainerSlots as $v) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->searchRollBonus as $v) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $v);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->requiredExperience as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->leaderSlots as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->trainerSlots as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->searchRollBonus as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearRequiredExperience() { $this->requiredExperience = array(); }
    public function getRequiredExperienceCount() { return count($this->requiredExperience); }
    public function getRequiredExperience($index) { return $this->requiredExperience[$index]; }
    public function getRequiredExperienceArray() { return $this->requiredExperience; }
    public function setRequiredExperience($index, array $value) {$this->requiredExperience[$index] = $value; }
    public function addRequiredExperience(array $value) { $this->requiredExperience[] = $value; }
    public function addAllRequiredExperience(array $values) { foreach($values as $value) {$this->requiredExperience[] = $value; }}

    public function clearLeaderSlots() { $this->leaderSlots = array(); }
    public function getLeaderSlotsCount() { return count($this->leaderSlots); }
    public function getLeaderSlots($index) { return $this->leaderSlots[$index]; }
    public function getLeaderSlotsArray() { return $this->leaderSlots; }
    public function setLeaderSlots($index, array $value) {$this->leaderSlots[$index] = $value; }
    public function addLeaderSlots(array $value) { $this->leaderSlots[] = $value; }
    public function addAllLeaderSlots(array $values) { foreach($values as $value) {$this->leaderSlots[] = $value; }}

    public function clearTrainerSlots() { $this->trainerSlots = array(); }
    public function getTrainerSlotsCount() { return count($this->trainerSlots); }
    public function getTrainerSlots($index) { return $this->trainerSlots[$index]; }
    public function getTrainerSlotsArray() { return $this->trainerSlots; }
    public function setTrainerSlots($index, array $value) {$this->trainerSlots[$index] = $value; }
    public function addTrainerSlots(array $value) { $this->trainerSlots[] = $value; }
    public function addAllTrainerSlots(array $values) { foreach($values as $value) {$this->trainerSlots[] = $value; }}

    public function clearSearchRollBonus() { $this->searchRollBonus = array(); }
    public function getSearchRollBonusCount() { return count($this->searchRollBonus); }
    public function getSearchRollBonus($index) { return $this->searchRollBonus[$index]; }
    public function getSearchRollBonusArray() { return $this->searchRollBonus; }
    public function setSearchRollBonus($index, array $value) {$this->searchRollBonus[$index] = $value; }
    public function addSearchRollBonus(array $value) { $this->searchRollBonus[] = $value; }
    public function addAllSearchRollBonus(array $values) { foreach($values as $value) {$this->searchRollBonus[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('required_experience', $this->requiredExperience, 0)
           . Protobuf::toString('leader_slots', $this->leaderSlots, 0)
           . Protobuf::toString('trainer_slots', $this->trainerSlots, 0)
           . Protobuf::toString('search_roll_bonus', $this->searchRollBonus, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.GymLevelSettings)
  }

}