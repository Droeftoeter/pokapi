<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.GymLevelSettings
 */
class GymLevelSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * required_experience repeated int32 = 1
     *
     * @var \Protobuf\Collection
     */
    protected $required_experience = null;

    /**
     * leader_slots repeated int32 = 2
     *
     * @var \Protobuf\Collection
     */
    protected $leader_slots = null;

    /**
     * trainer_slots repeated int32 = 3
     *
     * @var \Protobuf\Collection
     */
    protected $trainer_slots = null;

    /**
     * search_roll_bonus repeated int32 = 4
     *
     * @var \Protobuf\Collection
     */
    protected $search_roll_bonus = null;

    /**
     * Check if 'required_experience' has a value
     *
     * @return bool
     */
    public function hasRequiredExperienceList()
    {
        return $this->required_experience !== null;
    }

    /**
     * Get 'required_experience' value
     *
     * @return \Protobuf\Collection
     */
    public function getRequiredExperienceList()
    {
        return $this->required_experience;
    }

    /**
     * Set 'required_experience' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRequiredExperienceList(\Protobuf\Collection $value = null)
    {
        $this->required_experience = $value;
    }

    /**
     * Add a new element to 'required_experience'
     *
     * @param int $value
     */
    public function addRequiredExperience($value)
    {
        if ($this->required_experience === null) {
            $this->required_experience = new \Protobuf\ScalarCollection();
        }

        $this->required_experience->add($value);
    }

    /**
     * Check if 'leader_slots' has a value
     *
     * @return bool
     */
    public function hasLeaderSlotsList()
    {
        return $this->leader_slots !== null;
    }

    /**
     * Get 'leader_slots' value
     *
     * @return \Protobuf\Collection
     */
    public function getLeaderSlotsList()
    {
        return $this->leader_slots;
    }

    /**
     * Set 'leader_slots' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setLeaderSlotsList(\Protobuf\Collection $value = null)
    {
        $this->leader_slots = $value;
    }

    /**
     * Add a new element to 'leader_slots'
     *
     * @param int $value
     */
    public function addLeaderSlots($value)
    {
        if ($this->leader_slots === null) {
            $this->leader_slots = new \Protobuf\ScalarCollection();
        }

        $this->leader_slots->add($value);
    }

    /**
     * Check if 'trainer_slots' has a value
     *
     * @return bool
     */
    public function hasTrainerSlotsList()
    {
        return $this->trainer_slots !== null;
    }

    /**
     * Get 'trainer_slots' value
     *
     * @return \Protobuf\Collection
     */
    public function getTrainerSlotsList()
    {
        return $this->trainer_slots;
    }

    /**
     * Set 'trainer_slots' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTrainerSlotsList(\Protobuf\Collection $value = null)
    {
        $this->trainer_slots = $value;
    }

    /**
     * Add a new element to 'trainer_slots'
     *
     * @param int $value
     */
    public function addTrainerSlots($value)
    {
        if ($this->trainer_slots === null) {
            $this->trainer_slots = new \Protobuf\ScalarCollection();
        }

        $this->trainer_slots->add($value);
    }

    /**
     * Check if 'search_roll_bonus' has a value
     *
     * @return bool
     */
    public function hasSearchRollBonusList()
    {
        return $this->search_roll_bonus !== null;
    }

    /**
     * Get 'search_roll_bonus' value
     *
     * @return \Protobuf\Collection
     */
    public function getSearchRollBonusList()
    {
        return $this->search_roll_bonus;
    }

    /**
     * Set 'search_roll_bonus' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSearchRollBonusList(\Protobuf\Collection $value = null)
    {
        $this->search_roll_bonus = $value;
    }

    /**
     * Add a new element to 'search_roll_bonus'
     *
     * @param int $value
     */
    public function addSearchRollBonus($value)
    {
        if ($this->search_roll_bonus === null) {
            $this->search_roll_bonus = new \Protobuf\ScalarCollection();
        }

        $this->search_roll_bonus->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'required_experience' => [],
            'leader_slots' => [],
            'trainer_slots' => [],
            'search_roll_bonus' => []
        ], $values);

        foreach ($values['required_experience'] as $item) {
            $message->addRequiredExperience($item);
        }

        foreach ($values['leader_slots'] as $item) {
            $message->addLeaderSlots($item);
        }

        foreach ($values['trainer_slots'] as $item) {
            $message->addTrainerSlots($item);
        }

        foreach ($values['search_roll_bonus'] as $item) {
            $message->addSearchRollBonus($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GymLevelSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'required_experience',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'leader_slots',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'trainer_slots',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'search_roll_bonus',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->required_experience !== null) {
            foreach ($this->required_experience as $val) {
                $writer->writeVarint($stream, 8);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->leader_slots !== null) {
            foreach ($this->leader_slots as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->trainer_slots !== null) {
            foreach ($this->trainer_slots as $val) {
                $writer->writeVarint($stream, 24);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->search_roll_bonus !== null) {
            foreach ($this->search_roll_bonus as $val) {
                $writer->writeVarint($stream, 32);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->required_experience === null) {
                    $this->required_experience = new \Protobuf\ScalarCollection();
                }

                $this->required_experience->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->leader_slots === null) {
                    $this->leader_slots = new \Protobuf\ScalarCollection();
                }

                $this->leader_slots->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->trainer_slots === null) {
                    $this->trainer_slots = new \Protobuf\ScalarCollection();
                }

                $this->trainer_slots->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->search_roll_bonus === null) {
                    $this->search_roll_bonus = new \Protobuf\ScalarCollection();
                }

                $this->search_roll_bonus->add($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->required_experience !== null) {
            foreach ($this->required_experience as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->leader_slots !== null) {
            foreach ($this->leader_slots as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->trainer_slots !== null) {
            foreach ($this->trainer_slots as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->search_roll_bonus !== null) {
            foreach ($this->search_roll_bonus as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->required_experience = null;
        $this->leader_slots = null;
        $this->trainer_slots = null;
        $this->search_roll_bonus = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\GymLevelSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->required_experience = ($message->required_experience !== null) ? $message->required_experience : $this->required_experience;
        $this->leader_slots = ($message->leader_slots !== null) ? $message->leader_slots : $this->leader_slots;
        $this->trainer_slots = ($message->trainer_slots !== null) ? $message->trainer_slots : $this->trainer_slots;
        $this->search_roll_bonus = ($message->search_roll_bonus !== null) ? $message->search_roll_bonus : $this->search_roll_bonus;
    }


}

