<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.CameraSettings
 */
class CameraSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * next_camera optional string = 1
     *
     * @var string
     */
    protected $next_camera = null;

    /**
     * interpolation repeated enum = 2
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\CameraInterpolation>
     */
    protected $interpolation = null;

    /**
     * target_type repeated enum = 3
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\CameraTarget>
     */
    protected $target_type = null;

    /**
     * ease_in_speed repeated float = 4
     *
     * @var \Protobuf\Collection
     */
    protected $ease_in_speed = null;

    /**
     * east_out_speed repeated float = 5
     *
     * @var \Protobuf\Collection
     */
    protected $east_out_speed = null;

    /**
     * duration_seconds repeated float = 6
     *
     * @var \Protobuf\Collection
     */
    protected $duration_seconds = null;

    /**
     * wait_seconds repeated float = 7
     *
     * @var \Protobuf\Collection
     */
    protected $wait_seconds = null;

    /**
     * transition_seconds repeated float = 8
     *
     * @var \Protobuf\Collection
     */
    protected $transition_seconds = null;

    /**
     * angle_degree repeated float = 9
     *
     * @var \Protobuf\Collection
     */
    protected $angle_degree = null;

    /**
     * angle_offset_degree repeated float = 10
     *
     * @var \Protobuf\Collection
     */
    protected $angle_offset_degree = null;

    /**
     * pitch_degree repeated float = 11
     *
     * @var \Protobuf\Collection
     */
    protected $pitch_degree = null;

    /**
     * pitch_offset_degree repeated float = 12
     *
     * @var \Protobuf\Collection
     */
    protected $pitch_offset_degree = null;

    /**
     * roll_degree repeated float = 13
     *
     * @var \Protobuf\Collection
     */
    protected $roll_degree = null;

    /**
     * distance_meters repeated float = 14
     *
     * @var \Protobuf\Collection
     */
    protected $distance_meters = null;

    /**
     * height_percent repeated float = 15
     *
     * @var \Protobuf\Collection
     */
    protected $height_percent = null;

    /**
     * vert_ctr_ratio repeated float = 16
     *
     * @var \Protobuf\Collection
     */
    protected $vert_ctr_ratio = null;

    /**
     * Check if 'next_camera' has a value
     *
     * @return bool
     */
    public function hasNextCamera()
    {
        return $this->next_camera !== null;
    }

    /**
     * Get 'next_camera' value
     *
     * @return string
     */
    public function getNextCamera()
    {
        return $this->next_camera;
    }

    /**
     * Set 'next_camera' value
     *
     * @param string $value
     */
    public function setNextCamera($value = null)
    {
        $this->next_camera = $value;
    }

    /**
     * Check if 'interpolation' has a value
     *
     * @return bool
     */
    public function hasInterpolationList()
    {
        return $this->interpolation !== null;
    }

    /**
     * Get 'interpolation' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\CameraInterpolation>
     */
    public function getInterpolationList()
    {
        return $this->interpolation;
    }

    /**
     * Set 'interpolation' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\CameraInterpolation> $value
     */
    public function setInterpolationList(\Protobuf\Collection $value = null)
    {
        $this->interpolation = $value;
    }

    /**
     * Add a new element to 'interpolation'
     *
     * @param \POGOProtos\Enums\CameraInterpolation $value
     */
    public function addInterpolation(\POGOProtos\Enums\CameraInterpolation $value)
    {
        if ($this->interpolation === null) {
            $this->interpolation = new \Protobuf\EnumCollection();
        }

        $this->interpolation->add($value);
    }

    /**
     * Check if 'target_type' has a value
     *
     * @return bool
     */
    public function hasTargetTypeList()
    {
        return $this->target_type !== null;
    }

    /**
     * Get 'target_type' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\CameraTarget>
     */
    public function getTargetTypeList()
    {
        return $this->target_type;
    }

    /**
     * Set 'target_type' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\CameraTarget> $value
     */
    public function setTargetTypeList(\Protobuf\Collection $value = null)
    {
        $this->target_type = $value;
    }

    /**
     * Add a new element to 'target_type'
     *
     * @param \POGOProtos\Enums\CameraTarget $value
     */
    public function addTargetType(\POGOProtos\Enums\CameraTarget $value)
    {
        if ($this->target_type === null) {
            $this->target_type = new \Protobuf\EnumCollection();
        }

        $this->target_type->add($value);
    }

    /**
     * Check if 'ease_in_speed' has a value
     *
     * @return bool
     */
    public function hasEaseInSpeedList()
    {
        return $this->ease_in_speed !== null;
    }

    /**
     * Get 'ease_in_speed' value
     *
     * @return \Protobuf\Collection
     */
    public function getEaseInSpeedList()
    {
        return $this->ease_in_speed;
    }

    /**
     * Set 'ease_in_speed' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setEaseInSpeedList(\Protobuf\Collection $value = null)
    {
        $this->ease_in_speed = $value;
    }

    /**
     * Add a new element to 'ease_in_speed'
     *
     * @param float $value
     */
    public function addEaseInSpeed($value)
    {
        if ($this->ease_in_speed === null) {
            $this->ease_in_speed = new \Protobuf\ScalarCollection();
        }

        $this->ease_in_speed->add($value);
    }

    /**
     * Check if 'east_out_speed' has a value
     *
     * @return bool
     */
    public function hasEastOutSpeedList()
    {
        return $this->east_out_speed !== null;
    }

    /**
     * Get 'east_out_speed' value
     *
     * @return \Protobuf\Collection
     */
    public function getEastOutSpeedList()
    {
        return $this->east_out_speed;
    }

    /**
     * Set 'east_out_speed' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setEastOutSpeedList(\Protobuf\Collection $value = null)
    {
        $this->east_out_speed = $value;
    }

    /**
     * Add a new element to 'east_out_speed'
     *
     * @param float $value
     */
    public function addEastOutSpeed($value)
    {
        if ($this->east_out_speed === null) {
            $this->east_out_speed = new \Protobuf\ScalarCollection();
        }

        $this->east_out_speed->add($value);
    }

    /**
     * Check if 'duration_seconds' has a value
     *
     * @return bool
     */
    public function hasDurationSecondsList()
    {
        return $this->duration_seconds !== null;
    }

    /**
     * Get 'duration_seconds' value
     *
     * @return \Protobuf\Collection
     */
    public function getDurationSecondsList()
    {
        return $this->duration_seconds;
    }

    /**
     * Set 'duration_seconds' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setDurationSecondsList(\Protobuf\Collection $value = null)
    {
        $this->duration_seconds = $value;
    }

    /**
     * Add a new element to 'duration_seconds'
     *
     * @param float $value
     */
    public function addDurationSeconds($value)
    {
        if ($this->duration_seconds === null) {
            $this->duration_seconds = new \Protobuf\ScalarCollection();
        }

        $this->duration_seconds->add($value);
    }

    /**
     * Check if 'wait_seconds' has a value
     *
     * @return bool
     */
    public function hasWaitSecondsList()
    {
        return $this->wait_seconds !== null;
    }

    /**
     * Get 'wait_seconds' value
     *
     * @return \Protobuf\Collection
     */
    public function getWaitSecondsList()
    {
        return $this->wait_seconds;
    }

    /**
     * Set 'wait_seconds' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setWaitSecondsList(\Protobuf\Collection $value = null)
    {
        $this->wait_seconds = $value;
    }

    /**
     * Add a new element to 'wait_seconds'
     *
     * @param float $value
     */
    public function addWaitSeconds($value)
    {
        if ($this->wait_seconds === null) {
            $this->wait_seconds = new \Protobuf\ScalarCollection();
        }

        $this->wait_seconds->add($value);
    }

    /**
     * Check if 'transition_seconds' has a value
     *
     * @return bool
     */
    public function hasTransitionSecondsList()
    {
        return $this->transition_seconds !== null;
    }

    /**
     * Get 'transition_seconds' value
     *
     * @return \Protobuf\Collection
     */
    public function getTransitionSecondsList()
    {
        return $this->transition_seconds;
    }

    /**
     * Set 'transition_seconds' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTransitionSecondsList(\Protobuf\Collection $value = null)
    {
        $this->transition_seconds = $value;
    }

    /**
     * Add a new element to 'transition_seconds'
     *
     * @param float $value
     */
    public function addTransitionSeconds($value)
    {
        if ($this->transition_seconds === null) {
            $this->transition_seconds = new \Protobuf\ScalarCollection();
        }

        $this->transition_seconds->add($value);
    }

    /**
     * Check if 'angle_degree' has a value
     *
     * @return bool
     */
    public function hasAngleDegreeList()
    {
        return $this->angle_degree !== null;
    }

    /**
     * Get 'angle_degree' value
     *
     * @return \Protobuf\Collection
     */
    public function getAngleDegreeList()
    {
        return $this->angle_degree;
    }

    /**
     * Set 'angle_degree' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAngleDegreeList(\Protobuf\Collection $value = null)
    {
        $this->angle_degree = $value;
    }

    /**
     * Add a new element to 'angle_degree'
     *
     * @param float $value
     */
    public function addAngleDegree($value)
    {
        if ($this->angle_degree === null) {
            $this->angle_degree = new \Protobuf\ScalarCollection();
        }

        $this->angle_degree->add($value);
    }

    /**
     * Check if 'angle_offset_degree' has a value
     *
     * @return bool
     */
    public function hasAngleOffsetDegreeList()
    {
        return $this->angle_offset_degree !== null;
    }

    /**
     * Get 'angle_offset_degree' value
     *
     * @return \Protobuf\Collection
     */
    public function getAngleOffsetDegreeList()
    {
        return $this->angle_offset_degree;
    }

    /**
     * Set 'angle_offset_degree' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAngleOffsetDegreeList(\Protobuf\Collection $value = null)
    {
        $this->angle_offset_degree = $value;
    }

    /**
     * Add a new element to 'angle_offset_degree'
     *
     * @param float $value
     */
    public function addAngleOffsetDegree($value)
    {
        if ($this->angle_offset_degree === null) {
            $this->angle_offset_degree = new \Protobuf\ScalarCollection();
        }

        $this->angle_offset_degree->add($value);
    }

    /**
     * Check if 'pitch_degree' has a value
     *
     * @return bool
     */
    public function hasPitchDegreeList()
    {
        return $this->pitch_degree !== null;
    }

    /**
     * Get 'pitch_degree' value
     *
     * @return \Protobuf\Collection
     */
    public function getPitchDegreeList()
    {
        return $this->pitch_degree;
    }

    /**
     * Set 'pitch_degree' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPitchDegreeList(\Protobuf\Collection $value = null)
    {
        $this->pitch_degree = $value;
    }

    /**
     * Add a new element to 'pitch_degree'
     *
     * @param float $value
     */
    public function addPitchDegree($value)
    {
        if ($this->pitch_degree === null) {
            $this->pitch_degree = new \Protobuf\ScalarCollection();
        }

        $this->pitch_degree->add($value);
    }

    /**
     * Check if 'pitch_offset_degree' has a value
     *
     * @return bool
     */
    public function hasPitchOffsetDegreeList()
    {
        return $this->pitch_offset_degree !== null;
    }

    /**
     * Get 'pitch_offset_degree' value
     *
     * @return \Protobuf\Collection
     */
    public function getPitchOffsetDegreeList()
    {
        return $this->pitch_offset_degree;
    }

    /**
     * Set 'pitch_offset_degree' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setPitchOffsetDegreeList(\Protobuf\Collection $value = null)
    {
        $this->pitch_offset_degree = $value;
    }

    /**
     * Add a new element to 'pitch_offset_degree'
     *
     * @param float $value
     */
    public function addPitchOffsetDegree($value)
    {
        if ($this->pitch_offset_degree === null) {
            $this->pitch_offset_degree = new \Protobuf\ScalarCollection();
        }

        $this->pitch_offset_degree->add($value);
    }

    /**
     * Check if 'roll_degree' has a value
     *
     * @return bool
     */
    public function hasRollDegreeList()
    {
        return $this->roll_degree !== null;
    }

    /**
     * Get 'roll_degree' value
     *
     * @return \Protobuf\Collection
     */
    public function getRollDegreeList()
    {
        return $this->roll_degree;
    }

    /**
     * Set 'roll_degree' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setRollDegreeList(\Protobuf\Collection $value = null)
    {
        $this->roll_degree = $value;
    }

    /**
     * Add a new element to 'roll_degree'
     *
     * @param float $value
     */
    public function addRollDegree($value)
    {
        if ($this->roll_degree === null) {
            $this->roll_degree = new \Protobuf\ScalarCollection();
        }

        $this->roll_degree->add($value);
    }

    /**
     * Check if 'distance_meters' has a value
     *
     * @return bool
     */
    public function hasDistanceMetersList()
    {
        return $this->distance_meters !== null;
    }

    /**
     * Get 'distance_meters' value
     *
     * @return \Protobuf\Collection
     */
    public function getDistanceMetersList()
    {
        return $this->distance_meters;
    }

    /**
     * Set 'distance_meters' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setDistanceMetersList(\Protobuf\Collection $value = null)
    {
        $this->distance_meters = $value;
    }

    /**
     * Add a new element to 'distance_meters'
     *
     * @param float $value
     */
    public function addDistanceMeters($value)
    {
        if ($this->distance_meters === null) {
            $this->distance_meters = new \Protobuf\ScalarCollection();
        }

        $this->distance_meters->add($value);
    }

    /**
     * Check if 'height_percent' has a value
     *
     * @return bool
     */
    public function hasHeightPercentList()
    {
        return $this->height_percent !== null;
    }

    /**
     * Get 'height_percent' value
     *
     * @return \Protobuf\Collection
     */
    public function getHeightPercentList()
    {
        return $this->height_percent;
    }

    /**
     * Set 'height_percent' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setHeightPercentList(\Protobuf\Collection $value = null)
    {
        $this->height_percent = $value;
    }

    /**
     * Add a new element to 'height_percent'
     *
     * @param float $value
     */
    public function addHeightPercent($value)
    {
        if ($this->height_percent === null) {
            $this->height_percent = new \Protobuf\ScalarCollection();
        }

        $this->height_percent->add($value);
    }

    /**
     * Check if 'vert_ctr_ratio' has a value
     *
     * @return bool
     */
    public function hasVertCtrRatioList()
    {
        return $this->vert_ctr_ratio !== null;
    }

    /**
     * Get 'vert_ctr_ratio' value
     *
     * @return \Protobuf\Collection
     */
    public function getVertCtrRatioList()
    {
        return $this->vert_ctr_ratio;
    }

    /**
     * Set 'vert_ctr_ratio' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setVertCtrRatioList(\Protobuf\Collection $value = null)
    {
        $this->vert_ctr_ratio = $value;
    }

    /**
     * Add a new element to 'vert_ctr_ratio'
     *
     * @param float $value
     */
    public function addVertCtrRatio($value)
    {
        if ($this->vert_ctr_ratio === null) {
            $this->vert_ctr_ratio = new \Protobuf\ScalarCollection();
        }

        $this->vert_ctr_ratio->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'next_camera' => null,
            'interpolation' => [],
            'target_type' => [],
            'ease_in_speed' => [],
            'east_out_speed' => [],
            'duration_seconds' => [],
            'wait_seconds' => [],
            'transition_seconds' => [],
            'angle_degree' => [],
            'angle_offset_degree' => [],
            'pitch_degree' => [],
            'pitch_offset_degree' => [],
            'roll_degree' => [],
            'distance_meters' => [],
            'height_percent' => [],
            'vert_ctr_ratio' => []
        ], $values);

        $message->setNextCamera($values['next_camera']);

        foreach ($values['interpolation'] as $item) {
            $message->addInterpolation($item);
        }

        foreach ($values['target_type'] as $item) {
            $message->addTargetType($item);
        }

        foreach ($values['ease_in_speed'] as $item) {
            $message->addEaseInSpeed($item);
        }

        foreach ($values['east_out_speed'] as $item) {
            $message->addEastOutSpeed($item);
        }

        foreach ($values['duration_seconds'] as $item) {
            $message->addDurationSeconds($item);
        }

        foreach ($values['wait_seconds'] as $item) {
            $message->addWaitSeconds($item);
        }

        foreach ($values['transition_seconds'] as $item) {
            $message->addTransitionSeconds($item);
        }

        foreach ($values['angle_degree'] as $item) {
            $message->addAngleDegree($item);
        }

        foreach ($values['angle_offset_degree'] as $item) {
            $message->addAngleOffsetDegree($item);
        }

        foreach ($values['pitch_degree'] as $item) {
            $message->addPitchDegree($item);
        }

        foreach ($values['pitch_offset_degree'] as $item) {
            $message->addPitchOffsetDegree($item);
        }

        foreach ($values['roll_degree'] as $item) {
            $message->addRollDegree($item);
        }

        foreach ($values['distance_meters'] as $item) {
            $message->addDistanceMeters($item);
        }

        foreach ($values['height_percent'] as $item) {
            $message->addHeightPercent($item);
        }

        foreach ($values['vert_ctr_ratio'] as $item) {
            $message->addVertCtrRatio($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'CameraSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'next_camera',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'interpolation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.CameraInterpolation'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'target_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.CameraTarget'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'ease_in_speed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'east_out_speed',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'duration_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'wait_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'transition_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'angle_degree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'angle_offset_degree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'pitch_degree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'pitch_offset_degree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'roll_degree',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'distance_meters',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'height_percent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'vert_ctr_ratio',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->next_camera !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->next_camera);
        }

        if ($this->interpolation !== null) {
            foreach ($this->interpolation as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->target_type !== null) {
            foreach ($this->target_type as $val) {
                $writer->writeVarint($stream, 24);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->ease_in_speed !== null) {
            foreach ($this->ease_in_speed as $val) {
                $writer->writeVarint($stream, 37);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->east_out_speed !== null) {
            foreach ($this->east_out_speed as $val) {
                $writer->writeVarint($stream, 45);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->duration_seconds !== null) {
            foreach ($this->duration_seconds as $val) {
                $writer->writeVarint($stream, 53);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->wait_seconds !== null) {
            foreach ($this->wait_seconds as $val) {
                $writer->writeVarint($stream, 61);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->transition_seconds !== null) {
            foreach ($this->transition_seconds as $val) {
                $writer->writeVarint($stream, 69);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->angle_degree !== null) {
            foreach ($this->angle_degree as $val) {
                $writer->writeVarint($stream, 77);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->angle_offset_degree !== null) {
            foreach ($this->angle_offset_degree as $val) {
                $writer->writeVarint($stream, 85);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->pitch_degree !== null) {
            foreach ($this->pitch_degree as $val) {
                $writer->writeVarint($stream, 93);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->pitch_offset_degree !== null) {
            foreach ($this->pitch_offset_degree as $val) {
                $writer->writeVarint($stream, 101);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->roll_degree !== null) {
            foreach ($this->roll_degree as $val) {
                $writer->writeVarint($stream, 109);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->distance_meters !== null) {
            foreach ($this->distance_meters as $val) {
                $writer->writeVarint($stream, 117);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->height_percent !== null) {
            foreach ($this->height_percent as $val) {
                $writer->writeVarint($stream, 125);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->vert_ctr_ratio !== null) {
            foreach ($this->vert_ctr_ratio as $val) {
                $writer->writeVarint($stream, 133);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->next_camera = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->interpolation === null) {
                    $this->interpolation = new \Protobuf\EnumCollection();
                }

                $this->interpolation->add(\POGOProtos\Enums\CameraInterpolation::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->target_type === null) {
                    $this->target_type = new \Protobuf\EnumCollection();
                }

                $this->target_type->add(\POGOProtos\Enums\CameraTarget::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->ease_in_speed === null) {
                    $this->ease_in_speed = new \Protobuf\ScalarCollection();
                }

                $this->ease_in_speed->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->east_out_speed === null) {
                    $this->east_out_speed = new \Protobuf\ScalarCollection();
                }

                $this->east_out_speed->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->duration_seconds === null) {
                    $this->duration_seconds = new \Protobuf\ScalarCollection();
                }

                $this->duration_seconds->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->wait_seconds === null) {
                    $this->wait_seconds = new \Protobuf\ScalarCollection();
                }

                $this->wait_seconds->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->transition_seconds === null) {
                    $this->transition_seconds = new \Protobuf\ScalarCollection();
                }

                $this->transition_seconds->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->angle_degree === null) {
                    $this->angle_degree = new \Protobuf\ScalarCollection();
                }

                $this->angle_degree->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->angle_offset_degree === null) {
                    $this->angle_offset_degree = new \Protobuf\ScalarCollection();
                }

                $this->angle_offset_degree->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->pitch_degree === null) {
                    $this->pitch_degree = new \Protobuf\ScalarCollection();
                }

                $this->pitch_degree->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->pitch_offset_degree === null) {
                    $this->pitch_offset_degree = new \Protobuf\ScalarCollection();
                }

                $this->pitch_offset_degree->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->roll_degree === null) {
                    $this->roll_degree = new \Protobuf\ScalarCollection();
                }

                $this->roll_degree->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->distance_meters === null) {
                    $this->distance_meters = new \Protobuf\ScalarCollection();
                }

                $this->distance_meters->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->height_percent === null) {
                    $this->height_percent = new \Protobuf\ScalarCollection();
                }

                $this->height_percent->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->vert_ctr_ratio === null) {
                    $this->vert_ctr_ratio = new \Protobuf\ScalarCollection();
                }

                $this->vert_ctr_ratio->add($reader->readFloat($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->next_camera !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->next_camera);
        }

        if ($this->interpolation !== null) {
            foreach ($this->interpolation as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->target_type !== null) {
            foreach ($this->target_type as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->ease_in_speed !== null) {
            foreach ($this->ease_in_speed as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->east_out_speed !== null) {
            foreach ($this->east_out_speed as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->duration_seconds !== null) {
            foreach ($this->duration_seconds as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->wait_seconds !== null) {
            foreach ($this->wait_seconds as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->transition_seconds !== null) {
            foreach ($this->transition_seconds as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->angle_degree !== null) {
            foreach ($this->angle_degree as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->angle_offset_degree !== null) {
            foreach ($this->angle_offset_degree as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->pitch_degree !== null) {
            foreach ($this->pitch_degree as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->pitch_offset_degree !== null) {
            foreach ($this->pitch_offset_degree as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->roll_degree !== null) {
            foreach ($this->roll_degree as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->distance_meters !== null) {
            foreach ($this->distance_meters as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->height_percent !== null) {
            foreach ($this->height_percent as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->vert_ctr_ratio !== null) {
            foreach ($this->vert_ctr_ratio as $val) {
                $size += 2;
                $size += 4;
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->next_camera = null;
        $this->interpolation = null;
        $this->target_type = null;
        $this->ease_in_speed = null;
        $this->east_out_speed = null;
        $this->duration_seconds = null;
        $this->wait_seconds = null;
        $this->transition_seconds = null;
        $this->angle_degree = null;
        $this->angle_offset_degree = null;
        $this->pitch_degree = null;
        $this->pitch_offset_degree = null;
        $this->roll_degree = null;
        $this->distance_meters = null;
        $this->height_percent = null;
        $this->vert_ctr_ratio = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\CameraSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->next_camera = ($message->next_camera !== null) ? $message->next_camera : $this->next_camera;
        $this->interpolation = ($message->interpolation !== null) ? $message->interpolation : $this->interpolation;
        $this->target_type = ($message->target_type !== null) ? $message->target_type : $this->target_type;
        $this->ease_in_speed = ($message->ease_in_speed !== null) ? $message->ease_in_speed : $this->ease_in_speed;
        $this->east_out_speed = ($message->east_out_speed !== null) ? $message->east_out_speed : $this->east_out_speed;
        $this->duration_seconds = ($message->duration_seconds !== null) ? $message->duration_seconds : $this->duration_seconds;
        $this->wait_seconds = ($message->wait_seconds !== null) ? $message->wait_seconds : $this->wait_seconds;
        $this->transition_seconds = ($message->transition_seconds !== null) ? $message->transition_seconds : $this->transition_seconds;
        $this->angle_degree = ($message->angle_degree !== null) ? $message->angle_degree : $this->angle_degree;
        $this->angle_offset_degree = ($message->angle_offset_degree !== null) ? $message->angle_offset_degree : $this->angle_offset_degree;
        $this->pitch_degree = ($message->pitch_degree !== null) ? $message->pitch_degree : $this->pitch_degree;
        $this->pitch_offset_degree = ($message->pitch_offset_degree !== null) ? $message->pitch_offset_degree : $this->pitch_offset_degree;
        $this->roll_degree = ($message->roll_degree !== null) ? $message->roll_degree : $this->roll_degree;
        $this->distance_meters = ($message->distance_meters !== null) ? $message->distance_meters : $this->distance_meters;
        $this->height_percent = ($message->height_percent !== null) ? $message->height_percent : $this->height_percent;
        $this->vert_ctr_ratio = ($message->vert_ctr_ratio !== null) ? $message->vert_ctr_ratio : $this->vert_ctr_ratio;
    }


}

