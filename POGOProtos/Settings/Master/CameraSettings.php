<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/CameraSettings.php');

namespace POGOProtos\Settings\Master {

  use POGOProtos\Enums\CameraInterpolation;
  use POGOProtos\Enums\CameraTarget;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Settings.Master.CameraSettings
  final class CameraSettings extends ProtobufMessage {

    private $_unknown;
    private $nextCamera = ""; // optional string next_camera = 1
    private $interpolation = array(); // repeated .POGOProtos.Enums.CameraInterpolation interpolation = 2
    private $targetType = array(); // repeated .POGOProtos.Enums.CameraTarget target_type = 3
    private $easeInSpeed = array(); // repeated float ease_in_speed = 4
    private $eastOutSpeed = array(); // repeated float east_out_speed = 5
    private $durationSeconds = array(); // repeated float duration_seconds = 6
    private $waitSeconds = array(); // repeated float wait_seconds = 7
    private $transitionSeconds = array(); // repeated float transition_seconds = 8
    private $angleDegree = array(); // repeated float angle_degree = 9
    private $angleOffsetDegree = array(); // repeated float angle_offset_degree = 10
    private $pitchDegree = array(); // repeated float pitch_degree = 11
    private $pitchOffsetDegree = array(); // repeated float pitch_offset_degree = 12
    private $rollDegree = array(); // repeated float roll_degree = 13
    private $distanceMeters = array(); // repeated float distance_meters = 14
    private $heightPercent = array(); // repeated float height_percent = 15
    private $vertCtrRatio = array(); // repeated float vert_ctr_ratio = 16

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string next_camera = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->nextCamera = $tmp;

            break;
          case 2: // repeated .POGOProtos.Enums.CameraInterpolation interpolation = 2
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->interpolation[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->interpolation[] = $tmp;
              }
            }

            break;
          case 3: // repeated .POGOProtos.Enums.CameraTarget target_type = 3
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->targetType[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->targetType[] = $tmp;
              }
            }

            break;
          case 4: // repeated float ease_in_speed = 4
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->easeInSpeed[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->easeInSpeed[] = $tmp;
              }
            }

            break;
          case 5: // repeated float east_out_speed = 5
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->eastOutSpeed[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->eastOutSpeed[] = $tmp;
              }
            }

            break;
          case 6: // repeated float duration_seconds = 6
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->durationSeconds[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->durationSeconds[] = $tmp;
              }
            }

            break;
          case 7: // repeated float wait_seconds = 7
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->waitSeconds[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->waitSeconds[] = $tmp;
              }
            }

            break;
          case 8: // repeated float transition_seconds = 8
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->transitionSeconds[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->transitionSeconds[] = $tmp;
              }
            }

            break;
          case 9: // repeated float angle_degree = 9
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->angleDegree[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->angleDegree[] = $tmp;
              }
            }

            break;
          case 10: // repeated float angle_offset_degree = 10
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->angleOffsetDegree[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->angleOffsetDegree[] = $tmp;
              }
            }

            break;
          case 11: // repeated float pitch_degree = 11
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->pitchDegree[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->pitchDegree[] = $tmp;
              }
            }

            break;
          case 12: // repeated float pitch_offset_degree = 12
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->pitchOffsetDegree[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->pitchOffsetDegree[] = $tmp;
              }
            }

            break;
          case 13: // repeated float roll_degree = 13
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->rollDegree[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->rollDegree[] = $tmp;
              }
            }

            break;
          case 14: // repeated float distance_meters = 14
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->distanceMeters[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->distanceMeters[] = $tmp;
              }
            }

            break;
          case 15: // repeated float height_percent = 15
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->heightPercent[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->heightPercent[] = $tmp;
              }
            }

            break;
          case 16: // repeated float vert_ctr_ratio = 16
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->vertCtrRatio[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->vertCtrRatio[] = $tmp;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->nextCamera !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->nextCamera));
        fwrite($fp, $this->nextCamera);
      }
      foreach($this->interpolation as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->targetType as $v) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->easeInSpeed as $v) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->eastOutSpeed as $v) {
        fwrite($fp, "-", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->durationSeconds as $v) {
        fwrite($fp, "5", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->waitSeconds as $v) {
        fwrite($fp, "=", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->transitionSeconds as $v) {
        fwrite($fp, "E", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->angleDegree as $v) {
        fwrite($fp, "M", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->angleOffsetDegree as $v) {
        fwrite($fp, "U", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->pitchDegree as $v) {
        fwrite($fp, "]", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->pitchOffsetDegree as $v) {
        fwrite($fp, "e", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->rollDegree as $v) {
        fwrite($fp, "m", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->distanceMeters as $v) {
        fwrite($fp, "u", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->heightPercent as $v) {
        fwrite($fp, "}", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->vertCtrRatio as $v) {
        fwrite($fp, "\x85\x01", 2);
        Protobuf::write_float($fp, $v);
      }
    }

    public function size() {
      $size = 0;
      if ($this->nextCamera !== "") {
        $l = strlen($this->nextCamera);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->interpolation as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->targetType as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->easeInSpeed as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->eastOutSpeed as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->durationSeconds as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->waitSeconds as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->transitionSeconds as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->angleDegree as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->angleOffsetDegree as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->pitchDegree as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->pitchOffsetDegree as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->rollDegree as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->distanceMeters as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->heightPercent as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->vertCtrRatio as $v) {
        $l = strlen($v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearNextCamera() { $this->nextCamera = ""; }
    public function getNextCamera() { return $this->nextCamera;}
    public function setNextCamera($value) { $this->nextCamera = $value; }

    public function clearInterpolation() { $this->interpolation = array(); }
    public function getInterpolationCount() { return count($this->interpolation); }
    public function getInterpolation($index) { return $this->interpolation[$index]; }
    public function getInterpolationArray() { return $this->interpolation; }
    public function setInterpolation($index, array $value) {$this->interpolation[$index] = $value; }
    public function addInterpolation(array $value) { $this->interpolation[] = $value; }
    public function addAllInterpolation(array $values) { foreach($values as $value) {$this->interpolation[] = $value; }}

    public function clearTargetType() { $this->targetType = array(); }
    public function getTargetTypeCount() { return count($this->targetType); }
    public function getTargetType($index) { return $this->targetType[$index]; }
    public function getTargetTypeArray() { return $this->targetType; }
    public function setTargetType($index, array $value) {$this->targetType[$index] = $value; }
    public function addTargetType(array $value) { $this->targetType[] = $value; }
    public function addAllTargetType(array $values) { foreach($values as $value) {$this->targetType[] = $value; }}

    public function clearEaseInSpeed() { $this->easeInSpeed = array(); }
    public function getEaseInSpeedCount() { return count($this->easeInSpeed); }
    public function getEaseInSpeed($index) { return $this->easeInSpeed[$index]; }
    public function getEaseInSpeedArray() { return $this->easeInSpeed; }
    public function setEaseInSpeed($index, array $value) {$this->easeInSpeed[$index] = $value; }
    public function addEaseInSpeed(array $value) { $this->easeInSpeed[] = $value; }
    public function addAllEaseInSpeed(array $values) { foreach($values as $value) {$this->easeInSpeed[] = $value; }}

    public function clearEastOutSpeed() { $this->eastOutSpeed = array(); }
    public function getEastOutSpeedCount() { return count($this->eastOutSpeed); }
    public function getEastOutSpeed($index) { return $this->eastOutSpeed[$index]; }
    public function getEastOutSpeedArray() { return $this->eastOutSpeed; }
    public function setEastOutSpeed($index, array $value) {$this->eastOutSpeed[$index] = $value; }
    public function addEastOutSpeed(array $value) { $this->eastOutSpeed[] = $value; }
    public function addAllEastOutSpeed(array $values) { foreach($values as $value) {$this->eastOutSpeed[] = $value; }}

    public function clearDurationSeconds() { $this->durationSeconds = array(); }
    public function getDurationSecondsCount() { return count($this->durationSeconds); }
    public function getDurationSeconds($index) { return $this->durationSeconds[$index]; }
    public function getDurationSecondsArray() { return $this->durationSeconds; }
    public function setDurationSeconds($index, array $value) {$this->durationSeconds[$index] = $value; }
    public function addDurationSeconds(array $value) { $this->durationSeconds[] = $value; }
    public function addAllDurationSeconds(array $values) { foreach($values as $value) {$this->durationSeconds[] = $value; }}

    public function clearWaitSeconds() { $this->waitSeconds = array(); }
    public function getWaitSecondsCount() { return count($this->waitSeconds); }
    public function getWaitSeconds($index) { return $this->waitSeconds[$index]; }
    public function getWaitSecondsArray() { return $this->waitSeconds; }
    public function setWaitSeconds($index, array $value) {$this->waitSeconds[$index] = $value; }
    public function addWaitSeconds(array $value) { $this->waitSeconds[] = $value; }
    public function addAllWaitSeconds(array $values) { foreach($values as $value) {$this->waitSeconds[] = $value; }}

    public function clearTransitionSeconds() { $this->transitionSeconds = array(); }
    public function getTransitionSecondsCount() { return count($this->transitionSeconds); }
    public function getTransitionSeconds($index) { return $this->transitionSeconds[$index]; }
    public function getTransitionSecondsArray() { return $this->transitionSeconds; }
    public function setTransitionSeconds($index, array $value) {$this->transitionSeconds[$index] = $value; }
    public function addTransitionSeconds(array $value) { $this->transitionSeconds[] = $value; }
    public function addAllTransitionSeconds(array $values) { foreach($values as $value) {$this->transitionSeconds[] = $value; }}

    public function clearAngleDegree() { $this->angleDegree = array(); }
    public function getAngleDegreeCount() { return count($this->angleDegree); }
    public function getAngleDegree($index) { return $this->angleDegree[$index]; }
    public function getAngleDegreeArray() { return $this->angleDegree; }
    public function setAngleDegree($index, array $value) {$this->angleDegree[$index] = $value; }
    public function addAngleDegree(array $value) { $this->angleDegree[] = $value; }
    public function addAllAngleDegree(array $values) { foreach($values as $value) {$this->angleDegree[] = $value; }}

    public function clearAngleOffsetDegree() { $this->angleOffsetDegree = array(); }
    public function getAngleOffsetDegreeCount() { return count($this->angleOffsetDegree); }
    public function getAngleOffsetDegree($index) { return $this->angleOffsetDegree[$index]; }
    public function getAngleOffsetDegreeArray() { return $this->angleOffsetDegree; }
    public function setAngleOffsetDegree($index, array $value) {$this->angleOffsetDegree[$index] = $value; }
    public function addAngleOffsetDegree(array $value) { $this->angleOffsetDegree[] = $value; }
    public function addAllAngleOffsetDegree(array $values) { foreach($values as $value) {$this->angleOffsetDegree[] = $value; }}

    public function clearPitchDegree() { $this->pitchDegree = array(); }
    public function getPitchDegreeCount() { return count($this->pitchDegree); }
    public function getPitchDegree($index) { return $this->pitchDegree[$index]; }
    public function getPitchDegreeArray() { return $this->pitchDegree; }
    public function setPitchDegree($index, array $value) {$this->pitchDegree[$index] = $value; }
    public function addPitchDegree(array $value) { $this->pitchDegree[] = $value; }
    public function addAllPitchDegree(array $values) { foreach($values as $value) {$this->pitchDegree[] = $value; }}

    public function clearPitchOffsetDegree() { $this->pitchOffsetDegree = array(); }
    public function getPitchOffsetDegreeCount() { return count($this->pitchOffsetDegree); }
    public function getPitchOffsetDegree($index) { return $this->pitchOffsetDegree[$index]; }
    public function getPitchOffsetDegreeArray() { return $this->pitchOffsetDegree; }
    public function setPitchOffsetDegree($index, array $value) {$this->pitchOffsetDegree[$index] = $value; }
    public function addPitchOffsetDegree(array $value) { $this->pitchOffsetDegree[] = $value; }
    public function addAllPitchOffsetDegree(array $values) { foreach($values as $value) {$this->pitchOffsetDegree[] = $value; }}

    public function clearRollDegree() { $this->rollDegree = array(); }
    public function getRollDegreeCount() { return count($this->rollDegree); }
    public function getRollDegree($index) { return $this->rollDegree[$index]; }
    public function getRollDegreeArray() { return $this->rollDegree; }
    public function setRollDegree($index, array $value) {$this->rollDegree[$index] = $value; }
    public function addRollDegree(array $value) { $this->rollDegree[] = $value; }
    public function addAllRollDegree(array $values) { foreach($values as $value) {$this->rollDegree[] = $value; }}

    public function clearDistanceMeters() { $this->distanceMeters = array(); }
    public function getDistanceMetersCount() { return count($this->distanceMeters); }
    public function getDistanceMeters($index) { return $this->distanceMeters[$index]; }
    public function getDistanceMetersArray() { return $this->distanceMeters; }
    public function setDistanceMeters($index, array $value) {$this->distanceMeters[$index] = $value; }
    public function addDistanceMeters(array $value) { $this->distanceMeters[] = $value; }
    public function addAllDistanceMeters(array $values) { foreach($values as $value) {$this->distanceMeters[] = $value; }}

    public function clearHeightPercent() { $this->heightPercent = array(); }
    public function getHeightPercentCount() { return count($this->heightPercent); }
    public function getHeightPercent($index) { return $this->heightPercent[$index]; }
    public function getHeightPercentArray() { return $this->heightPercent; }
    public function setHeightPercent($index, array $value) {$this->heightPercent[$index] = $value; }
    public function addHeightPercent(array $value) { $this->heightPercent[] = $value; }
    public function addAllHeightPercent(array $values) { foreach($values as $value) {$this->heightPercent[] = $value; }}

    public function clearVertCtrRatio() { $this->vertCtrRatio = array(); }
    public function getVertCtrRatioCount() { return count($this->vertCtrRatio); }
    public function getVertCtrRatio($index) { return $this->vertCtrRatio[$index]; }
    public function getVertCtrRatioArray() { return $this->vertCtrRatio; }
    public function setVertCtrRatio($index, array $value) {$this->vertCtrRatio[$index] = $value; }
    public function addVertCtrRatio(array $value) { $this->vertCtrRatio[] = $value; }
    public function addAllVertCtrRatio(array $values) { foreach($values as $value) {$this->vertCtrRatio[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('next_camera', $this->nextCamera, "")
           . Protobuf::toString('interpolation', $this->interpolation, CameraInterpolation::CAM_INTERP_CUT)
           . Protobuf::toString('target_type', $this->targetType, CameraTarget::CAM_TARGET_ATTACKER)
           . Protobuf::toString('ease_in_speed', $this->easeInSpeed, 0)
           . Protobuf::toString('east_out_speed', $this->eastOutSpeed, 0)
           . Protobuf::toString('duration_seconds', $this->durationSeconds, 0)
           . Protobuf::toString('wait_seconds', $this->waitSeconds, 0)
           . Protobuf::toString('transition_seconds', $this->transitionSeconds, 0)
           . Protobuf::toString('angle_degree', $this->angleDegree, 0)
           . Protobuf::toString('angle_offset_degree', $this->angleOffsetDegree, 0)
           . Protobuf::toString('pitch_degree', $this->pitchDegree, 0)
           . Protobuf::toString('pitch_offset_degree', $this->pitchOffsetDegree, 0)
           . Protobuf::toString('roll_degree', $this->rollDegree, 0)
           . Protobuf::toString('distance_meters', $this->distanceMeters, 0)
           . Protobuf::toString('height_percent', $this->heightPercent, 0)
           . Protobuf::toString('vert_ctr_ratio', $this->vertCtrRatio, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.CameraSettings)
  }

}