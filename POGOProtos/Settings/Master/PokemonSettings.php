<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.PokemonSettings
 */
class PokemonSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * pokemon_id optional enum = 1
     *
     * @var \POGOProtos\Enums\PokemonId
     */
    protected $pokemon_id = null;

    /**
     * model_scale optional float = 3
     *
     * @var float
     */
    protected $model_scale = null;

    /**
     * type optional enum = 4
     *
     * @var \POGOProtos\Enums\PokemonType
     */
    protected $type = null;

    /**
     * type_2 optional enum = 5
     *
     * @var \POGOProtos\Enums\PokemonType
     */
    protected $type_2 = null;

    /**
     * camera optional message = 6
     *
     * @var \POGOProtos\Settings\Master\Pokemon\CameraAttributes
     */
    protected $camera = null;

    /**
     * encounter optional message = 7
     *
     * @var \POGOProtos\Settings\Master\Pokemon\EncounterAttributes
     */
    protected $encounter = null;

    /**
     * stats optional message = 8
     *
     * @var \POGOProtos\Settings\Master\Pokemon\StatsAttributes
     */
    protected $stats = null;

    /**
     * quick_moves repeated enum = 9
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\PokemonMove>
     */
    protected $quick_moves = null;

    /**
     * cinematic_moves repeated enum = 10
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\PokemonMove>
     */
    protected $cinematic_moves = null;

    /**
     * animation_time repeated float = 11
     *
     * @var \Protobuf\Collection
     */
    protected $animation_time = null;

    /**
     * evolution_ids repeated enum = 12
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\PokemonId>
     */
    protected $evolution_ids = null;

    /**
     * evolution_pips optional int32 = 13
     *
     * @var int
     */
    protected $evolution_pips = null;

    /**
     * rarity optional enum = 14
     *
     * @var \POGOProtos\Enums\PokemonRarity
     */
    protected $rarity = null;

    /**
     * pokedex_height_m optional float = 15
     *
     * @var float
     */
    protected $pokedex_height_m = null;

    /**
     * pokedex_weight_kg optional float = 16
     *
     * @var float
     */
    protected $pokedex_weight_kg = null;

    /**
     * parent_pokemon_id optional enum = 17
     *
     * @var \POGOProtos\Enums\PokemonId
     */
    protected $parent_pokemon_id = null;

    /**
     * height_std_dev optional float = 18
     *
     * @var float
     */
    protected $height_std_dev = null;

    /**
     * weight_std_dev optional float = 19
     *
     * @var float
     */
    protected $weight_std_dev = null;

    /**
     * km_distance_to_hatch optional float = 20
     *
     * @var float
     */
    protected $km_distance_to_hatch = null;

    /**
     * family_id optional enum = 21
     *
     * @var \POGOProtos\Enums\PokemonFamilyId
     */
    protected $family_id = null;

    /**
     * candy_to_evolve optional int32 = 22
     *
     * @var int
     */
    protected $candy_to_evolve = null;

    /**
     * Check if 'pokemon_id' has a value
     *
     * @return bool
     */
    public function hasPokemonId()
    {
        return $this->pokemon_id !== null;
    }

    /**
     * Get 'pokemon_id' value
     *
     * @return \POGOProtos\Enums\PokemonId
     */
    public function getPokemonId()
    {
        return $this->pokemon_id;
    }

    /**
     * Set 'pokemon_id' value
     *
     * @param \POGOProtos\Enums\PokemonId $value
     */
    public function setPokemonId(\POGOProtos\Enums\PokemonId $value = null)
    {
        $this->pokemon_id = $value;
    }

    /**
     * Check if 'model_scale' has a value
     *
     * @return bool
     */
    public function hasModelScale()
    {
        return $this->model_scale !== null;
    }

    /**
     * Get 'model_scale' value
     *
     * @return float
     */
    public function getModelScale()
    {
        return $this->model_scale;
    }

    /**
     * Set 'model_scale' value
     *
     * @param float $value
     */
    public function setModelScale($value = null)
    {
        $this->model_scale = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \POGOProtos\Enums\PokemonType
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \POGOProtos\Enums\PokemonType $value
     */
    public function setType(\POGOProtos\Enums\PokemonType $value = null)
    {
        $this->type = $value;
    }

    /**
     * Check if 'type_2' has a value
     *
     * @return bool
     */
    public function hasType2()
    {
        return $this->type_2 !== null;
    }

    /**
     * Get 'type_2' value
     *
     * @return \POGOProtos\Enums\PokemonType
     */
    public function getType2()
    {
        return $this->type_2;
    }

    /**
     * Set 'type_2' value
     *
     * @param \POGOProtos\Enums\PokemonType $value
     */
    public function setType2(\POGOProtos\Enums\PokemonType $value = null)
    {
        $this->type_2 = $value;
    }

    /**
     * Check if 'camera' has a value
     *
     * @return bool
     */
    public function hasCamera()
    {
        return $this->camera !== null;
    }

    /**
     * Get 'camera' value
     *
     * @return \POGOProtos\Settings\Master\Pokemon\CameraAttributes
     */
    public function getCamera()
    {
        return $this->camera;
    }

    /**
     * Set 'camera' value
     *
     * @param \POGOProtos\Settings\Master\Pokemon\CameraAttributes $value
     */
    public function setCamera(\POGOProtos\Settings\Master\Pokemon\CameraAttributes $value = null)
    {
        $this->camera = $value;
    }

    /**
     * Check if 'encounter' has a value
     *
     * @return bool
     */
    public function hasEncounter()
    {
        return $this->encounter !== null;
    }

    /**
     * Get 'encounter' value
     *
     * @return \POGOProtos\Settings\Master\Pokemon\EncounterAttributes
     */
    public function getEncounter()
    {
        return $this->encounter;
    }

    /**
     * Set 'encounter' value
     *
     * @param \POGOProtos\Settings\Master\Pokemon\EncounterAttributes $value
     */
    public function setEncounter(\POGOProtos\Settings\Master\Pokemon\EncounterAttributes $value = null)
    {
        $this->encounter = $value;
    }

    /**
     * Check if 'stats' has a value
     *
     * @return bool
     */
    public function hasStats()
    {
        return $this->stats !== null;
    }

    /**
     * Get 'stats' value
     *
     * @return \POGOProtos\Settings\Master\Pokemon\StatsAttributes
     */
    public function getStats()
    {
        return $this->stats;
    }

    /**
     * Set 'stats' value
     *
     * @param \POGOProtos\Settings\Master\Pokemon\StatsAttributes $value
     */
    public function setStats(\POGOProtos\Settings\Master\Pokemon\StatsAttributes $value = null)
    {
        $this->stats = $value;
    }

    /**
     * Check if 'quick_moves' has a value
     *
     * @return bool
     */
    public function hasQuickMovesList()
    {
        return $this->quick_moves !== null;
    }

    /**
     * Get 'quick_moves' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\PokemonMove>
     */
    public function getQuickMovesList()
    {
        return $this->quick_moves;
    }

    /**
     * Set 'quick_moves' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\PokemonMove> $value
     */
    public function setQuickMovesList(\Protobuf\Collection $value = null)
    {
        $this->quick_moves = $value;
    }

    /**
     * Add a new element to 'quick_moves'
     *
     * @param \POGOProtos\Enums\PokemonMove $value
     */
    public function addQuickMoves(\POGOProtos\Enums\PokemonMove $value)
    {
        if ($this->quick_moves === null) {
            $this->quick_moves = new \Protobuf\EnumCollection();
        }

        $this->quick_moves->add($value);
    }

    /**
     * Check if 'cinematic_moves' has a value
     *
     * @return bool
     */
    public function hasCinematicMovesList()
    {
        return $this->cinematic_moves !== null;
    }

    /**
     * Get 'cinematic_moves' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\PokemonMove>
     */
    public function getCinematicMovesList()
    {
        return $this->cinematic_moves;
    }

    /**
     * Set 'cinematic_moves' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\PokemonMove> $value
     */
    public function setCinematicMovesList(\Protobuf\Collection $value = null)
    {
        $this->cinematic_moves = $value;
    }

    /**
     * Add a new element to 'cinematic_moves'
     *
     * @param \POGOProtos\Enums\PokemonMove $value
     */
    public function addCinematicMoves(\POGOProtos\Enums\PokemonMove $value)
    {
        if ($this->cinematic_moves === null) {
            $this->cinematic_moves = new \Protobuf\EnumCollection();
        }

        $this->cinematic_moves->add($value);
    }

    /**
     * Check if 'animation_time' has a value
     *
     * @return bool
     */
    public function hasAnimationTimeList()
    {
        return $this->animation_time !== null;
    }

    /**
     * Get 'animation_time' value
     *
     * @return \Protobuf\Collection
     */
    public function getAnimationTimeList()
    {
        return $this->animation_time;
    }

    /**
     * Set 'animation_time' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAnimationTimeList(\Protobuf\Collection $value = null)
    {
        $this->animation_time = $value;
    }

    /**
     * Add a new element to 'animation_time'
     *
     * @param float $value
     */
    public function addAnimationTime($value)
    {
        if ($this->animation_time === null) {
            $this->animation_time = new \Protobuf\ScalarCollection();
        }

        $this->animation_time->add($value);
    }

    /**
     * Check if 'evolution_ids' has a value
     *
     * @return bool
     */
    public function hasEvolutionIdsList()
    {
        return $this->evolution_ids !== null;
    }

    /**
     * Get 'evolution_ids' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\PokemonId>
     */
    public function getEvolutionIdsList()
    {
        return $this->evolution_ids;
    }

    /**
     * Set 'evolution_ids' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\PokemonId> $value
     */
    public function setEvolutionIdsList(\Protobuf\Collection $value = null)
    {
        $this->evolution_ids = $value;
    }

    /**
     * Add a new element to 'evolution_ids'
     *
     * @param \POGOProtos\Enums\PokemonId $value
     */
    public function addEvolutionIds(\POGOProtos\Enums\PokemonId $value)
    {
        if ($this->evolution_ids === null) {
            $this->evolution_ids = new \Protobuf\EnumCollection();
        }

        $this->evolution_ids->add($value);
    }

    /**
     * Check if 'evolution_pips' has a value
     *
     * @return bool
     */
    public function hasEvolutionPips()
    {
        return $this->evolution_pips !== null;
    }

    /**
     * Get 'evolution_pips' value
     *
     * @return int
     */
    public function getEvolutionPips()
    {
        return $this->evolution_pips;
    }

    /**
     * Set 'evolution_pips' value
     *
     * @param int $value
     */
    public function setEvolutionPips($value = null)
    {
        $this->evolution_pips = $value;
    }

    /**
     * Check if 'rarity' has a value
     *
     * @return bool
     */
    public function hasRarity()
    {
        return $this->rarity !== null;
    }

    /**
     * Get 'rarity' value
     *
     * @return \POGOProtos\Enums\PokemonRarity
     */
    public function getRarity()
    {
        return $this->rarity;
    }

    /**
     * Set 'rarity' value
     *
     * @param \POGOProtos\Enums\PokemonRarity $value
     */
    public function setRarity(\POGOProtos\Enums\PokemonRarity $value = null)
    {
        $this->rarity = $value;
    }

    /**
     * Check if 'pokedex_height_m' has a value
     *
     * @return bool
     */
    public function hasPokedexHeightM()
    {
        return $this->pokedex_height_m !== null;
    }

    /**
     * Get 'pokedex_height_m' value
     *
     * @return float
     */
    public function getPokedexHeightM()
    {
        return $this->pokedex_height_m;
    }

    /**
     * Set 'pokedex_height_m' value
     *
     * @param float $value
     */
    public function setPokedexHeightM($value = null)
    {
        $this->pokedex_height_m = $value;
    }

    /**
     * Check if 'pokedex_weight_kg' has a value
     *
     * @return bool
     */
    public function hasPokedexWeightKg()
    {
        return $this->pokedex_weight_kg !== null;
    }

    /**
     * Get 'pokedex_weight_kg' value
     *
     * @return float
     */
    public function getPokedexWeightKg()
    {
        return $this->pokedex_weight_kg;
    }

    /**
     * Set 'pokedex_weight_kg' value
     *
     * @param float $value
     */
    public function setPokedexWeightKg($value = null)
    {
        $this->pokedex_weight_kg = $value;
    }

    /**
     * Check if 'parent_pokemon_id' has a value
     *
     * @return bool
     */
    public function hasParentPokemonId()
    {
        return $this->parent_pokemon_id !== null;
    }

    /**
     * Get 'parent_pokemon_id' value
     *
     * @return \POGOProtos\Enums\PokemonId
     */
    public function getParentPokemonId()
    {
        return $this->parent_pokemon_id;
    }

    /**
     * Set 'parent_pokemon_id' value
     *
     * @param \POGOProtos\Enums\PokemonId $value
     */
    public function setParentPokemonId(\POGOProtos\Enums\PokemonId $value = null)
    {
        $this->parent_pokemon_id = $value;
    }

    /**
     * Check if 'height_std_dev' has a value
     *
     * @return bool
     */
    public function hasHeightStdDev()
    {
        return $this->height_std_dev !== null;
    }

    /**
     * Get 'height_std_dev' value
     *
     * @return float
     */
    public function getHeightStdDev()
    {
        return $this->height_std_dev;
    }

    /**
     * Set 'height_std_dev' value
     *
     * @param float $value
     */
    public function setHeightStdDev($value = null)
    {
        $this->height_std_dev = $value;
    }

    /**
     * Check if 'weight_std_dev' has a value
     *
     * @return bool
     */
    public function hasWeightStdDev()
    {
        return $this->weight_std_dev !== null;
    }

    /**
     * Get 'weight_std_dev' value
     *
     * @return float
     */
    public function getWeightStdDev()
    {
        return $this->weight_std_dev;
    }

    /**
     * Set 'weight_std_dev' value
     *
     * @param float $value
     */
    public function setWeightStdDev($value = null)
    {
        $this->weight_std_dev = $value;
    }

    /**
     * Check if 'km_distance_to_hatch' has a value
     *
     * @return bool
     */
    public function hasKmDistanceToHatch()
    {
        return $this->km_distance_to_hatch !== null;
    }

    /**
     * Get 'km_distance_to_hatch' value
     *
     * @return float
     */
    public function getKmDistanceToHatch()
    {
        return $this->km_distance_to_hatch;
    }

    /**
     * Set 'km_distance_to_hatch' value
     *
     * @param float $value
     */
    public function setKmDistanceToHatch($value = null)
    {
        $this->km_distance_to_hatch = $value;
    }

    /**
     * Check if 'family_id' has a value
     *
     * @return bool
     */
    public function hasFamilyId()
    {
        return $this->family_id !== null;
    }

    /**
     * Get 'family_id' value
     *
     * @return \POGOProtos\Enums\PokemonFamilyId
     */
    public function getFamilyId()
    {
        return $this->family_id;
    }

    /**
     * Set 'family_id' value
     *
     * @param \POGOProtos\Enums\PokemonFamilyId $value
     */
    public function setFamilyId(\POGOProtos\Enums\PokemonFamilyId $value = null)
    {
        $this->family_id = $value;
    }

    /**
     * Check if 'candy_to_evolve' has a value
     *
     * @return bool
     */
    public function hasCandyToEvolve()
    {
        return $this->candy_to_evolve !== null;
    }

    /**
     * Get 'candy_to_evolve' value
     *
     * @return int
     */
    public function getCandyToEvolve()
    {
        return $this->candy_to_evolve;
    }

    /**
     * Set 'candy_to_evolve' value
     *
     * @param int $value
     */
    public function setCandyToEvolve($value = null)
    {
        $this->candy_to_evolve = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'pokemon_id' => null,
            'model_scale' => null,
            'type' => null,
            'type_2' => null,
            'camera' => null,
            'encounter' => null,
            'stats' => null,
            'quick_moves' => [],
            'cinematic_moves' => [],
            'animation_time' => [],
            'evolution_ids' => [],
            'evolution_pips' => null,
            'rarity' => null,
            'pokedex_height_m' => null,
            'pokedex_weight_kg' => null,
            'parent_pokemon_id' => null,
            'height_std_dev' => null,
            'weight_std_dev' => null,
            'km_distance_to_hatch' => null,
            'family_id' => null,
            'candy_to_evolve' => null
        ], $values);

        $message->setPokemonId($values['pokemon_id']);
        $message->setModelScale($values['model_scale']);
        $message->setType($values['type']);
        $message->setType2($values['type_2']);
        $message->setCamera($values['camera']);
        $message->setEncounter($values['encounter']);
        $message->setStats($values['stats']);
        $message->setEvolutionPips($values['evolution_pips']);
        $message->setRarity($values['rarity']);
        $message->setPokedexHeightM($values['pokedex_height_m']);
        $message->setPokedexWeightKg($values['pokedex_weight_kg']);
        $message->setParentPokemonId($values['parent_pokemon_id']);
        $message->setHeightStdDev($values['height_std_dev']);
        $message->setWeightStdDev($values['weight_std_dev']);
        $message->setKmDistanceToHatch($values['km_distance_to_hatch']);
        $message->setFamilyId($values['family_id']);
        $message->setCandyToEvolve($values['candy_to_evolve']);

        foreach ($values['quick_moves'] as $item) {
            $message->addQuickMoves($item);
        }

        foreach ($values['cinematic_moves'] as $item) {
            $message->addCinematicMoves($item);
        }

        foreach ($values['animation_time'] as $item) {
            $message->addAnimationTime($item);
        }

        foreach ($values['evolution_ids'] as $item) {
            $message->addEvolutionIds($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'PokemonSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'pokemon_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'model_scale',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'type_2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'camera',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.Pokemon.CameraAttributes'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'encounter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.Pokemon.EncounterAttributes'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'stats',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Settings.Master.Pokemon.StatsAttributes'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'quick_moves',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.PokemonMove'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'cinematic_moves',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.PokemonMove'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'animation_time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'evolution_ids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.PokemonId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'evolution_pips',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'rarity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonRarity'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'pokedex_height_m',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'pokedex_weight_kg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'parent_pokemon_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'height_std_dev',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'weight_std_dev',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'km_distance_to_hatch',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'family_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonFamilyId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'candy_to_evolve',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->pokemon_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->pokemon_id->value());
        }

        if ($this->model_scale !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->model_scale);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->type->value());
        }

        if ($this->type_2 !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->type_2->value());
        }

        if ($this->camera !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->camera->serializedSize($sizeContext));
            $this->camera->writeTo($context);
        }

        if ($this->encounter !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->encounter->serializedSize($sizeContext));
            $this->encounter->writeTo($context);
        }

        if ($this->stats !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->stats->serializedSize($sizeContext));
            $this->stats->writeTo($context);
        }

        if ($this->quick_moves !== null) {
            foreach ($this->quick_moves as $val) {
                $writer->writeVarint($stream, 72);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->cinematic_moves !== null) {
            foreach ($this->cinematic_moves as $val) {
                $writer->writeVarint($stream, 80);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->animation_time !== null) {
            foreach ($this->animation_time as $val) {
                $writer->writeVarint($stream, 93);
                $writer->writeFloat($stream, $val);
            }
        }

        if ($this->evolution_ids !== null) {
            foreach ($this->evolution_ids as $val) {
                $writer->writeVarint($stream, 96);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->evolution_pips !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->evolution_pips);
        }

        if ($this->rarity !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->rarity->value());
        }

        if ($this->pokedex_height_m !== null) {
            $writer->writeVarint($stream, 125);
            $writer->writeFloat($stream, $this->pokedex_height_m);
        }

        if ($this->pokedex_weight_kg !== null) {
            $writer->writeVarint($stream, 133);
            $writer->writeFloat($stream, $this->pokedex_weight_kg);
        }

        if ($this->parent_pokemon_id !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->parent_pokemon_id->value());
        }

        if ($this->height_std_dev !== null) {
            $writer->writeVarint($stream, 149);
            $writer->writeFloat($stream, $this->height_std_dev);
        }

        if ($this->weight_std_dev !== null) {
            $writer->writeVarint($stream, 157);
            $writer->writeFloat($stream, $this->weight_std_dev);
        }

        if ($this->km_distance_to_hatch !== null) {
            $writer->writeVarint($stream, 165);
            $writer->writeFloat($stream, $this->km_distance_to_hatch);
        }

        if ($this->family_id !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->family_id->value());
        }

        if ($this->candy_to_evolve !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->candy_to_evolve);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->pokemon_id = \POGOProtos\Enums\PokemonId::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->model_scale = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->type = \POGOProtos\Enums\PokemonType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->type_2 = \POGOProtos\Enums\PokemonType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\Pokemon\CameraAttributes();

                $this->camera = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\Pokemon\EncounterAttributes();

                $this->encounter = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \POGOProtos\Settings\Master\Pokemon\StatsAttributes();

                $this->stats = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->quick_moves === null) {
                    $this->quick_moves = new \Protobuf\EnumCollection();
                }

                $this->quick_moves->add(\POGOProtos\Enums\PokemonMove::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->cinematic_moves === null) {
                    $this->cinematic_moves = new \Protobuf\EnumCollection();
                }

                $this->cinematic_moves->add(\POGOProtos\Enums\PokemonMove::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                if ($this->animation_time === null) {
                    $this->animation_time = new \Protobuf\ScalarCollection();
                }

                $this->animation_time->add($reader->readFloat($stream));

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->evolution_ids === null) {
                    $this->evolution_ids = new \Protobuf\EnumCollection();
                }

                $this->evolution_ids->add(\POGOProtos\Enums\PokemonId::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->evolution_pips = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->rarity = \POGOProtos\Enums\PokemonRarity::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->pokedex_height_m = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->pokedex_weight_kg = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->parent_pokemon_id = \POGOProtos\Enums\PokemonId::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->height_std_dev = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->weight_std_dev = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->km_distance_to_hatch = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->family_id = \POGOProtos\Enums\PokemonFamilyId::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->candy_to_evolve = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->pokemon_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemon_id->value());
        }

        if ($this->model_scale !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->type->value());
        }

        if ($this->type_2 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->type_2->value());
        }

        if ($this->camera !== null) {
            $innerSize = $this->camera->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->encounter !== null) {
            $innerSize = $this->encounter->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->stats !== null) {
            $innerSize = $this->stats->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->quick_moves !== null) {
            foreach ($this->quick_moves as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->cinematic_moves !== null) {
            foreach ($this->cinematic_moves as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->animation_time !== null) {
            foreach ($this->animation_time as $val) {
                $size += 1;
                $size += 4;
            }
        }

        if ($this->evolution_ids !== null) {
            foreach ($this->evolution_ids as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->evolution_pips !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->evolution_pips);
        }

        if ($this->rarity !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rarity->value());
        }

        if ($this->pokedex_height_m !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->pokedex_weight_kg !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->parent_pokemon_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->parent_pokemon_id->value());
        }

        if ($this->height_std_dev !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->weight_std_dev !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->km_distance_to_hatch !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->family_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->family_id->value());
        }

        if ($this->candy_to_evolve !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->candy_to_evolve);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->pokemon_id = null;
        $this->model_scale = null;
        $this->type = null;
        $this->type_2 = null;
        $this->camera = null;
        $this->encounter = null;
        $this->stats = null;
        $this->quick_moves = null;
        $this->cinematic_moves = null;
        $this->animation_time = null;
        $this->evolution_ids = null;
        $this->evolution_pips = null;
        $this->rarity = null;
        $this->pokedex_height_m = null;
        $this->pokedex_weight_kg = null;
        $this->parent_pokemon_id = null;
        $this->height_std_dev = null;
        $this->weight_std_dev = null;
        $this->km_distance_to_hatch = null;
        $this->family_id = null;
        $this->candy_to_evolve = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\PokemonSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->pokemon_id = ($message->pokemon_id !== null) ? $message->pokemon_id : $this->pokemon_id;
        $this->model_scale = ($message->model_scale !== null) ? $message->model_scale : $this->model_scale;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
        $this->type_2 = ($message->type_2 !== null) ? $message->type_2 : $this->type_2;
        $this->camera = ($message->camera !== null) ? $message->camera : $this->camera;
        $this->encounter = ($message->encounter !== null) ? $message->encounter : $this->encounter;
        $this->stats = ($message->stats !== null) ? $message->stats : $this->stats;
        $this->quick_moves = ($message->quick_moves !== null) ? $message->quick_moves : $this->quick_moves;
        $this->cinematic_moves = ($message->cinematic_moves !== null) ? $message->cinematic_moves : $this->cinematic_moves;
        $this->animation_time = ($message->animation_time !== null) ? $message->animation_time : $this->animation_time;
        $this->evolution_ids = ($message->evolution_ids !== null) ? $message->evolution_ids : $this->evolution_ids;
        $this->evolution_pips = ($message->evolution_pips !== null) ? $message->evolution_pips : $this->evolution_pips;
        $this->rarity = ($message->rarity !== null) ? $message->rarity : $this->rarity;
        $this->pokedex_height_m = ($message->pokedex_height_m !== null) ? $message->pokedex_height_m : $this->pokedex_height_m;
        $this->pokedex_weight_kg = ($message->pokedex_weight_kg !== null) ? $message->pokedex_weight_kg : $this->pokedex_weight_kg;
        $this->parent_pokemon_id = ($message->parent_pokemon_id !== null) ? $message->parent_pokemon_id : $this->parent_pokemon_id;
        $this->height_std_dev = ($message->height_std_dev !== null) ? $message->height_std_dev : $this->height_std_dev;
        $this->weight_std_dev = ($message->weight_std_dev !== null) ? $message->weight_std_dev : $this->weight_std_dev;
        $this->km_distance_to_hatch = ($message->km_distance_to_hatch !== null) ? $message->km_distance_to_hatch : $this->km_distance_to_hatch;
        $this->family_id = ($message->family_id !== null) ? $message->family_id : $this->family_id;
        $this->candy_to_evolve = ($message->candy_to_evolve !== null) ? $message->candy_to_evolve : $this->candy_to_evolve;
    }


}

