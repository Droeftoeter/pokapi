<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/MoveSettings.php');

namespace POGOProtos\Settings\Master {

  use POGOProtos\Enums\PokemonMovementType;
  use POGOProtos\Enums\PokemonType;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Settings.Master.MoveSettings
  final class MoveSettings extends ProtobufMessage {

    private $_unknown;
    private $movementId = PokemonMovementType::MOVEMENT_STATIC; // optional .POGOProtos.Enums.PokemonMovementType movement_id = 1
    private $animationId = 0; // optional int32 animation_id = 2
    private $pokemonType = PokemonType::POKEMON_TYPE_NONE; // optional .POGOProtos.Enums.PokemonType pokemon_type = 3
    private $power = 0; // optional float power = 4
    private $accuracyChance = 0; // optional float accuracy_chance = 5
    private $criticalChance = 0; // optional float critical_chance = 6
    private $healScalar = 0; // optional float heal_scalar = 7
    private $staminaLossScalar = 0; // optional float stamina_loss_scalar = 8
    private $trainerLevelMin = 0; // optional int32 trainer_level_min = 9
    private $trainerLevelMax = 0; // optional int32 trainer_level_max = 10
    private $vfxName = ""; // optional string vfx_name = 11
    private $durationMs = 0; // optional int32 duration_ms = 12
    private $damageWindowStartMs = 0; // optional int32 damage_window_start_ms = 13
    private $damageWindowEndMs = 0; // optional int32 damage_window_end_ms = 14
    private $energyDelta = 0; // optional int32 energy_delta = 15

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Enums.PokemonMovementType movement_id = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->movementId = $tmp;

            break;
          case 2: // optional int32 animation_id = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->animationId = $tmp;

            break;
          case 3: // optional .POGOProtos.Enums.PokemonType pokemon_type = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->pokemonType = $tmp;

            break;
          case 4: // optional float power = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->power = $tmp;

            break;
          case 5: // optional float accuracy_chance = 5
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->accuracyChance = $tmp;

            break;
          case 6: // optional float critical_chance = 6
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->criticalChance = $tmp;

            break;
          case 7: // optional float heal_scalar = 7
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->healScalar = $tmp;

            break;
          case 8: // optional float stamina_loss_scalar = 8
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->staminaLossScalar = $tmp;

            break;
          case 9: // optional int32 trainer_level_min = 9
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->trainerLevelMin = $tmp;

            break;
          case 10: // optional int32 trainer_level_max = 10
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->trainerLevelMax = $tmp;

            break;
          case 11: // optional string vfx_name = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->vfxName = $tmp;

            break;
          case 12: // optional int32 duration_ms = 12
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->durationMs = $tmp;

            break;
          case 13: // optional int32 damage_window_start_ms = 13
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->damageWindowStartMs = $tmp;

            break;
          case 14: // optional int32 damage_window_end_ms = 14
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->damageWindowEndMs = $tmp;

            break;
          case 15: // optional int32 energy_delta = 15
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->energyDelta = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->movementId !== PokemonMovementType::MOVEMENT_STATIC) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->movementId);
      }
      if ($this->animationId !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->animationId);
      }
      if ($this->pokemonType !== PokemonType::POKEMON_TYPE_NONE) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->pokemonType);
      }
      if ($this->power !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->power);
      }
      if ($this->accuracyChance !== 0) {
        fwrite($fp, "-", 1);
        Protobuf::write_float($fp, $this->accuracyChance);
      }
      if ($this->criticalChance !== 0) {
        fwrite($fp, "5", 1);
        Protobuf::write_float($fp, $this->criticalChance);
      }
      if ($this->healScalar !== 0) {
        fwrite($fp, "=", 1);
        Protobuf::write_float($fp, $this->healScalar);
      }
      if ($this->staminaLossScalar !== 0) {
        fwrite($fp, "E", 1);
        Protobuf::write_float($fp, $this->staminaLossScalar);
      }
      if ($this->trainerLevelMin !== 0) {
        fwrite($fp, "H", 1);
        Protobuf::write_varint($fp, $this->trainerLevelMin);
      }
      if ($this->trainerLevelMax !== 0) {
        fwrite($fp, "P", 1);
        Protobuf::write_varint($fp, $this->trainerLevelMax);
      }
      if ($this->vfxName !== "") {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, strlen($this->vfxName));
        fwrite($fp, $this->vfxName);
      }
      if ($this->durationMs !== 0) {
        fwrite($fp, "`", 1);
        Protobuf::write_varint($fp, $this->durationMs);
      }
      if ($this->damageWindowStartMs !== 0) {
        fwrite($fp, "h", 1);
        Protobuf::write_varint($fp, $this->damageWindowStartMs);
      }
      if ($this->damageWindowEndMs !== 0) {
        fwrite($fp, "p", 1);
        Protobuf::write_varint($fp, $this->damageWindowEndMs);
      }
      if ($this->energyDelta !== 0) {
        fwrite($fp, "x", 1);
        Protobuf::write_varint($fp, $this->energyDelta);
      }
    }

    public function size() {
      $size = 0;
      if ($this->movementId !== PokemonMovementType::MOVEMENT_STATIC) {
        $size += 1 + Protobuf::size_varint($this->movementId);
      }
      if ($this->animationId !== 0) {
        $size += 1 + Protobuf::size_varint($this->animationId);
      }
      if ($this->pokemonType !== PokemonType::POKEMON_TYPE_NONE) {
        $size += 1 + Protobuf::size_varint($this->pokemonType);
      }
      if ($this->power !== 0) {
        $size += 5;
      }
      if ($this->accuracyChance !== 0) {
        $size += 5;
      }
      if ($this->criticalChance !== 0) {
        $size += 5;
      }
      if ($this->healScalar !== 0) {
        $size += 5;
      }
      if ($this->staminaLossScalar !== 0) {
        $size += 5;
      }
      if ($this->trainerLevelMin !== 0) {
        $size += 1 + Protobuf::size_varint($this->trainerLevelMin);
      }
      if ($this->trainerLevelMax !== 0) {
        $size += 1 + Protobuf::size_varint($this->trainerLevelMax);
      }
      if ($this->vfxName !== "") {
        $l = strlen($this->vfxName);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->durationMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->durationMs);
      }
      if ($this->damageWindowStartMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->damageWindowStartMs);
      }
      if ($this->damageWindowEndMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->damageWindowEndMs);
      }
      if ($this->energyDelta !== 0) {
        $size += 1 + Protobuf::size_varint($this->energyDelta);
      }
      return $size;
    }

    public function clearMovementId() { $this->movementId = PokemonMovementType::MOVEMENT_STATIC; }
    public function getMovementId() { return $this->movementId;}
    public function setMovementId($value) { $this->movementId = $value; }

    public function clearAnimationId() { $this->animationId = 0; }
    public function getAnimationId() { return $this->animationId;}
    public function setAnimationId($value) { $this->animationId = $value; }

    public function clearPokemonType() { $this->pokemonType = PokemonType::POKEMON_TYPE_NONE; }
    public function getPokemonType() { return $this->pokemonType;}
    public function setPokemonType($value) { $this->pokemonType = $value; }

    public function clearPower() { $this->power = 0; }
    public function getPower() { return $this->power;}
    public function setPower($value) { $this->power = $value; }

    public function clearAccuracyChance() { $this->accuracyChance = 0; }
    public function getAccuracyChance() { return $this->accuracyChance;}
    public function setAccuracyChance($value) { $this->accuracyChance = $value; }

    public function clearCriticalChance() { $this->criticalChance = 0; }
    public function getCriticalChance() { return $this->criticalChance;}
    public function setCriticalChance($value) { $this->criticalChance = $value; }

    public function clearHealScalar() { $this->healScalar = 0; }
    public function getHealScalar() { return $this->healScalar;}
    public function setHealScalar($value) { $this->healScalar = $value; }

    public function clearStaminaLossScalar() { $this->staminaLossScalar = 0; }
    public function getStaminaLossScalar() { return $this->staminaLossScalar;}
    public function setStaminaLossScalar($value) { $this->staminaLossScalar = $value; }

    public function clearTrainerLevelMin() { $this->trainerLevelMin = 0; }
    public function getTrainerLevelMin() { return $this->trainerLevelMin;}
    public function setTrainerLevelMin($value) { $this->trainerLevelMin = $value; }

    public function clearTrainerLevelMax() { $this->trainerLevelMax = 0; }
    public function getTrainerLevelMax() { return $this->trainerLevelMax;}
    public function setTrainerLevelMax($value) { $this->trainerLevelMax = $value; }

    public function clearVfxName() { $this->vfxName = ""; }
    public function getVfxName() { return $this->vfxName;}
    public function setVfxName($value) { $this->vfxName = $value; }

    public function clearDurationMs() { $this->durationMs = 0; }
    public function getDurationMs() { return $this->durationMs;}
    public function setDurationMs($value) { $this->durationMs = $value; }

    public function clearDamageWindowStartMs() { $this->damageWindowStartMs = 0; }
    public function getDamageWindowStartMs() { return $this->damageWindowStartMs;}
    public function setDamageWindowStartMs($value) { $this->damageWindowStartMs = $value; }

    public function clearDamageWindowEndMs() { $this->damageWindowEndMs = 0; }
    public function getDamageWindowEndMs() { return $this->damageWindowEndMs;}
    public function setDamageWindowEndMs($value) { $this->damageWindowEndMs = $value; }

    public function clearEnergyDelta() { $this->energyDelta = 0; }
    public function getEnergyDelta() { return $this->energyDelta;}
    public function setEnergyDelta($value) { $this->energyDelta = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('movement_id', $this->movementId, PokemonMovementType::MOVEMENT_STATIC)
           . Protobuf::toString('animation_id', $this->animationId, 0)
           . Protobuf::toString('pokemon_type', $this->pokemonType, PokemonType::POKEMON_TYPE_NONE)
           . Protobuf::toString('power', $this->power, 0)
           . Protobuf::toString('accuracy_chance', $this->accuracyChance, 0)
           . Protobuf::toString('critical_chance', $this->criticalChance, 0)
           . Protobuf::toString('heal_scalar', $this->healScalar, 0)
           . Protobuf::toString('stamina_loss_scalar', $this->staminaLossScalar, 0)
           . Protobuf::toString('trainer_level_min', $this->trainerLevelMin, 0)
           . Protobuf::toString('trainer_level_max', $this->trainerLevelMax, 0)
           . Protobuf::toString('vfx_name', $this->vfxName, "")
           . Protobuf::toString('duration_ms', $this->durationMs, 0)
           . Protobuf::toString('damage_window_start_ms', $this->damageWindowStartMs, 0)
           . Protobuf::toString('damage_window_end_ms', $this->damageWindowEndMs, 0)
           . Protobuf::toString('energy_delta', $this->energyDelta, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.MoveSettings)
  }

}