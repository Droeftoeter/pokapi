<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.MoveSettings
 */
class MoveSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * movement_id optional enum = 1
     *
     * @var \POGOProtos\Enums\PokemonMove
     */
    protected $movement_id = null;

    /**
     * animation_id optional int32 = 2
     *
     * @var int
     */
    protected $animation_id = null;

    /**
     * pokemon_type optional enum = 3
     *
     * @var \POGOProtos\Enums\PokemonType
     */
    protected $pokemon_type = null;

    /**
     * power optional float = 4
     *
     * @var float
     */
    protected $power = null;

    /**
     * accuracy_chance optional float = 5
     *
     * @var float
     */
    protected $accuracy_chance = null;

    /**
     * critical_chance optional float = 6
     *
     * @var float
     */
    protected $critical_chance = null;

    /**
     * heal_scalar optional float = 7
     *
     * @var float
     */
    protected $heal_scalar = null;

    /**
     * stamina_loss_scalar optional float = 8
     *
     * @var float
     */
    protected $stamina_loss_scalar = null;

    /**
     * trainer_level_min optional int32 = 9
     *
     * @var int
     */
    protected $trainer_level_min = null;

    /**
     * trainer_level_max optional int32 = 10
     *
     * @var int
     */
    protected $trainer_level_max = null;

    /**
     * vfx_name optional string = 11
     *
     * @var string
     */
    protected $vfx_name = null;

    /**
     * duration_ms optional int32 = 12
     *
     * @var int
     */
    protected $duration_ms = null;

    /**
     * damage_window_start_ms optional int32 = 13
     *
     * @var int
     */
    protected $damage_window_start_ms = null;

    /**
     * damage_window_end_ms optional int32 = 14
     *
     * @var int
     */
    protected $damage_window_end_ms = null;

    /**
     * energy_delta optional int32 = 15
     *
     * @var int
     */
    protected $energy_delta = null;

    /**
     * Check if 'movement_id' has a value
     *
     * @return bool
     */
    public function hasMovementId()
    {
        return $this->movement_id !== null;
    }

    /**
     * Get 'movement_id' value
     *
     * @return \POGOProtos\Enums\PokemonMove
     */
    public function getMovementId()
    {
        return $this->movement_id;
    }

    /**
     * Set 'movement_id' value
     *
     * @param \POGOProtos\Enums\PokemonMove $value
     */
    public function setMovementId(\POGOProtos\Enums\PokemonMove $value = null)
    {
        $this->movement_id = $value;
    }

    /**
     * Check if 'animation_id' has a value
     *
     * @return bool
     */
    public function hasAnimationId()
    {
        return $this->animation_id !== null;
    }

    /**
     * Get 'animation_id' value
     *
     * @return int
     */
    public function getAnimationId()
    {
        return $this->animation_id;
    }

    /**
     * Set 'animation_id' value
     *
     * @param int $value
     */
    public function setAnimationId($value = null)
    {
        $this->animation_id = $value;
    }

    /**
     * Check if 'pokemon_type' has a value
     *
     * @return bool
     */
    public function hasPokemonType()
    {
        return $this->pokemon_type !== null;
    }

    /**
     * Get 'pokemon_type' value
     *
     * @return \POGOProtos\Enums\PokemonType
     */
    public function getPokemonType()
    {
        return $this->pokemon_type;
    }

    /**
     * Set 'pokemon_type' value
     *
     * @param \POGOProtos\Enums\PokemonType $value
     */
    public function setPokemonType(\POGOProtos\Enums\PokemonType $value = null)
    {
        $this->pokemon_type = $value;
    }

    /**
     * Check if 'power' has a value
     *
     * @return bool
     */
    public function hasPower()
    {
        return $this->power !== null;
    }

    /**
     * Get 'power' value
     *
     * @return float
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * Set 'power' value
     *
     * @param float $value
     */
    public function setPower($value = null)
    {
        $this->power = $value;
    }

    /**
     * Check if 'accuracy_chance' has a value
     *
     * @return bool
     */
    public function hasAccuracyChance()
    {
        return $this->accuracy_chance !== null;
    }

    /**
     * Get 'accuracy_chance' value
     *
     * @return float
     */
    public function getAccuracyChance()
    {
        return $this->accuracy_chance;
    }

    /**
     * Set 'accuracy_chance' value
     *
     * @param float $value
     */
    public function setAccuracyChance($value = null)
    {
        $this->accuracy_chance = $value;
    }

    /**
     * Check if 'critical_chance' has a value
     *
     * @return bool
     */
    public function hasCriticalChance()
    {
        return $this->critical_chance !== null;
    }

    /**
     * Get 'critical_chance' value
     *
     * @return float
     */
    public function getCriticalChance()
    {
        return $this->critical_chance;
    }

    /**
     * Set 'critical_chance' value
     *
     * @param float $value
     */
    public function setCriticalChance($value = null)
    {
        $this->critical_chance = $value;
    }

    /**
     * Check if 'heal_scalar' has a value
     *
     * @return bool
     */
    public function hasHealScalar()
    {
        return $this->heal_scalar !== null;
    }

    /**
     * Get 'heal_scalar' value
     *
     * @return float
     */
    public function getHealScalar()
    {
        return $this->heal_scalar;
    }

    /**
     * Set 'heal_scalar' value
     *
     * @param float $value
     */
    public function setHealScalar($value = null)
    {
        $this->heal_scalar = $value;
    }

    /**
     * Check if 'stamina_loss_scalar' has a value
     *
     * @return bool
     */
    public function hasStaminaLossScalar()
    {
        return $this->stamina_loss_scalar !== null;
    }

    /**
     * Get 'stamina_loss_scalar' value
     *
     * @return float
     */
    public function getStaminaLossScalar()
    {
        return $this->stamina_loss_scalar;
    }

    /**
     * Set 'stamina_loss_scalar' value
     *
     * @param float $value
     */
    public function setStaminaLossScalar($value = null)
    {
        $this->stamina_loss_scalar = $value;
    }

    /**
     * Check if 'trainer_level_min' has a value
     *
     * @return bool
     */
    public function hasTrainerLevelMin()
    {
        return $this->trainer_level_min !== null;
    }

    /**
     * Get 'trainer_level_min' value
     *
     * @return int
     */
    public function getTrainerLevelMin()
    {
        return $this->trainer_level_min;
    }

    /**
     * Set 'trainer_level_min' value
     *
     * @param int $value
     */
    public function setTrainerLevelMin($value = null)
    {
        $this->trainer_level_min = $value;
    }

    /**
     * Check if 'trainer_level_max' has a value
     *
     * @return bool
     */
    public function hasTrainerLevelMax()
    {
        return $this->trainer_level_max !== null;
    }

    /**
     * Get 'trainer_level_max' value
     *
     * @return int
     */
    public function getTrainerLevelMax()
    {
        return $this->trainer_level_max;
    }

    /**
     * Set 'trainer_level_max' value
     *
     * @param int $value
     */
    public function setTrainerLevelMax($value = null)
    {
        $this->trainer_level_max = $value;
    }

    /**
     * Check if 'vfx_name' has a value
     *
     * @return bool
     */
    public function hasVfxName()
    {
        return $this->vfx_name !== null;
    }

    /**
     * Get 'vfx_name' value
     *
     * @return string
     */
    public function getVfxName()
    {
        return $this->vfx_name;
    }

    /**
     * Set 'vfx_name' value
     *
     * @param string $value
     */
    public function setVfxName($value = null)
    {
        $this->vfx_name = $value;
    }

    /**
     * Check if 'duration_ms' has a value
     *
     * @return bool
     */
    public function hasDurationMs()
    {
        return $this->duration_ms !== null;
    }

    /**
     * Get 'duration_ms' value
     *
     * @return int
     */
    public function getDurationMs()
    {
        return $this->duration_ms;
    }

    /**
     * Set 'duration_ms' value
     *
     * @param int $value
     */
    public function setDurationMs($value = null)
    {
        $this->duration_ms = $value;
    }

    /**
     * Check if 'damage_window_start_ms' has a value
     *
     * @return bool
     */
    public function hasDamageWindowStartMs()
    {
        return $this->damage_window_start_ms !== null;
    }

    /**
     * Get 'damage_window_start_ms' value
     *
     * @return int
     */
    public function getDamageWindowStartMs()
    {
        return $this->damage_window_start_ms;
    }

    /**
     * Set 'damage_window_start_ms' value
     *
     * @param int $value
     */
    public function setDamageWindowStartMs($value = null)
    {
        $this->damage_window_start_ms = $value;
    }

    /**
     * Check if 'damage_window_end_ms' has a value
     *
     * @return bool
     */
    public function hasDamageWindowEndMs()
    {
        return $this->damage_window_end_ms !== null;
    }

    /**
     * Get 'damage_window_end_ms' value
     *
     * @return int
     */
    public function getDamageWindowEndMs()
    {
        return $this->damage_window_end_ms;
    }

    /**
     * Set 'damage_window_end_ms' value
     *
     * @param int $value
     */
    public function setDamageWindowEndMs($value = null)
    {
        $this->damage_window_end_ms = $value;
    }

    /**
     * Check if 'energy_delta' has a value
     *
     * @return bool
     */
    public function hasEnergyDelta()
    {
        return $this->energy_delta !== null;
    }

    /**
     * Get 'energy_delta' value
     *
     * @return int
     */
    public function getEnergyDelta()
    {
        return $this->energy_delta;
    }

    /**
     * Set 'energy_delta' value
     *
     * @param int $value
     */
    public function setEnergyDelta($value = null)
    {
        $this->energy_delta = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'movement_id' => null,
            'animation_id' => null,
            'pokemon_type' => null,
            'power' => null,
            'accuracy_chance' => null,
            'critical_chance' => null,
            'heal_scalar' => null,
            'stamina_loss_scalar' => null,
            'trainer_level_min' => null,
            'trainer_level_max' => null,
            'vfx_name' => null,
            'duration_ms' => null,
            'damage_window_start_ms' => null,
            'damage_window_end_ms' => null,
            'energy_delta' => null
        ], $values);

        $message->setMovementId($values['movement_id']);
        $message->setAnimationId($values['animation_id']);
        $message->setPokemonType($values['pokemon_type']);
        $message->setPower($values['power']);
        $message->setAccuracyChance($values['accuracy_chance']);
        $message->setCriticalChance($values['critical_chance']);
        $message->setHealScalar($values['heal_scalar']);
        $message->setStaminaLossScalar($values['stamina_loss_scalar']);
        $message->setTrainerLevelMin($values['trainer_level_min']);
        $message->setTrainerLevelMax($values['trainer_level_max']);
        $message->setVfxName($values['vfx_name']);
        $message->setDurationMs($values['duration_ms']);
        $message->setDamageWindowStartMs($values['damage_window_start_ms']);
        $message->setDamageWindowEndMs($values['damage_window_end_ms']);
        $message->setEnergyDelta($values['energy_delta']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MoveSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'movement_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonMove'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'animation_id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'pokemon_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.PokemonType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'power',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'accuracy_chance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'critical_chance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'heal_scalar',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'stamina_loss_scalar',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'trainer_level_min',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'trainer_level_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'vfx_name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'duration_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'damage_window_start_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'damage_window_end_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'energy_delta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->movement_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->movement_id->value());
        }

        if ($this->animation_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->animation_id);
        }

        if ($this->pokemon_type !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->pokemon_type->value());
        }

        if ($this->power !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFloat($stream, $this->power);
        }

        if ($this->accuracy_chance !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->accuracy_chance);
        }

        if ($this->critical_chance !== null) {
            $writer->writeVarint($stream, 53);
            $writer->writeFloat($stream, $this->critical_chance);
        }

        if ($this->heal_scalar !== null) {
            $writer->writeVarint($stream, 61);
            $writer->writeFloat($stream, $this->heal_scalar);
        }

        if ($this->stamina_loss_scalar !== null) {
            $writer->writeVarint($stream, 69);
            $writer->writeFloat($stream, $this->stamina_loss_scalar);
        }

        if ($this->trainer_level_min !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->trainer_level_min);
        }

        if ($this->trainer_level_max !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->trainer_level_max);
        }

        if ($this->vfx_name !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->vfx_name);
        }

        if ($this->duration_ms !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->duration_ms);
        }

        if ($this->damage_window_start_ms !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->damage_window_start_ms);
        }

        if ($this->damage_window_end_ms !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->damage_window_end_ms);
        }

        if ($this->energy_delta !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->energy_delta);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->movement_id = \POGOProtos\Enums\PokemonMove::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->animation_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->pokemon_type = \POGOProtos\Enums\PokemonType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->power = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->accuracy_chance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->critical_chance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->heal_scalar = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->stamina_loss_scalar = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->trainer_level_min = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->trainer_level_max = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vfx_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->duration_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->damage_window_start_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->damage_window_end_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->energy_delta = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->movement_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->movement_id->value());
        }

        if ($this->animation_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->animation_id);
        }

        if ($this->pokemon_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemon_type->value());
        }

        if ($this->power !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->accuracy_chance !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->critical_chance !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->heal_scalar !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->stamina_loss_scalar !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->trainer_level_min !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->trainer_level_min);
        }

        if ($this->trainer_level_max !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->trainer_level_max);
        }

        if ($this->vfx_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->vfx_name);
        }

        if ($this->duration_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->duration_ms);
        }

        if ($this->damage_window_start_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->damage_window_start_ms);
        }

        if ($this->damage_window_end_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->damage_window_end_ms);
        }

        if ($this->energy_delta !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->energy_delta);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->movement_id = null;
        $this->animation_id = null;
        $this->pokemon_type = null;
        $this->power = null;
        $this->accuracy_chance = null;
        $this->critical_chance = null;
        $this->heal_scalar = null;
        $this->stamina_loss_scalar = null;
        $this->trainer_level_min = null;
        $this->trainer_level_max = null;
        $this->vfx_name = null;
        $this->duration_ms = null;
        $this->damage_window_start_ms = null;
        $this->damage_window_end_ms = null;
        $this->energy_delta = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\MoveSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->movement_id = ($message->movement_id !== null) ? $message->movement_id : $this->movement_id;
        $this->animation_id = ($message->animation_id !== null) ? $message->animation_id : $this->animation_id;
        $this->pokemon_type = ($message->pokemon_type !== null) ? $message->pokemon_type : $this->pokemon_type;
        $this->power = ($message->power !== null) ? $message->power : $this->power;
        $this->accuracy_chance = ($message->accuracy_chance !== null) ? $message->accuracy_chance : $this->accuracy_chance;
        $this->critical_chance = ($message->critical_chance !== null) ? $message->critical_chance : $this->critical_chance;
        $this->heal_scalar = ($message->heal_scalar !== null) ? $message->heal_scalar : $this->heal_scalar;
        $this->stamina_loss_scalar = ($message->stamina_loss_scalar !== null) ? $message->stamina_loss_scalar : $this->stamina_loss_scalar;
        $this->trainer_level_min = ($message->trainer_level_min !== null) ? $message->trainer_level_min : $this->trainer_level_min;
        $this->trainer_level_max = ($message->trainer_level_max !== null) ? $message->trainer_level_max : $this->trainer_level_max;
        $this->vfx_name = ($message->vfx_name !== null) ? $message->vfx_name : $this->vfx_name;
        $this->duration_ms = ($message->duration_ms !== null) ? $message->duration_ms : $this->duration_ms;
        $this->damage_window_start_ms = ($message->damage_window_start_ms !== null) ? $message->damage_window_start_ms : $this->damage_window_start_ms;
        $this->damage_window_end_ms = ($message->damage_window_end_ms !== null) ? $message->damage_window_end_ms : $this->damage_window_end_ms;
        $this->energy_delta = ($message->energy_delta !== null) ? $message->energy_delta : $this->energy_delta;
    }


}

