<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/Pokemon/CameraAttributes.php');

namespace POGOProtos\Settings\Master\Pokemon {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.Pokemon.CameraAttributes
  final class CameraAttributes extends ProtobufMessage {

    private $_unknown;
    private $diskRadiusM = 0; // optional float disk_radius_m = 1
    private $cylinderRadiusM = 0; // optional float cylinder_radius_m = 2
    private $cylinderHeightM = 0; // optional float cylinder_height_m = 3
    private $cylinderGroundM = 0; // optional float cylinder_ground_m = 4
    private $shoulderModeScale = 0; // optional float shoulder_mode_scale = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional float disk_radius_m = 1
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->diskRadiusM = $tmp;

            break;
          case 2: // optional float cylinder_radius_m = 2
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->cylinderRadiusM = $tmp;

            break;
          case 3: // optional float cylinder_height_m = 3
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->cylinderHeightM = $tmp;

            break;
          case 4: // optional float cylinder_ground_m = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->cylinderGroundM = $tmp;

            break;
          case 5: // optional float shoulder_mode_scale = 5
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->shoulderModeScale = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->diskRadiusM !== 0) {
        fwrite($fp, "\x0d", 1);
        Protobuf::write_float($fp, $this->diskRadiusM);
      }
      if ($this->cylinderRadiusM !== 0) {
        fwrite($fp, "\x15", 1);
        Protobuf::write_float($fp, $this->cylinderRadiusM);
      }
      if ($this->cylinderHeightM !== 0) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $this->cylinderHeightM);
      }
      if ($this->cylinderGroundM !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->cylinderGroundM);
      }
      if ($this->shoulderModeScale !== 0) {
        fwrite($fp, "-", 1);
        Protobuf::write_float($fp, $this->shoulderModeScale);
      }
    }

    public function size() {
      $size = 0;
      if ($this->diskRadiusM !== 0) {
        $size += 5;
      }
      if ($this->cylinderRadiusM !== 0) {
        $size += 5;
      }
      if ($this->cylinderHeightM !== 0) {
        $size += 5;
      }
      if ($this->cylinderGroundM !== 0) {
        $size += 5;
      }
      if ($this->shoulderModeScale !== 0) {
        $size += 5;
      }
      return $size;
    }

    public function clearDiskRadiusM() { $this->diskRadiusM = 0; }
    public function getDiskRadiusM() { return $this->diskRadiusM;}
    public function setDiskRadiusM($value) { $this->diskRadiusM = $value; }

    public function clearCylinderRadiusM() { $this->cylinderRadiusM = 0; }
    public function getCylinderRadiusM() { return $this->cylinderRadiusM;}
    public function setCylinderRadiusM($value) { $this->cylinderRadiusM = $value; }

    public function clearCylinderHeightM() { $this->cylinderHeightM = 0; }
    public function getCylinderHeightM() { return $this->cylinderHeightM;}
    public function setCylinderHeightM($value) { $this->cylinderHeightM = $value; }

    public function clearCylinderGroundM() { $this->cylinderGroundM = 0; }
    public function getCylinderGroundM() { return $this->cylinderGroundM;}
    public function setCylinderGroundM($value) { $this->cylinderGroundM = $value; }

    public function clearShoulderModeScale() { $this->shoulderModeScale = 0; }
    public function getShoulderModeScale() { return $this->shoulderModeScale;}
    public function setShoulderModeScale($value) { $this->shoulderModeScale = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('disk_radius_m', $this->diskRadiusM, 0)
           . Protobuf::toString('cylinder_radius_m', $this->cylinderRadiusM, 0)
           . Protobuf::toString('cylinder_height_m', $this->cylinderHeightM, 0)
           . Protobuf::toString('cylinder_ground_m', $this->cylinderGroundM, 0)
           . Protobuf::toString('shoulder_mode_scale', $this->shoulderModeScale, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.Pokemon.CameraAttributes)
  }

}