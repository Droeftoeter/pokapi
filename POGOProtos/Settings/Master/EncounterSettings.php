<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.EncounterSettings
 */
class EncounterSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * spin_bonus_threshold optional float = 1
     *
     * @var float
     */
    protected $spin_bonus_threshold = null;

    /**
     * excellent_throw_threshold optional float = 2
     *
     * @var float
     */
    protected $excellent_throw_threshold = null;

    /**
     * great_throw_threshold optional float = 3
     *
     * @var float
     */
    protected $great_throw_threshold = null;

    /**
     * nice_throw_threshold optional float = 4
     *
     * @var float
     */
    protected $nice_throw_threshold = null;

    /**
     * milestone_threshold optional int32 = 5
     *
     * @var int
     */
    protected $milestone_threshold = null;

    /**
     * Check if 'spin_bonus_threshold' has a value
     *
     * @return bool
     */
    public function hasSpinBonusThreshold()
    {
        return $this->spin_bonus_threshold !== null;
    }

    /**
     * Get 'spin_bonus_threshold' value
     *
     * @return float
     */
    public function getSpinBonusThreshold()
    {
        return $this->spin_bonus_threshold;
    }

    /**
     * Set 'spin_bonus_threshold' value
     *
     * @param float $value
     */
    public function setSpinBonusThreshold($value = null)
    {
        $this->spin_bonus_threshold = $value;
    }

    /**
     * Check if 'excellent_throw_threshold' has a value
     *
     * @return bool
     */
    public function hasExcellentThrowThreshold()
    {
        return $this->excellent_throw_threshold !== null;
    }

    /**
     * Get 'excellent_throw_threshold' value
     *
     * @return float
     */
    public function getExcellentThrowThreshold()
    {
        return $this->excellent_throw_threshold;
    }

    /**
     * Set 'excellent_throw_threshold' value
     *
     * @param float $value
     */
    public function setExcellentThrowThreshold($value = null)
    {
        $this->excellent_throw_threshold = $value;
    }

    /**
     * Check if 'great_throw_threshold' has a value
     *
     * @return bool
     */
    public function hasGreatThrowThreshold()
    {
        return $this->great_throw_threshold !== null;
    }

    /**
     * Get 'great_throw_threshold' value
     *
     * @return float
     */
    public function getGreatThrowThreshold()
    {
        return $this->great_throw_threshold;
    }

    /**
     * Set 'great_throw_threshold' value
     *
     * @param float $value
     */
    public function setGreatThrowThreshold($value = null)
    {
        $this->great_throw_threshold = $value;
    }

    /**
     * Check if 'nice_throw_threshold' has a value
     *
     * @return bool
     */
    public function hasNiceThrowThreshold()
    {
        return $this->nice_throw_threshold !== null;
    }

    /**
     * Get 'nice_throw_threshold' value
     *
     * @return float
     */
    public function getNiceThrowThreshold()
    {
        return $this->nice_throw_threshold;
    }

    /**
     * Set 'nice_throw_threshold' value
     *
     * @param float $value
     */
    public function setNiceThrowThreshold($value = null)
    {
        $this->nice_throw_threshold = $value;
    }

    /**
     * Check if 'milestone_threshold' has a value
     *
     * @return bool
     */
    public function hasMilestoneThreshold()
    {
        return $this->milestone_threshold !== null;
    }

    /**
     * Get 'milestone_threshold' value
     *
     * @return int
     */
    public function getMilestoneThreshold()
    {
        return $this->milestone_threshold;
    }

    /**
     * Set 'milestone_threshold' value
     *
     * @param int $value
     */
    public function setMilestoneThreshold($value = null)
    {
        $this->milestone_threshold = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'spin_bonus_threshold' => null,
            'excellent_throw_threshold' => null,
            'great_throw_threshold' => null,
            'nice_throw_threshold' => null,
            'milestone_threshold' => null
        ], $values);

        $message->setSpinBonusThreshold($values['spin_bonus_threshold']);
        $message->setExcellentThrowThreshold($values['excellent_throw_threshold']);
        $message->setGreatThrowThreshold($values['great_throw_threshold']);
        $message->setNiceThrowThreshold($values['nice_throw_threshold']);
        $message->setMilestoneThreshold($values['milestone_threshold']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'EncounterSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'spin_bonus_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'excellent_throw_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'great_throw_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'nice_throw_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'milestone_threshold',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->spin_bonus_threshold !== null) {
            $writer->writeVarint($stream, 13);
            $writer->writeFloat($stream, $this->spin_bonus_threshold);
        }

        if ($this->excellent_throw_threshold !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFloat($stream, $this->excellent_throw_threshold);
        }

        if ($this->great_throw_threshold !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->great_throw_threshold);
        }

        if ($this->nice_throw_threshold !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFloat($stream, $this->nice_throw_threshold);
        }

        if ($this->milestone_threshold !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->milestone_threshold);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->spin_bonus_threshold = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->excellent_throw_threshold = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->great_throw_threshold = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->nice_throw_threshold = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->milestone_threshold = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->spin_bonus_threshold !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->excellent_throw_threshold !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->great_throw_threshold !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->nice_throw_threshold !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->milestone_threshold !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->milestone_threshold);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->spin_bonus_threshold = null;
        $this->excellent_throw_threshold = null;
        $this->great_throw_threshold = null;
        $this->nice_throw_threshold = null;
        $this->milestone_threshold = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\EncounterSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->spin_bonus_threshold = ($message->spin_bonus_threshold !== null) ? $message->spin_bonus_threshold : $this->spin_bonus_threshold;
        $this->excellent_throw_threshold = ($message->excellent_throw_threshold !== null) ? $message->excellent_throw_threshold : $this->excellent_throw_threshold;
        $this->great_throw_threshold = ($message->great_throw_threshold !== null) ? $message->great_throw_threshold : $this->great_throw_threshold;
        $this->nice_throw_threshold = ($message->nice_throw_threshold !== null) ? $message->nice_throw_threshold : $this->nice_throw_threshold;
        $this->milestone_threshold = ($message->milestone_threshold !== null) ? $message->milestone_threshold : $this->milestone_threshold;
    }


}

