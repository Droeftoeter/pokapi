<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/EncounterSettings.php');

namespace POGOProtos\Settings\Master {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.EncounterSettings
  final class EncounterSettings extends ProtobufMessage {

    private $_unknown;
    private $spinBonusThreshold = 0; // optional float spin_bonus_threshold = 1
    private $excellentThrowThreshold = 0; // optional float excellent_throw_threshold = 2
    private $greatThrowThreshold = 0; // optional float great_throw_threshold = 3
    private $niceThrowThreshold = 0; // optional float nice_throw_threshold = 4
    private $milestoneThreshold = 0; // optional int32 milestone_threshold = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional float spin_bonus_threshold = 1
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->spinBonusThreshold = $tmp;

            break;
          case 2: // optional float excellent_throw_threshold = 2
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->excellentThrowThreshold = $tmp;

            break;
          case 3: // optional float great_throw_threshold = 3
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->greatThrowThreshold = $tmp;

            break;
          case 4: // optional float nice_throw_threshold = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->niceThrowThreshold = $tmp;

            break;
          case 5: // optional int32 milestone_threshold = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->milestoneThreshold = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->spinBonusThreshold !== 0) {
        fwrite($fp, "\x0d", 1);
        Protobuf::write_float($fp, $this->spinBonusThreshold);
      }
      if ($this->excellentThrowThreshold !== 0) {
        fwrite($fp, "\x15", 1);
        Protobuf::write_float($fp, $this->excellentThrowThreshold);
      }
      if ($this->greatThrowThreshold !== 0) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $this->greatThrowThreshold);
      }
      if ($this->niceThrowThreshold !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->niceThrowThreshold);
      }
      if ($this->milestoneThreshold !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->milestoneThreshold);
      }
    }

    public function size() {
      $size = 0;
      if ($this->spinBonusThreshold !== 0) {
        $size += 5;
      }
      if ($this->excellentThrowThreshold !== 0) {
        $size += 5;
      }
      if ($this->greatThrowThreshold !== 0) {
        $size += 5;
      }
      if ($this->niceThrowThreshold !== 0) {
        $size += 5;
      }
      if ($this->milestoneThreshold !== 0) {
        $size += 1 + Protobuf::size_varint($this->milestoneThreshold);
      }
      return $size;
    }

    public function clearSpinBonusThreshold() { $this->spinBonusThreshold = 0; }
    public function getSpinBonusThreshold() { return $this->spinBonusThreshold;}
    public function setSpinBonusThreshold($value) { $this->spinBonusThreshold = $value; }

    public function clearExcellentThrowThreshold() { $this->excellentThrowThreshold = 0; }
    public function getExcellentThrowThreshold() { return $this->excellentThrowThreshold;}
    public function setExcellentThrowThreshold($value) { $this->excellentThrowThreshold = $value; }

    public function clearGreatThrowThreshold() { $this->greatThrowThreshold = 0; }
    public function getGreatThrowThreshold() { return $this->greatThrowThreshold;}
    public function setGreatThrowThreshold($value) { $this->greatThrowThreshold = $value; }

    public function clearNiceThrowThreshold() { $this->niceThrowThreshold = 0; }
    public function getNiceThrowThreshold() { return $this->niceThrowThreshold;}
    public function setNiceThrowThreshold($value) { $this->niceThrowThreshold = $value; }

    public function clearMilestoneThreshold() { $this->milestoneThreshold = 0; }
    public function getMilestoneThreshold() { return $this->milestoneThreshold;}
    public function setMilestoneThreshold($value) { $this->milestoneThreshold = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('spin_bonus_threshold', $this->spinBonusThreshold, 0)
           . Protobuf::toString('excellent_throw_threshold', $this->excellentThrowThreshold, 0)
           . Protobuf::toString('great_throw_threshold', $this->greatThrowThreshold, 0)
           . Protobuf::toString('nice_throw_threshold', $this->niceThrowThreshold, 0)
           . Protobuf::toString('milestone_threshold', $this->milestoneThreshold, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.EncounterSettings)
  }

}