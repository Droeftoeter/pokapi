<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.GymBattleSettings
 */
class GymBattleSettings extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * energy_per_sec optional float = 1
     *
     * @var float
     */
    protected $energy_per_sec = null;

    /**
     * dodge_energy_cost optional float = 2
     *
     * @var float
     */
    protected $dodge_energy_cost = null;

    /**
     * retarget_seconds optional float = 3
     *
     * @var float
     */
    protected $retarget_seconds = null;

    /**
     * enemy_attack_interval optional float = 4
     *
     * @var float
     */
    protected $enemy_attack_interval = null;

    /**
     * attack_server_interval optional float = 5
     *
     * @var float
     */
    protected $attack_server_interval = null;

    /**
     * round_duration_seconds optional float = 6
     *
     * @var float
     */
    protected $round_duration_seconds = null;

    /**
     * bonus_time_per_ally_seconds optional float = 7
     *
     * @var float
     */
    protected $bonus_time_per_ally_seconds = null;

    /**
     * maximum_attackers_per_battle optional int32 = 8
     *
     * @var int
     */
    protected $maximum_attackers_per_battle = null;

    /**
     * same_type_attack_bonus_multiplier optional float = 9
     *
     * @var float
     */
    protected $same_type_attack_bonus_multiplier = null;

    /**
     * maximum_energy optional int32 = 10
     *
     * @var int
     */
    protected $maximum_energy = null;

    /**
     * energy_delta_per_health_lost optional float = 11
     *
     * @var float
     */
    protected $energy_delta_per_health_lost = null;

    /**
     * dodge_duration_ms optional int32 = 12
     *
     * @var int
     */
    protected $dodge_duration_ms = null;

    /**
     * minimum_player_level optional int32 = 13
     *
     * @var int
     */
    protected $minimum_player_level = null;

    /**
     * swap_duration_ms optional int32 = 14
     *
     * @var int
     */
    protected $swap_duration_ms = null;

    /**
     * Check if 'energy_per_sec' has a value
     *
     * @return bool
     */
    public function hasEnergyPerSec()
    {
        return $this->energy_per_sec !== null;
    }

    /**
     * Get 'energy_per_sec' value
     *
     * @return float
     */
    public function getEnergyPerSec()
    {
        return $this->energy_per_sec;
    }

    /**
     * Set 'energy_per_sec' value
     *
     * @param float $value
     */
    public function setEnergyPerSec($value = null)
    {
        $this->energy_per_sec = $value;
    }

    /**
     * Check if 'dodge_energy_cost' has a value
     *
     * @return bool
     */
    public function hasDodgeEnergyCost()
    {
        return $this->dodge_energy_cost !== null;
    }

    /**
     * Get 'dodge_energy_cost' value
     *
     * @return float
     */
    public function getDodgeEnergyCost()
    {
        return $this->dodge_energy_cost;
    }

    /**
     * Set 'dodge_energy_cost' value
     *
     * @param float $value
     */
    public function setDodgeEnergyCost($value = null)
    {
        $this->dodge_energy_cost = $value;
    }

    /**
     * Check if 'retarget_seconds' has a value
     *
     * @return bool
     */
    public function hasRetargetSeconds()
    {
        return $this->retarget_seconds !== null;
    }

    /**
     * Get 'retarget_seconds' value
     *
     * @return float
     */
    public function getRetargetSeconds()
    {
        return $this->retarget_seconds;
    }

    /**
     * Set 'retarget_seconds' value
     *
     * @param float $value
     */
    public function setRetargetSeconds($value = null)
    {
        $this->retarget_seconds = $value;
    }

    /**
     * Check if 'enemy_attack_interval' has a value
     *
     * @return bool
     */
    public function hasEnemyAttackInterval()
    {
        return $this->enemy_attack_interval !== null;
    }

    /**
     * Get 'enemy_attack_interval' value
     *
     * @return float
     */
    public function getEnemyAttackInterval()
    {
        return $this->enemy_attack_interval;
    }

    /**
     * Set 'enemy_attack_interval' value
     *
     * @param float $value
     */
    public function setEnemyAttackInterval($value = null)
    {
        $this->enemy_attack_interval = $value;
    }

    /**
     * Check if 'attack_server_interval' has a value
     *
     * @return bool
     */
    public function hasAttackServerInterval()
    {
        return $this->attack_server_interval !== null;
    }

    /**
     * Get 'attack_server_interval' value
     *
     * @return float
     */
    public function getAttackServerInterval()
    {
        return $this->attack_server_interval;
    }

    /**
     * Set 'attack_server_interval' value
     *
     * @param float $value
     */
    public function setAttackServerInterval($value = null)
    {
        $this->attack_server_interval = $value;
    }

    /**
     * Check if 'round_duration_seconds' has a value
     *
     * @return bool
     */
    public function hasRoundDurationSeconds()
    {
        return $this->round_duration_seconds !== null;
    }

    /**
     * Get 'round_duration_seconds' value
     *
     * @return float
     */
    public function getRoundDurationSeconds()
    {
        return $this->round_duration_seconds;
    }

    /**
     * Set 'round_duration_seconds' value
     *
     * @param float $value
     */
    public function setRoundDurationSeconds($value = null)
    {
        $this->round_duration_seconds = $value;
    }

    /**
     * Check if 'bonus_time_per_ally_seconds' has a value
     *
     * @return bool
     */
    public function hasBonusTimePerAllySeconds()
    {
        return $this->bonus_time_per_ally_seconds !== null;
    }

    /**
     * Get 'bonus_time_per_ally_seconds' value
     *
     * @return float
     */
    public function getBonusTimePerAllySeconds()
    {
        return $this->bonus_time_per_ally_seconds;
    }

    /**
     * Set 'bonus_time_per_ally_seconds' value
     *
     * @param float $value
     */
    public function setBonusTimePerAllySeconds($value = null)
    {
        $this->bonus_time_per_ally_seconds = $value;
    }

    /**
     * Check if 'maximum_attackers_per_battle' has a value
     *
     * @return bool
     */
    public function hasMaximumAttackersPerBattle()
    {
        return $this->maximum_attackers_per_battle !== null;
    }

    /**
     * Get 'maximum_attackers_per_battle' value
     *
     * @return int
     */
    public function getMaximumAttackersPerBattle()
    {
        return $this->maximum_attackers_per_battle;
    }

    /**
     * Set 'maximum_attackers_per_battle' value
     *
     * @param int $value
     */
    public function setMaximumAttackersPerBattle($value = null)
    {
        $this->maximum_attackers_per_battle = $value;
    }

    /**
     * Check if 'same_type_attack_bonus_multiplier' has a value
     *
     * @return bool
     */
    public function hasSameTypeAttackBonusMultiplier()
    {
        return $this->same_type_attack_bonus_multiplier !== null;
    }

    /**
     * Get 'same_type_attack_bonus_multiplier' value
     *
     * @return float
     */
    public function getSameTypeAttackBonusMultiplier()
    {
        return $this->same_type_attack_bonus_multiplier;
    }

    /**
     * Set 'same_type_attack_bonus_multiplier' value
     *
     * @param float $value
     */
    public function setSameTypeAttackBonusMultiplier($value = null)
    {
        $this->same_type_attack_bonus_multiplier = $value;
    }

    /**
     * Check if 'maximum_energy' has a value
     *
     * @return bool
     */
    public function hasMaximumEnergy()
    {
        return $this->maximum_energy !== null;
    }

    /**
     * Get 'maximum_energy' value
     *
     * @return int
     */
    public function getMaximumEnergy()
    {
        return $this->maximum_energy;
    }

    /**
     * Set 'maximum_energy' value
     *
     * @param int $value
     */
    public function setMaximumEnergy($value = null)
    {
        $this->maximum_energy = $value;
    }

    /**
     * Check if 'energy_delta_per_health_lost' has a value
     *
     * @return bool
     */
    public function hasEnergyDeltaPerHealthLost()
    {
        return $this->energy_delta_per_health_lost !== null;
    }

    /**
     * Get 'energy_delta_per_health_lost' value
     *
     * @return float
     */
    public function getEnergyDeltaPerHealthLost()
    {
        return $this->energy_delta_per_health_lost;
    }

    /**
     * Set 'energy_delta_per_health_lost' value
     *
     * @param float $value
     */
    public function setEnergyDeltaPerHealthLost($value = null)
    {
        $this->energy_delta_per_health_lost = $value;
    }

    /**
     * Check if 'dodge_duration_ms' has a value
     *
     * @return bool
     */
    public function hasDodgeDurationMs()
    {
        return $this->dodge_duration_ms !== null;
    }

    /**
     * Get 'dodge_duration_ms' value
     *
     * @return int
     */
    public function getDodgeDurationMs()
    {
        return $this->dodge_duration_ms;
    }

    /**
     * Set 'dodge_duration_ms' value
     *
     * @param int $value
     */
    public function setDodgeDurationMs($value = null)
    {
        $this->dodge_duration_ms = $value;
    }

    /**
     * Check if 'minimum_player_level' has a value
     *
     * @return bool
     */
    public function hasMinimumPlayerLevel()
    {
        return $this->minimum_player_level !== null;
    }

    /**
     * Get 'minimum_player_level' value
     *
     * @return int
     */
    public function getMinimumPlayerLevel()
    {
        return $this->minimum_player_level;
    }

    /**
     * Set 'minimum_player_level' value
     *
     * @param int $value
     */
    public function setMinimumPlayerLevel($value = null)
    {
        $this->minimum_player_level = $value;
    }

    /**
     * Check if 'swap_duration_ms' has a value
     *
     * @return bool
     */
    public function hasSwapDurationMs()
    {
        return $this->swap_duration_ms !== null;
    }

    /**
     * Get 'swap_duration_ms' value
     *
     * @return int
     */
    public function getSwapDurationMs()
    {
        return $this->swap_duration_ms;
    }

    /**
     * Set 'swap_duration_ms' value
     *
     * @param int $value
     */
    public function setSwapDurationMs($value = null)
    {
        $this->swap_duration_ms = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'energy_per_sec' => null,
            'dodge_energy_cost' => null,
            'retarget_seconds' => null,
            'enemy_attack_interval' => null,
            'attack_server_interval' => null,
            'round_duration_seconds' => null,
            'bonus_time_per_ally_seconds' => null,
            'maximum_attackers_per_battle' => null,
            'same_type_attack_bonus_multiplier' => null,
            'maximum_energy' => null,
            'energy_delta_per_health_lost' => null,
            'dodge_duration_ms' => null,
            'minimum_player_level' => null,
            'swap_duration_ms' => null
        ], $values);

        $message->setEnergyPerSec($values['energy_per_sec']);
        $message->setDodgeEnergyCost($values['dodge_energy_cost']);
        $message->setRetargetSeconds($values['retarget_seconds']);
        $message->setEnemyAttackInterval($values['enemy_attack_interval']);
        $message->setAttackServerInterval($values['attack_server_interval']);
        $message->setRoundDurationSeconds($values['round_duration_seconds']);
        $message->setBonusTimePerAllySeconds($values['bonus_time_per_ally_seconds']);
        $message->setMaximumAttackersPerBattle($values['maximum_attackers_per_battle']);
        $message->setSameTypeAttackBonusMultiplier($values['same_type_attack_bonus_multiplier']);
        $message->setMaximumEnergy($values['maximum_energy']);
        $message->setEnergyDeltaPerHealthLost($values['energy_delta_per_health_lost']);
        $message->setDodgeDurationMs($values['dodge_duration_ms']);
        $message->setMinimumPlayerLevel($values['minimum_player_level']);
        $message->setSwapDurationMs($values['swap_duration_ms']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'GymBattleSettings',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'energy_per_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'dodge_energy_cost',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'retarget_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'enemy_attack_interval',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'attack_server_interval',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'round_duration_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'bonus_time_per_ally_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'maximum_attackers_per_battle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'same_type_attack_bonus_multiplier',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'maximum_energy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'energy_delta_per_health_lost',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'dodge_duration_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'minimum_player_level',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'swap_duration_ms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->energy_per_sec !== null) {
            $writer->writeVarint($stream, 13);
            $writer->writeFloat($stream, $this->energy_per_sec);
        }

        if ($this->dodge_energy_cost !== null) {
            $writer->writeVarint($stream, 21);
            $writer->writeFloat($stream, $this->dodge_energy_cost);
        }

        if ($this->retarget_seconds !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->retarget_seconds);
        }

        if ($this->enemy_attack_interval !== null) {
            $writer->writeVarint($stream, 37);
            $writer->writeFloat($stream, $this->enemy_attack_interval);
        }

        if ($this->attack_server_interval !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->attack_server_interval);
        }

        if ($this->round_duration_seconds !== null) {
            $writer->writeVarint($stream, 53);
            $writer->writeFloat($stream, $this->round_duration_seconds);
        }

        if ($this->bonus_time_per_ally_seconds !== null) {
            $writer->writeVarint($stream, 61);
            $writer->writeFloat($stream, $this->bonus_time_per_ally_seconds);
        }

        if ($this->maximum_attackers_per_battle !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->maximum_attackers_per_battle);
        }

        if ($this->same_type_attack_bonus_multiplier !== null) {
            $writer->writeVarint($stream, 77);
            $writer->writeFloat($stream, $this->same_type_attack_bonus_multiplier);
        }

        if ($this->maximum_energy !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->maximum_energy);
        }

        if ($this->energy_delta_per_health_lost !== null) {
            $writer->writeVarint($stream, 93);
            $writer->writeFloat($stream, $this->energy_delta_per_health_lost);
        }

        if ($this->dodge_duration_ms !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->dodge_duration_ms);
        }

        if ($this->minimum_player_level !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->minimum_player_level);
        }

        if ($this->swap_duration_ms !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->swap_duration_ms);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->energy_per_sec = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->dodge_energy_cost = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->retarget_seconds = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->enemy_attack_interval = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->attack_server_interval = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->round_duration_seconds = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->bonus_time_per_ally_seconds = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->maximum_attackers_per_battle = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->same_type_attack_bonus_multiplier = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->maximum_energy = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->energy_delta_per_health_lost = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->dodge_duration_ms = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->minimum_player_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->swap_duration_ms = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->energy_per_sec !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->dodge_energy_cost !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->retarget_seconds !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->enemy_attack_interval !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->attack_server_interval !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->round_duration_seconds !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->bonus_time_per_ally_seconds !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->maximum_attackers_per_battle !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->maximum_attackers_per_battle);
        }

        if ($this->same_type_attack_bonus_multiplier !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->maximum_energy !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->maximum_energy);
        }

        if ($this->energy_delta_per_health_lost !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->dodge_duration_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->dodge_duration_ms);
        }

        if ($this->minimum_player_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->minimum_player_level);
        }

        if ($this->swap_duration_ms !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->swap_duration_ms);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->energy_per_sec = null;
        $this->dodge_energy_cost = null;
        $this->retarget_seconds = null;
        $this->enemy_attack_interval = null;
        $this->attack_server_interval = null;
        $this->round_duration_seconds = null;
        $this->bonus_time_per_ally_seconds = null;
        $this->maximum_attackers_per_battle = null;
        $this->same_type_attack_bonus_multiplier = null;
        $this->maximum_energy = null;
        $this->energy_delta_per_health_lost = null;
        $this->dodge_duration_ms = null;
        $this->minimum_player_level = null;
        $this->swap_duration_ms = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\GymBattleSettings) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->energy_per_sec = ($message->energy_per_sec !== null) ? $message->energy_per_sec : $this->energy_per_sec;
        $this->dodge_energy_cost = ($message->dodge_energy_cost !== null) ? $message->dodge_energy_cost : $this->dodge_energy_cost;
        $this->retarget_seconds = ($message->retarget_seconds !== null) ? $message->retarget_seconds : $this->retarget_seconds;
        $this->enemy_attack_interval = ($message->enemy_attack_interval !== null) ? $message->enemy_attack_interval : $this->enemy_attack_interval;
        $this->attack_server_interval = ($message->attack_server_interval !== null) ? $message->attack_server_interval : $this->attack_server_interval;
        $this->round_duration_seconds = ($message->round_duration_seconds !== null) ? $message->round_duration_seconds : $this->round_duration_seconds;
        $this->bonus_time_per_ally_seconds = ($message->bonus_time_per_ally_seconds !== null) ? $message->bonus_time_per_ally_seconds : $this->bonus_time_per_ally_seconds;
        $this->maximum_attackers_per_battle = ($message->maximum_attackers_per_battle !== null) ? $message->maximum_attackers_per_battle : $this->maximum_attackers_per_battle;
        $this->same_type_attack_bonus_multiplier = ($message->same_type_attack_bonus_multiplier !== null) ? $message->same_type_attack_bonus_multiplier : $this->same_type_attack_bonus_multiplier;
        $this->maximum_energy = ($message->maximum_energy !== null) ? $message->maximum_energy : $this->maximum_energy;
        $this->energy_delta_per_health_lost = ($message->energy_delta_per_health_lost !== null) ? $message->energy_delta_per_health_lost : $this->energy_delta_per_health_lost;
        $this->dodge_duration_ms = ($message->dodge_duration_ms !== null) ? $message->dodge_duration_ms : $this->dodge_duration_ms;
        $this->minimum_player_level = ($message->minimum_player_level !== null) ? $message->minimum_player_level : $this->minimum_player_level;
        $this->swap_duration_ms = ($message->swap_duration_ms !== null) ? $message->swap_duration_ms : $this->swap_duration_ms;
    }


}

