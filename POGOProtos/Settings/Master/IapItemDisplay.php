<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.proto
 */


namespace POGOProtos\Settings\Master;

/**
 * Protobuf message : POGOProtos.Settings.Master.IapItemDisplay
 */
class IapItemDisplay extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * sku optional string = 1
     *
     * @var string
     */
    protected $sku = null;

    /**
     * category optional enum = 2
     *
     * @var \POGOProtos\Enums\HoloIapItemCategory
     */
    protected $category = null;

    /**
     * sort_order optional int32 = 3
     *
     * @var int
     */
    protected $sort_order = null;

    /**
     * item_ids repeated enum = 4
     *
     * @var \Protobuf\Collection<\POGOProtos\Inventory\Item\ItemId>
     */
    protected $item_ids = null;

    /**
     * counts repeated int32 = 5
     *
     * @var \Protobuf\Collection
     */
    protected $counts = null;

    /**
     * Check if 'sku' has a value
     *
     * @return bool
     */
    public function hasSku()
    {
        return $this->sku !== null;
    }

    /**
     * Get 'sku' value
     *
     * @return string
     */
    public function getSku()
    {
        return $this->sku;
    }

    /**
     * Set 'sku' value
     *
     * @param string $value
     */
    public function setSku($value = null)
    {
        $this->sku = $value;
    }

    /**
     * Check if 'category' has a value
     *
     * @return bool
     */
    public function hasCategory()
    {
        return $this->category !== null;
    }

    /**
     * Get 'category' value
     *
     * @return \POGOProtos\Enums\HoloIapItemCategory
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set 'category' value
     *
     * @param \POGOProtos\Enums\HoloIapItemCategory $value
     */
    public function setCategory(\POGOProtos\Enums\HoloIapItemCategory $value = null)
    {
        $this->category = $value;
    }

    /**
     * Check if 'sort_order' has a value
     *
     * @return bool
     */
    public function hasSortOrder()
    {
        return $this->sort_order !== null;
    }

    /**
     * Get 'sort_order' value
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->sort_order;
    }

    /**
     * Set 'sort_order' value
     *
     * @param int $value
     */
    public function setSortOrder($value = null)
    {
        $this->sort_order = $value;
    }

    /**
     * Check if 'item_ids' has a value
     *
     * @return bool
     */
    public function hasItemIdsList()
    {
        return $this->item_ids !== null;
    }

    /**
     * Get 'item_ids' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Inventory\Item\ItemId>
     */
    public function getItemIdsList()
    {
        return $this->item_ids;
    }

    /**
     * Set 'item_ids' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Inventory\Item\ItemId> $value
     */
    public function setItemIdsList(\Protobuf\Collection $value = null)
    {
        $this->item_ids = $value;
    }

    /**
     * Add a new element to 'item_ids'
     *
     * @param \POGOProtos\Inventory\Item\ItemId $value
     */
    public function addItemIds(\POGOProtos\Inventory\Item\ItemId $value)
    {
        if ($this->item_ids === null) {
            $this->item_ids = new \Protobuf\EnumCollection();
        }

        $this->item_ids->add($value);
    }

    /**
     * Check if 'counts' has a value
     *
     * @return bool
     */
    public function hasCountsList()
    {
        return $this->counts !== null;
    }

    /**
     * Get 'counts' value
     *
     * @return \Protobuf\Collection
     */
    public function getCountsList()
    {
        return $this->counts;
    }

    /**
     * Set 'counts' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setCountsList(\Protobuf\Collection $value = null)
    {
        $this->counts = $value;
    }

    /**
     * Add a new element to 'counts'
     *
     * @param int $value
     */
    public function addCounts($value)
    {
        if ($this->counts === null) {
            $this->counts = new \Protobuf\ScalarCollection();
        }

        $this->counts->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'sku' => null,
            'category' => null,
            'sort_order' => null,
            'item_ids' => [],
            'counts' => []
        ], $values);

        $message->setSku($values['sku']);
        $message->setCategory($values['category']);
        $message->setSortOrder($values['sort_order']);

        foreach ($values['item_ids'] as $item) {
            $message->addItemIds($item);
        }

        foreach ($values['counts'] as $item) {
            $message->addCounts($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'IapItemDisplay',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'sku',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'category',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.POGOProtos.Enums.HoloIapItemCategory'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'sort_order',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'item_ids',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Inventory.Item.ItemId'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'counts',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->sku !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->sku);
        }

        if ($this->category !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->category->value());
        }

        if ($this->sort_order !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->sort_order);
        }

        if ($this->item_ids !== null) {
            foreach ($this->item_ids as $val) {
                $writer->writeVarint($stream, 32);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->counts !== null) {
            foreach ($this->counts as $val) {
                $writer->writeVarint($stream, 40);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sku = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->category = \POGOProtos\Enums\HoloIapItemCategory::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->sort_order = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->item_ids === null) {
                    $this->item_ids = new \Protobuf\EnumCollection();
                }

                $this->item_ids->add(\POGOProtos\Inventory\Item\ItemId::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                if ($this->counts === null) {
                    $this->counts = new \Protobuf\ScalarCollection();
                }

                $this->counts->add($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->sku !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->sku);
        }

        if ($this->category !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->category->value());
        }

        if ($this->sort_order !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sort_order);
        }

        if ($this->item_ids !== null) {
            foreach ($this->item_ids as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->counts !== null) {
            foreach ($this->counts as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->sku = null;
        $this->category = null;
        $this->sort_order = null;
        $this->item_ids = null;
        $this->counts = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\IapItemDisplay) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->sku = ($message->sku !== null) ? $message->sku : $this->sku;
        $this->category = ($message->category !== null) ? $message->category : $this->category;
        $this->sort_order = ($message->sort_order !== null) ? $message->sort_order : $this->sort_order;
        $this->item_ids = ($message->item_ids !== null) ? $message->item_ids : $this->item_ids;
        $this->counts = ($message->counts !== null) ? $message->counts : $this->counts;
    }


}

