<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/Item/IncenseAttributes.php');

namespace POGOProtos\Settings\Master\Item {

  use POGOProtos\Enums\PokemonType;
  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Settings.Master.Item.IncenseAttributes
  final class IncenseAttributes extends ProtobufMessage {

    private $_unknown;
    private $incenseLifetimeSeconds = 0; // optional int32 incense_lifetime_seconds = 1
    private $pokemonType = array(); // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2
    private $pokemonIncenseTypeProbability = 0; // optional float pokemon_incense_type_probability = 3
    private $standingTimeBetweenEncountersSeconds = 0; // optional int32 standing_time_between_encounters_seconds = 4
    private $movingTimeBetweenEncounterSeconds = 0; // optional int32 moving_time_between_encounter_seconds = 5
    private $distanceRequiredForShorterIntervalMeters = 0; // optional int32 distance_required_for_shorter_interval_meters = 6
    private $pokemonAttractedLengthSec = 0; // optional int32 pokemon_attracted_length_sec = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 incense_lifetime_seconds = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->incenseLifetimeSeconds = $tmp;

            break;
          case 2: // repeated .POGOProtos.Enums.PokemonType pokemon_type = 2
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->pokemonType[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->pokemonType[] = $tmp;
              }
            }

            break;
          case 3: // optional float pokemon_incense_type_probability = 3
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->pokemonIncenseTypeProbability = $tmp;

            break;
          case 4: // optional int32 standing_time_between_encounters_seconds = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->standingTimeBetweenEncountersSeconds = $tmp;

            break;
          case 5: // optional int32 moving_time_between_encounter_seconds = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->movingTimeBetweenEncounterSeconds = $tmp;

            break;
          case 6: // optional int32 distance_required_for_shorter_interval_meters = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->distanceRequiredForShorterIntervalMeters = $tmp;

            break;
          case 7: // optional int32 pokemon_attracted_length_sec = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->pokemonAttractedLengthSec = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->incenseLifetimeSeconds !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->incenseLifetimeSeconds);
      }
      foreach($this->pokemonType as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      if ($this->pokemonIncenseTypeProbability !== 0) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $this->pokemonIncenseTypeProbability);
      }
      if ($this->standingTimeBetweenEncountersSeconds !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->standingTimeBetweenEncountersSeconds);
      }
      if ($this->movingTimeBetweenEncounterSeconds !== 0) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->movingTimeBetweenEncounterSeconds);
      }
      if ($this->distanceRequiredForShorterIntervalMeters !== 0) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->distanceRequiredForShorterIntervalMeters);
      }
      if ($this->pokemonAttractedLengthSec !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->pokemonAttractedLengthSec);
      }
    }

    public function size() {
      $size = 0;
      if ($this->incenseLifetimeSeconds !== 0) {
        $size += 1 + Protobuf::size_varint($this->incenseLifetimeSeconds);
      }
      foreach($this->pokemonType as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->pokemonIncenseTypeProbability !== 0) {
        $size += 5;
      }
      if ($this->standingTimeBetweenEncountersSeconds !== 0) {
        $size += 1 + Protobuf::size_varint($this->standingTimeBetweenEncountersSeconds);
      }
      if ($this->movingTimeBetweenEncounterSeconds !== 0) {
        $size += 1 + Protobuf::size_varint($this->movingTimeBetweenEncounterSeconds);
      }
      if ($this->distanceRequiredForShorterIntervalMeters !== 0) {
        $size += 1 + Protobuf::size_varint($this->distanceRequiredForShorterIntervalMeters);
      }
      if ($this->pokemonAttractedLengthSec !== 0) {
        $size += 1 + Protobuf::size_varint($this->pokemonAttractedLengthSec);
      }
      return $size;
    }

    public function clearIncenseLifetimeSeconds() { $this->incenseLifetimeSeconds = 0; }
    public function getIncenseLifetimeSeconds() { return $this->incenseLifetimeSeconds;}
    public function setIncenseLifetimeSeconds($value) { $this->incenseLifetimeSeconds = $value; }

    public function clearPokemonType() { $this->pokemonType = array(); }
    public function getPokemonTypeCount() { return count($this->pokemonType); }
    public function getPokemonType($index) { return $this->pokemonType[$index]; }
    public function getPokemonTypeArray() { return $this->pokemonType; }
    public function setPokemonType($index, array $value) {$this->pokemonType[$index] = $value; }
    public function addPokemonType(array $value) { $this->pokemonType[] = $value; }
    public function addAllPokemonType(array $values) { foreach($values as $value) {$this->pokemonType[] = $value; }}

    public function clearPokemonIncenseTypeProbability() { $this->pokemonIncenseTypeProbability = 0; }
    public function getPokemonIncenseTypeProbability() { return $this->pokemonIncenseTypeProbability;}
    public function setPokemonIncenseTypeProbability($value) { $this->pokemonIncenseTypeProbability = $value; }

    public function clearStandingTimeBetweenEncountersSeconds() { $this->standingTimeBetweenEncountersSeconds = 0; }
    public function getStandingTimeBetweenEncountersSeconds() { return $this->standingTimeBetweenEncountersSeconds;}
    public function setStandingTimeBetweenEncountersSeconds($value) { $this->standingTimeBetweenEncountersSeconds = $value; }

    public function clearMovingTimeBetweenEncounterSeconds() { $this->movingTimeBetweenEncounterSeconds = 0; }
    public function getMovingTimeBetweenEncounterSeconds() { return $this->movingTimeBetweenEncounterSeconds;}
    public function setMovingTimeBetweenEncounterSeconds($value) { $this->movingTimeBetweenEncounterSeconds = $value; }

    public function clearDistanceRequiredForShorterIntervalMeters() { $this->distanceRequiredForShorterIntervalMeters = 0; }
    public function getDistanceRequiredForShorterIntervalMeters() { return $this->distanceRequiredForShorterIntervalMeters;}
    public function setDistanceRequiredForShorterIntervalMeters($value) { $this->distanceRequiredForShorterIntervalMeters = $value; }

    public function clearPokemonAttractedLengthSec() { $this->pokemonAttractedLengthSec = 0; }
    public function getPokemonAttractedLengthSec() { return $this->pokemonAttractedLengthSec;}
    public function setPokemonAttractedLengthSec($value) { $this->pokemonAttractedLengthSec = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('incense_lifetime_seconds', $this->incenseLifetimeSeconds, 0)
           . Protobuf::toString('pokemon_type', $this->pokemonType, PokemonType::POKEMON_TYPE_NONE)
           . Protobuf::toString('pokemon_incense_type_probability', $this->pokemonIncenseTypeProbability, 0)
           . Protobuf::toString('standing_time_between_encounters_seconds', $this->standingTimeBetweenEncountersSeconds, 0)
           . Protobuf::toString('moving_time_between_encounter_seconds', $this->movingTimeBetweenEncounterSeconds, 0)
           . Protobuf::toString('distance_required_for_shorter_interval_meters', $this->distanceRequiredForShorterIntervalMeters, 0)
           . Protobuf::toString('pokemon_attracted_length_sec', $this->pokemonAttractedLengthSec, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.Item.IncenseAttributes)
  }

}