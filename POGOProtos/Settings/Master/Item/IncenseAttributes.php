<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : POGOProtos.Settings.Master.Item.proto
 */


namespace POGOProtos\Settings\Master\Item;

/**
 * Protobuf message : POGOProtos.Settings.Master.Item.IncenseAttributes
 */
class IncenseAttributes extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * incense_lifetime_seconds optional int32 = 1
     *
     * @var int
     */
    protected $incense_lifetime_seconds = null;

    /**
     * pokemon_type repeated enum = 2
     *
     * @var \Protobuf\Collection<\POGOProtos\Enums\PokemonType>
     */
    protected $pokemon_type = null;

    /**
     * pokemon_incense_type_probability optional float = 3
     *
     * @var float
     */
    protected $pokemon_incense_type_probability = null;

    /**
     * standing_time_between_encounters_seconds optional int32 = 4
     *
     * @var int
     */
    protected $standing_time_between_encounters_seconds = null;

    /**
     * moving_time_between_encounter_seconds optional int32 = 5
     *
     * @var int
     */
    protected $moving_time_between_encounter_seconds = null;

    /**
     * distance_required_for_shorter_interval_meters optional int32 = 6
     *
     * @var int
     */
    protected $distance_required_for_shorter_interval_meters = null;

    /**
     * pokemon_attracted_length_sec optional int32 = 7
     *
     * @var int
     */
    protected $pokemon_attracted_length_sec = null;

    /**
     * Check if 'incense_lifetime_seconds' has a value
     *
     * @return bool
     */
    public function hasIncenseLifetimeSeconds()
    {
        return $this->incense_lifetime_seconds !== null;
    }

    /**
     * Get 'incense_lifetime_seconds' value
     *
     * @return int
     */
    public function getIncenseLifetimeSeconds()
    {
        return $this->incense_lifetime_seconds;
    }

    /**
     * Set 'incense_lifetime_seconds' value
     *
     * @param int $value
     */
    public function setIncenseLifetimeSeconds($value = null)
    {
        $this->incense_lifetime_seconds = $value;
    }

    /**
     * Check if 'pokemon_type' has a value
     *
     * @return bool
     */
    public function hasPokemonTypeList()
    {
        return $this->pokemon_type !== null;
    }

    /**
     * Get 'pokemon_type' value
     *
     * @return \Protobuf\Collection<\POGOProtos\Enums\PokemonType>
     */
    public function getPokemonTypeList()
    {
        return $this->pokemon_type;
    }

    /**
     * Set 'pokemon_type' value
     *
     * @param \Protobuf\Collection<\POGOProtos\Enums\PokemonType> $value
     */
    public function setPokemonTypeList(\Protobuf\Collection $value = null)
    {
        $this->pokemon_type = $value;
    }

    /**
     * Add a new element to 'pokemon_type'
     *
     * @param \POGOProtos\Enums\PokemonType $value
     */
    public function addPokemonType(\POGOProtos\Enums\PokemonType $value)
    {
        if ($this->pokemon_type === null) {
            $this->pokemon_type = new \Protobuf\EnumCollection();
        }

        $this->pokemon_type->add($value);
    }

    /**
     * Check if 'pokemon_incense_type_probability' has a value
     *
     * @return bool
     */
    public function hasPokemonIncenseTypeProbability()
    {
        return $this->pokemon_incense_type_probability !== null;
    }

    /**
     * Get 'pokemon_incense_type_probability' value
     *
     * @return float
     */
    public function getPokemonIncenseTypeProbability()
    {
        return $this->pokemon_incense_type_probability;
    }

    /**
     * Set 'pokemon_incense_type_probability' value
     *
     * @param float $value
     */
    public function setPokemonIncenseTypeProbability($value = null)
    {
        $this->pokemon_incense_type_probability = $value;
    }

    /**
     * Check if 'standing_time_between_encounters_seconds' has a value
     *
     * @return bool
     */
    public function hasStandingTimeBetweenEncountersSeconds()
    {
        return $this->standing_time_between_encounters_seconds !== null;
    }

    /**
     * Get 'standing_time_between_encounters_seconds' value
     *
     * @return int
     */
    public function getStandingTimeBetweenEncountersSeconds()
    {
        return $this->standing_time_between_encounters_seconds;
    }

    /**
     * Set 'standing_time_between_encounters_seconds' value
     *
     * @param int $value
     */
    public function setStandingTimeBetweenEncountersSeconds($value = null)
    {
        $this->standing_time_between_encounters_seconds = $value;
    }

    /**
     * Check if 'moving_time_between_encounter_seconds' has a value
     *
     * @return bool
     */
    public function hasMovingTimeBetweenEncounterSeconds()
    {
        return $this->moving_time_between_encounter_seconds !== null;
    }

    /**
     * Get 'moving_time_between_encounter_seconds' value
     *
     * @return int
     */
    public function getMovingTimeBetweenEncounterSeconds()
    {
        return $this->moving_time_between_encounter_seconds;
    }

    /**
     * Set 'moving_time_between_encounter_seconds' value
     *
     * @param int $value
     */
    public function setMovingTimeBetweenEncounterSeconds($value = null)
    {
        $this->moving_time_between_encounter_seconds = $value;
    }

    /**
     * Check if 'distance_required_for_shorter_interval_meters' has a value
     *
     * @return bool
     */
    public function hasDistanceRequiredForShorterIntervalMeters()
    {
        return $this->distance_required_for_shorter_interval_meters !== null;
    }

    /**
     * Get 'distance_required_for_shorter_interval_meters' value
     *
     * @return int
     */
    public function getDistanceRequiredForShorterIntervalMeters()
    {
        return $this->distance_required_for_shorter_interval_meters;
    }

    /**
     * Set 'distance_required_for_shorter_interval_meters' value
     *
     * @param int $value
     */
    public function setDistanceRequiredForShorterIntervalMeters($value = null)
    {
        $this->distance_required_for_shorter_interval_meters = $value;
    }

    /**
     * Check if 'pokemon_attracted_length_sec' has a value
     *
     * @return bool
     */
    public function hasPokemonAttractedLengthSec()
    {
        return $this->pokemon_attracted_length_sec !== null;
    }

    /**
     * Get 'pokemon_attracted_length_sec' value
     *
     * @return int
     */
    public function getPokemonAttractedLengthSec()
    {
        return $this->pokemon_attracted_length_sec;
    }

    /**
     * Set 'pokemon_attracted_length_sec' value
     *
     * @param int $value
     */
    public function setPokemonAttractedLengthSec($value = null)
    {
        $this->pokemon_attracted_length_sec = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'incense_lifetime_seconds' => null,
            'pokemon_type' => [],
            'pokemon_incense_type_probability' => null,
            'standing_time_between_encounters_seconds' => null,
            'moving_time_between_encounter_seconds' => null,
            'distance_required_for_shorter_interval_meters' => null,
            'pokemon_attracted_length_sec' => null
        ], $values);

        $message->setIncenseLifetimeSeconds($values['incense_lifetime_seconds']);
        $message->setPokemonIncenseTypeProbability($values['pokemon_incense_type_probability']);
        $message->setStandingTimeBetweenEncountersSeconds($values['standing_time_between_encounters_seconds']);
        $message->setMovingTimeBetweenEncounterSeconds($values['moving_time_between_encounter_seconds']);
        $message->setDistanceRequiredForShorterIntervalMeters($values['distance_required_for_shorter_interval_meters']);
        $message->setPokemonAttractedLengthSec($values['pokemon_attracted_length_sec']);

        foreach ($values['pokemon_type'] as $item) {
            $message->addPokemonType($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'IncenseAttributes',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'incense_lifetime_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'pokemon_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.POGOProtos.Enums.PokemonType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'pokemon_incense_type_probability',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'standing_time_between_encounters_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'moving_time_between_encounter_seconds',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'distance_required_for_shorter_interval_meters',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'pokemon_attracted_length_sec',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->incense_lifetime_seconds !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->incense_lifetime_seconds);
        }

        if ($this->pokemon_type !== null) {
            foreach ($this->pokemon_type as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->pokemon_incense_type_probability !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->pokemon_incense_type_probability);
        }

        if ($this->standing_time_between_encounters_seconds !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->standing_time_between_encounters_seconds);
        }

        if ($this->moving_time_between_encounter_seconds !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->moving_time_between_encounter_seconds);
        }

        if ($this->distance_required_for_shorter_interval_meters !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->distance_required_for_shorter_interval_meters);
        }

        if ($this->pokemon_attracted_length_sec !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->pokemon_attracted_length_sec);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->incense_lifetime_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->pokemon_type === null) {
                    $this->pokemon_type = new \Protobuf\EnumCollection();
                }

                $this->pokemon_type->add(\POGOProtos\Enums\PokemonType::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->pokemon_incense_type_probability = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->standing_time_between_encounters_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->moving_time_between_encounter_seconds = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->distance_required_for_shorter_interval_meters = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->pokemon_attracted_length_sec = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->incense_lifetime_seconds !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->incense_lifetime_seconds);
        }

        if ($this->pokemon_type !== null) {
            foreach ($this->pokemon_type as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->pokemon_incense_type_probability !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->standing_time_between_encounters_seconds !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->standing_time_between_encounters_seconds);
        }

        if ($this->moving_time_between_encounter_seconds !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->moving_time_between_encounter_seconds);
        }

        if ($this->distance_required_for_shorter_interval_meters !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->distance_required_for_shorter_interval_meters);
        }

        if ($this->pokemon_attracted_length_sec !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pokemon_attracted_length_sec);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->incense_lifetime_seconds = null;
        $this->pokemon_type = null;
        $this->pokemon_incense_type_probability = null;
        $this->standing_time_between_encounters_seconds = null;
        $this->moving_time_between_encounter_seconds = null;
        $this->distance_required_for_shorter_interval_meters = null;
        $this->pokemon_attracted_length_sec = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \POGOProtos\Settings\Master\Item\IncenseAttributes) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->incense_lifetime_seconds = ($message->incense_lifetime_seconds !== null) ? $message->incense_lifetime_seconds : $this->incense_lifetime_seconds;
        $this->pokemon_type = ($message->pokemon_type !== null) ? $message->pokemon_type : $this->pokemon_type;
        $this->pokemon_incense_type_probability = ($message->pokemon_incense_type_probability !== null) ? $message->pokemon_incense_type_probability : $this->pokemon_incense_type_probability;
        $this->standing_time_between_encounters_seconds = ($message->standing_time_between_encounters_seconds !== null) ? $message->standing_time_between_encounters_seconds : $this->standing_time_between_encounters_seconds;
        $this->moving_time_between_encounter_seconds = ($message->moving_time_between_encounter_seconds !== null) ? $message->moving_time_between_encounter_seconds : $this->moving_time_between_encounter_seconds;
        $this->distance_required_for_shorter_interval_meters = ($message->distance_required_for_shorter_interval_meters !== null) ? $message->distance_required_for_shorter_interval_meters : $this->distance_required_for_shorter_interval_meters;
        $this->pokemon_attracted_length_sec = ($message->pokemon_attracted_length_sec !== null) ? $message->pokemon_attracted_length_sec : $this->pokemon_attracted_length_sec;
    }


}

