<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/MapSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.MapSettings
  final class MapSettings extends ProtobufMessage {

    private $_unknown;
    private $pokemonVisibleRange = 0; // optional double pokemon_visible_range = 1
    private $pokeNavRangeMeters = 0; // optional double poke_nav_range_meters = 2
    private $encounterRangeMeters = 0; // optional double encounter_range_meters = 3
    private $getMapObjectsMinRefreshSeconds = 0; // optional float get_map_objects_min_refresh_seconds = 4
    private $getMapObjectsMaxRefreshSeconds = 0; // optional float get_map_objects_max_refresh_seconds = 5
    private $getMapObjectsMinDistanceMeters = 0; // optional float get_map_objects_min_distance_meters = 6
    private $googleMapsApiKey = ""; // optional string google_maps_api_key = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional double pokemon_visible_range = 1
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->pokemonVisibleRange = $tmp;

            break;
          case 2: // optional double poke_nav_range_meters = 2
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->pokeNavRangeMeters = $tmp;

            break;
          case 3: // optional double encounter_range_meters = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->encounterRangeMeters = $tmp;

            break;
          case 4: // optional float get_map_objects_min_refresh_seconds = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->getMapObjectsMinRefreshSeconds = $tmp;

            break;
          case 5: // optional float get_map_objects_max_refresh_seconds = 5
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->getMapObjectsMaxRefreshSeconds = $tmp;

            break;
          case 6: // optional float get_map_objects_min_distance_meters = 6
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->getMapObjectsMinDistanceMeters = $tmp;

            break;
          case 7: // optional string google_maps_api_key = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->googleMapsApiKey = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->pokemonVisibleRange !== 0) {
        fwrite($fp, "\x09", 1);
        Protobuf::write_double($fp, $this->pokemonVisibleRange);
      }
      if ($this->pokeNavRangeMeters !== 0) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_double($fp, $this->pokeNavRangeMeters);
      }
      if ($this->encounterRangeMeters !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->encounterRangeMeters);
      }
      if ($this->getMapObjectsMinRefreshSeconds !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->getMapObjectsMinRefreshSeconds);
      }
      if ($this->getMapObjectsMaxRefreshSeconds !== 0) {
        fwrite($fp, "-", 1);
        Protobuf::write_float($fp, $this->getMapObjectsMaxRefreshSeconds);
      }
      if ($this->getMapObjectsMinDistanceMeters !== 0) {
        fwrite($fp, "5", 1);
        Protobuf::write_float($fp, $this->getMapObjectsMinDistanceMeters);
      }
      if ($this->googleMapsApiKey !== "") {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, strlen($this->googleMapsApiKey));
        fwrite($fp, $this->googleMapsApiKey);
      }
    }

    public function size() {
      $size = 0;
      if ($this->pokemonVisibleRange !== 0) {
        $size += 9;
      }
      if ($this->pokeNavRangeMeters !== 0) {
        $size += 9;
      }
      if ($this->encounterRangeMeters !== 0) {
        $size += 9;
      }
      if ($this->getMapObjectsMinRefreshSeconds !== 0) {
        $size += 5;
      }
      if ($this->getMapObjectsMaxRefreshSeconds !== 0) {
        $size += 5;
      }
      if ($this->getMapObjectsMinDistanceMeters !== 0) {
        $size += 5;
      }
      if ($this->googleMapsApiKey !== "") {
        $l = strlen($this->googleMapsApiKey);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearPokemonVisibleRange() { $this->pokemonVisibleRange = 0; }
    public function getPokemonVisibleRange() { return $this->pokemonVisibleRange;}
    public function setPokemonVisibleRange($value) { $this->pokemonVisibleRange = $value; }

    public function clearPokeNavRangeMeters() { $this->pokeNavRangeMeters = 0; }
    public function getPokeNavRangeMeters() { return $this->pokeNavRangeMeters;}
    public function setPokeNavRangeMeters($value) { $this->pokeNavRangeMeters = $value; }

    public function clearEncounterRangeMeters() { $this->encounterRangeMeters = 0; }
    public function getEncounterRangeMeters() { return $this->encounterRangeMeters;}
    public function setEncounterRangeMeters($value) { $this->encounterRangeMeters = $value; }

    public function clearGetMapObjectsMinRefreshSeconds() { $this->getMapObjectsMinRefreshSeconds = 0; }
    public function getGetMapObjectsMinRefreshSeconds() { return $this->getMapObjectsMinRefreshSeconds;}
    public function setGetMapObjectsMinRefreshSeconds($value) { $this->getMapObjectsMinRefreshSeconds = $value; }

    public function clearGetMapObjectsMaxRefreshSeconds() { $this->getMapObjectsMaxRefreshSeconds = 0; }
    public function getGetMapObjectsMaxRefreshSeconds() { return $this->getMapObjectsMaxRefreshSeconds;}
    public function setGetMapObjectsMaxRefreshSeconds($value) { $this->getMapObjectsMaxRefreshSeconds = $value; }

    public function clearGetMapObjectsMinDistanceMeters() { $this->getMapObjectsMinDistanceMeters = 0; }
    public function getGetMapObjectsMinDistanceMeters() { return $this->getMapObjectsMinDistanceMeters;}
    public function setGetMapObjectsMinDistanceMeters($value) { $this->getMapObjectsMinDistanceMeters = $value; }

    public function clearGoogleMapsApiKey() { $this->googleMapsApiKey = ""; }
    public function getGoogleMapsApiKey() { return $this->googleMapsApiKey;}
    public function setGoogleMapsApiKey($value) { $this->googleMapsApiKey = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('pokemon_visible_range', $this->pokemonVisibleRange, 0)
           . Protobuf::toString('poke_nav_range_meters', $this->pokeNavRangeMeters, 0)
           . Protobuf::toString('encounter_range_meters', $this->encounterRangeMeters, 0)
           . Protobuf::toString('get_map_objects_min_refresh_seconds', $this->getMapObjectsMinRefreshSeconds, 0)
           . Protobuf::toString('get_map_objects_max_refresh_seconds', $this->getMapObjectsMaxRefreshSeconds, 0)
           . Protobuf::toString('get_map_objects_min_distance_meters', $this->getMapObjectsMinDistanceMeters, 0)
           . Protobuf::toString('google_maps_api_key', $this->googleMapsApiKey, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.MapSettings)
  }

}