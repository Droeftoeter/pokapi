<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/LevelSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.LevelSettings
  final class LevelSettings extends ProtobufMessage {

    private $_unknown;
    private $trainerCpModifier = 0; // optional double trainer_cp_modifier = 2
    private $trainerDifficultyModifier = 0; // optional double trainer_difficulty_modifier = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 2: // optional double trainer_cp_modifier = 2
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->trainerCpModifier = $tmp;

            break;
          case 3: // optional double trainer_difficulty_modifier = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->trainerDifficultyModifier = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->trainerCpModifier !== 0) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_double($fp, $this->trainerCpModifier);
      }
      if ($this->trainerDifficultyModifier !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->trainerDifficultyModifier);
      }
    }

    public function size() {
      $size = 0;
      if ($this->trainerCpModifier !== 0) {
        $size += 9;
      }
      if ($this->trainerDifficultyModifier !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearTrainerCpModifier() { $this->trainerCpModifier = 0; }
    public function getTrainerCpModifier() { return $this->trainerCpModifier;}
    public function setTrainerCpModifier($value) { $this->trainerCpModifier = $value; }

    public function clearTrainerDifficultyModifier() { $this->trainerDifficultyModifier = 0; }
    public function getTrainerDifficultyModifier() { return $this->trainerDifficultyModifier;}
    public function setTrainerDifficultyModifier($value) { $this->trainerDifficultyModifier = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('trainer_cp_modifier', $this->trainerCpModifier, 0)
           . Protobuf::toString('trainer_difficulty_modifier', $this->trainerDifficultyModifier, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.LevelSettings)
  }

}