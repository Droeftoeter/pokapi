<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Inventory/InventoryDelta.php');

namespace POGOProtos\Inventory {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Inventory.InventoryDelta
  final class InventoryDelta extends ProtobufMessage {

    private $_unknown;
    private $originalTimestampMs = 0; // optional int64 original_timestamp_ms = 1
    private $newTimestampMs = 0; // optional int64 new_timestamp_ms = 2
    private $inventoryItems = array(); // repeated .POGOProtos.Inventory.InventoryItem inventory_items = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int64 original_timestamp_ms = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->originalTimestampMs = $tmp;

            break;
          case 2: // optional int64 new_timestamp_ms = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->newTimestampMs = $tmp;

            break;
          case 3: // repeated .POGOProtos.Inventory.InventoryItem inventory_items = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->inventoryItems[] = new \POGOProtos\Inventory\InventoryItem($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\InventoryItem did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->originalTimestampMs !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->originalTimestampMs);
      }
      if ($this->newTimestampMs !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->newTimestampMs);
      }
      foreach($this->inventoryItems as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->originalTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->originalTimestampMs);
      }
      if ($this->newTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->newTimestampMs);
      }
      foreach($this->inventoryItems as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearOriginalTimestampMs() { $this->originalTimestampMs = 0; }
    public function getOriginalTimestampMs() { return $this->originalTimestampMs;}
    public function setOriginalTimestampMs($value) { $this->originalTimestampMs = $value; }

    public function clearNewTimestampMs() { $this->newTimestampMs = 0; }
    public function getNewTimestampMs() { return $this->newTimestampMs;}
    public function setNewTimestampMs($value) { $this->newTimestampMs = $value; }

    public function clearInventoryItems() { $this->inventoryItems = array(); }
    public function getInventoryItemsCount() { return count($this->inventoryItems); }
    public function getInventoryItems($index) { return $this->inventoryItems[$index]; }
    public function getInventoryItemsArray() { return $this->inventoryItems; }
    public function setInventoryItems($index, array $value) {$this->inventoryItems[$index] = $value; }
    public function addInventoryItems(array $value) { $this->inventoryItems[] = $value; }
    public function addAllInventoryItems(array $values) { foreach($values as $value) {$this->inventoryItems[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('original_timestamp_ms', $this->originalTimestampMs, 0)
           . Protobuf::toString('new_timestamp_ms', $this->newTimestampMs, 0)
           . Protobuf::toString('inventory_items', $this->inventoryItems, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Inventory.InventoryDelta)
  }

}