<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Inventory/InventoryItem.php');

namespace POGOProtos\Inventory {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Inventory.InventoryItem
  final class InventoryItem extends ProtobufMessage {

    private $_unknown;
    private $modifiedTimestampMs = 0; // optional int64 modified_timestamp_ms = 1
    private $deletedItemKey = 0; // optional int64 deleted_item_key = 2
    private $inventoryItemData = null; // optional .POGOProtos.Inventory.InventoryItemData inventory_item_data = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int64 modified_timestamp_ms = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->modifiedTimestampMs = $tmp;

            break;
          case 2: // optional int64 deleted_item_key = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->deletedItemKey = $tmp;

            break;
          case 3: // optional .POGOProtos.Inventory.InventoryItemData inventory_item_data = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->inventoryItemData = new \POGOProtos\Inventory\InventoryItemData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\InventoryItemData did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->modifiedTimestampMs !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->modifiedTimestampMs);
      }
      if ($this->deletedItemKey !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->deletedItemKey);
      }
      if ($this->inventoryItemData !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->inventoryItemData->size());
        $this->inventoryItemData->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->modifiedTimestampMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->modifiedTimestampMs);
      }
      if ($this->deletedItemKey !== 0) {
        $size += 1 + Protobuf::size_varint($this->deletedItemKey);
      }
      if ($this->inventoryItemData !== null) {
        $l = $this->inventoryItemData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearModifiedTimestampMs() { $this->modifiedTimestampMs = 0; }
    public function getModifiedTimestampMs() { return $this->modifiedTimestampMs;}
    public function setModifiedTimestampMs($value) { $this->modifiedTimestampMs = $value; }

    public function clearDeletedItemKey() { $this->deletedItemKey = 0; }
    public function getDeletedItemKey() { return $this->deletedItemKey;}
    public function setDeletedItemKey($value) { $this->deletedItemKey = $value; }

    public function clearInventoryItemData() { $this->inventoryItemData = null; }
    public function getInventoryItemData() { return $this->inventoryItemData;}
    public function setInventoryItemData(\POGOProtos\Inventory\InventoryItemData $value) { $this->inventoryItemData = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('modified_timestamp_ms', $this->modifiedTimestampMs, 0)
           . Protobuf::toString('deleted_item_key', $this->deletedItemKey, 0)
           . Protobuf::toString('inventory_item_data', $this->inventoryItemData, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Inventory.InventoryItem)
  }

}