<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Inventory/InventoryItemData.php');

namespace POGOProtos\Inventory {

  use Protobuf;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Inventory.InventoryItemData
  final class InventoryItemData extends ProtobufMessage {

    private $_unknown;
    private $pokemonData = null; // optional .POGOProtos.Data.PokemonData pokemon_data = 1
    private $item = null; // optional .POGOProtos.Inventory.Item.ItemData item = 2
    private $pokedexEntry = null; // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3
    private $playerStats = null; // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4
    private $playerCurrency = null; // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5
    private $playerCamera = null; // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6
    private $inventoryUpgrades = null; // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7
    private $appliedItems = null; // optional .POGOProtos.Inventory.AppliedItems applied_items = 8
    private $eggIncubators = null; // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9
    private $pokemonFamily = null; // optional .POGOProtos.Inventory.PokemonFamily pokemon_family = 10

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Data.PokemonData pokemon_data = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonData = new \POGOProtos\Data\PokemonData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokemonData did not read the full length');

            break;
          case 2: // optional .POGOProtos.Inventory.Item.ItemData item = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->item = new \POGOProtos\Inventory\Item\ItemData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\Item\ItemData did not read the full length');

            break;
          case 3: // optional .POGOProtos.Data.PokedexEntry pokedex_entry = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokedexEntry = new \POGOProtos\Data\PokedexEntry($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\PokedexEntry did not read the full length');

            break;
          case 4: // optional .POGOProtos.Data.Player.PlayerStats player_stats = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->playerStats = new \POGOProtos\Data\Player\PlayerStats($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\PlayerStats did not read the full length');

            break;
          case 5: // optional .POGOProtos.Data.Player.PlayerCurrency player_currency = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->playerCurrency = new \POGOProtos\Data\Player\PlayerCurrency($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\PlayerCurrency did not read the full length');

            break;
          case 6: // optional .POGOProtos.Data.Player.PlayerCamera player_camera = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->playerCamera = new \POGOProtos\Data\Player\PlayerCamera($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\PlayerCamera did not read the full length');

            break;
          case 7: // optional .POGOProtos.Inventory.InventoryUpgrades inventory_upgrades = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->inventoryUpgrades = new \POGOProtos\Inventory\InventoryUpgrades($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\InventoryUpgrades did not read the full length');

            break;
          case 8: // optional .POGOProtos.Inventory.AppliedItems applied_items = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->appliedItems = new \POGOProtos\Inventory\AppliedItems($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\AppliedItems did not read the full length');

            break;
          case 9: // optional .POGOProtos.Inventory.EggIncubators egg_incubators = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->eggIncubators = new \POGOProtos\Inventory\EggIncubators($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\EggIncubators did not read the full length');

            break;
          case 10: // optional .POGOProtos.Inventory.PokemonFamily pokemon_family = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->pokemonFamily = new \POGOProtos\Inventory\PokemonFamily($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\PokemonFamily did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->pokemonData !== null) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->pokemonData->size());
        $this->pokemonData->write($fp);
      }
      if ($this->item !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->item->size());
        $this->item->write($fp);
      }
      if ($this->pokedexEntry !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->pokedexEntry->size());
        $this->pokedexEntry->write($fp);
      }
      if ($this->playerStats !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->playerStats->size());
        $this->playerStats->write($fp);
      }
      if ($this->playerCurrency !== null) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->playerCurrency->size());
        $this->playerCurrency->write($fp);
      }
      if ($this->playerCamera !== null) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $this->playerCamera->size());
        $this->playerCamera->write($fp);
      }
      if ($this->inventoryUpgrades !== null) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->inventoryUpgrades->size());
        $this->inventoryUpgrades->write($fp);
      }
      if ($this->appliedItems !== null) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->appliedItems->size());
        $this->appliedItems->write($fp);
      }
      if ($this->eggIncubators !== null) {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, $this->eggIncubators->size());
        $this->eggIncubators->write($fp);
      }
      if ($this->pokemonFamily !== null) {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, $this->pokemonFamily->size());
        $this->pokemonFamily->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->pokemonData !== null) {
        $l = $this->pokemonData->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->item !== null) {
        $l = $this->item->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->pokedexEntry !== null) {
        $l = $this->pokedexEntry->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->playerStats !== null) {
        $l = $this->playerStats->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->playerCurrency !== null) {
        $l = $this->playerCurrency->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->playerCamera !== null) {
        $l = $this->playerCamera->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->inventoryUpgrades !== null) {
        $l = $this->inventoryUpgrades->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->appliedItems !== null) {
        $l = $this->appliedItems->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->eggIncubators !== null) {
        $l = $this->eggIncubators->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->pokemonFamily !== null) {
        $l = $this->pokemonFamily->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearPokemonData() { $this->pokemonData = null; }
    public function getPokemonData() { return $this->pokemonData;}
    public function setPokemonData(\POGOProtos\Data\PokemonData $value) { $this->pokemonData = $value; }

    public function clearItem() { $this->item = null; }
    public function getItem() { return $this->item;}
    public function setItem(\POGOProtos\Inventory\Item\ItemData $value) { $this->item = $value; }

    public function clearPokedexEntry() { $this->pokedexEntry = null; }
    public function getPokedexEntry() { return $this->pokedexEntry;}
    public function setPokedexEntry(\POGOProtos\Data\PokedexEntry $value) { $this->pokedexEntry = $value; }

    public function clearPlayerStats() { $this->playerStats = null; }
    public function getPlayerStats() { return $this->playerStats;}
    public function setPlayerStats(\POGOProtos\Data\Player\PlayerStats $value) { $this->playerStats = $value; }

    public function clearPlayerCurrency() { $this->playerCurrency = null; }
    public function getPlayerCurrency() { return $this->playerCurrency;}
    public function setPlayerCurrency(\POGOProtos\Data\Player\PlayerCurrency $value) { $this->playerCurrency = $value; }

    public function clearPlayerCamera() { $this->playerCamera = null; }
    public function getPlayerCamera() { return $this->playerCamera;}
    public function setPlayerCamera(\POGOProtos\Data\Player\PlayerCamera $value) { $this->playerCamera = $value; }

    public function clearInventoryUpgrades() { $this->inventoryUpgrades = null; }
    public function getInventoryUpgrades() { return $this->inventoryUpgrades;}
    public function setInventoryUpgrades(\POGOProtos\Inventory\InventoryUpgrades $value) { $this->inventoryUpgrades = $value; }

    public function clearAppliedItems() { $this->appliedItems = null; }
    public function getAppliedItems() { return $this->appliedItems;}
    public function setAppliedItems(\POGOProtos\Inventory\AppliedItems $value) { $this->appliedItems = $value; }

    public function clearEggIncubators() { $this->eggIncubators = null; }
    public function getEggIncubators() { return $this->eggIncubators;}
    public function setEggIncubators(\POGOProtos\Inventory\EggIncubators $value) { $this->eggIncubators = $value; }

    public function clearPokemonFamily() { $this->pokemonFamily = null; }
    public function getPokemonFamily() { return $this->pokemonFamily;}
    public function setPokemonFamily(\POGOProtos\Inventory\PokemonFamily $value) { $this->pokemonFamily = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('pokemon_data', $this->pokemonData, null)
           . Protobuf::toString('item', $this->item, null)
           . Protobuf::toString('pokedex_entry', $this->pokedexEntry, null)
           . Protobuf::toString('player_stats', $this->playerStats, null)
           . Protobuf::toString('player_currency', $this->playerCurrency, null)
           . Protobuf::toString('player_camera', $this->playerCamera, null)
           . Protobuf::toString('inventory_upgrades', $this->inventoryUpgrades, null)
           . Protobuf::toString('applied_items', $this->appliedItems, null)
           . Protobuf::toString('egg_incubators', $this->eggIncubators, null)
           . Protobuf::toString('pokemon_family', $this->pokemonFamily, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Inventory.InventoryItemData)
  }

}